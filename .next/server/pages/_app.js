module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = require('../ssr-module-cache.js');
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/scss/index.scss":
/*!********************************!*\
  !*** ./assets/scss/index.scss ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuL2Fzc2V0cy9zY3NzL2luZGV4LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/scss/index.scss\n");

/***/ }),

/***/ "./node_modules/underscore/underscore-umd.js":
/*!***************************************************!*\
  !*** ./node_modules/underscore/underscore-umd.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, (function () {\n  //     Underscore.js 1.13.1\n  //     https://underscorejs.org\n  //     (c) 2009-2021 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors\n  //     Underscore may be freely distributed under the MIT license.\n\n  // Current version.\n  var VERSION = '1.13.1';\n\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self ||\n            typeof global == 'object' && global.global === global && global ||\n            Function('return this')() ||\n            {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // Modern feature detection.\n  var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',\n      supportsDataView = typeof DataView !== 'undefined';\n\n  // All **ECMAScript 5+** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create,\n      nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;\n\n  // Create references to these builtin functions because we override them.\n  var _isNaN = isNaN,\n      _isFinite = isFinite;\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  // The largest integer that can be represented exactly.\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n\n  // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n  function restArguments(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n      switch (startIndex) {\n        case 0: return func.call(this, rest);\n        case 1: return func.call(this, arguments[0], rest);\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\n      }\n      var args = Array(startIndex + 1);\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  }\n\n  // Is a given variable an object?\n  function isObject(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  }\n\n  // Is a given value equal to null?\n  function isNull(obj) {\n    return obj === null;\n  }\n\n  // Is a given variable undefined?\n  function isUndefined(obj) {\n    return obj === void 0;\n  }\n\n  // Is a given value a boolean?\n  function isBoolean(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  }\n\n  // Is a given value a DOM element?\n  function isElement(obj) {\n    return !!(obj && obj.nodeType === 1);\n  }\n\n  // Internal function for creating a `toString`-based type tester.\n  function tagTester(name) {\n    var tag = '[object ' + name + ']';\n    return function(obj) {\n      return toString.call(obj) === tag;\n    };\n  }\n\n  var isString = tagTester('String');\n\n  var isNumber = tagTester('Number');\n\n  var isDate = tagTester('Date');\n\n  var isRegExp = tagTester('RegExp');\n\n  var isError = tagTester('Error');\n\n  var isSymbol = tagTester('Symbol');\n\n  var isArrayBuffer = tagTester('ArrayBuffer');\n\n  var isFunction = tagTester('Function');\n\n  // Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old\n  // v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n  var nodelist = root.document && root.document.childNodes;\n  if ( true && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  var isFunction$1 = isFunction;\n\n  var hasObjectTag = tagTester('Object');\n\n  // In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.\n  // In IE 11, the most common among them, this problem also applies to\n  // `Map`, `WeakMap` and `Set`.\n  var hasStringTagBug = (\n        supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))\n      ),\n      isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));\n\n  var isDataView = tagTester('DataView');\n\n  // In IE 10 - Edge 13, we need a different heuristic\n  // to determine whether an object is a `DataView`.\n  function ie10IsDataView(obj) {\n    return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);\n  }\n\n  var isDataView$1 = (hasStringTagBug ? ie10IsDataView : isDataView);\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native `Array.isArray`.\n  var isArray = nativeIsArray || tagTester('Array');\n\n  // Internal function to check whether `key` is an own property name of `obj`.\n  function has$1(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  }\n\n  var isArguments = tagTester('Arguments');\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  (function() {\n    if (!isArguments(arguments)) {\n      isArguments = function(obj) {\n        return has$1(obj, 'callee');\n      };\n    }\n  }());\n\n  var isArguments$1 = isArguments;\n\n  // Is a given object a finite number?\n  function isFinite$1(obj) {\n    return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));\n  }\n\n  // Is the given value `NaN`?\n  function isNaN$1(obj) {\n    return isNumber(obj) && _isNaN(obj);\n  }\n\n  // Predicate-generating function. Often useful outside of Underscore.\n  function constant(value) {\n    return function() {\n      return value;\n    };\n  }\n\n  // Common internal logic for `isArrayLike` and `isBufferLike`.\n  function createSizePropertyCheck(getSizeProperty) {\n    return function(collection) {\n      var sizeProperty = getSizeProperty(collection);\n      return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;\n    }\n  }\n\n  // Internal helper to generate a function to obtain property `key` from `obj`.\n  function shallowProperty(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  }\n\n  // Internal helper to obtain the `byteLength` property of an object.\n  var getByteLength = shallowProperty('byteLength');\n\n  // Internal helper to determine whether we should spend extensive checks against\n  // `ArrayBuffer` et al.\n  var isBufferLike = createSizePropertyCheck(getByteLength);\n\n  // Is a given value a typed array?\n  var typedArrayPattern = /\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;\n  function isTypedArray(obj) {\n    // `ArrayBuffer.isView` is the most future-proof, so use it when available.\n    // Otherwise, fall back on the above regular expression.\n    return nativeIsView ? (nativeIsView(obj) && !isDataView$1(obj)) :\n                  isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));\n  }\n\n  var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);\n\n  // Internal helper to obtain the `length` property of an object.\n  var getLength = shallowProperty('length');\n\n  // Internal helper to create a simple lookup structure.\n  // `collectNonEnumProps` used to depend on `_.contains`, but this led to\n  // circular imports. `emulatedSet` is a one-off solution that only works for\n  // arrays of strings.\n  function emulatedSet(keys) {\n    var hash = {};\n    for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;\n    return {\n      contains: function(key) { return hash[key]; },\n      push: function(key) {\n        hash[key] = true;\n        return keys.push(key);\n      }\n    };\n  }\n\n  // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't\n  // be iterated by `for key in ...` and thus missed. Extends `keys` in place if\n  // needed.\n  function collectNonEnumProps(obj, keys) {\n    keys = emulatedSet(keys);\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = isFunction$1(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (has$1(obj, prop) && !keys.contains(prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n  function keys(obj) {\n    if (!isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (has$1(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  }\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  function isEmpty(obj) {\n    if (obj == null) return true;\n    // Skip the more expensive `toString`-based type checks if `obj` has no\n    // `.length`.\n    var length = getLength(obj);\n    if (typeof length == 'number' && (\n      isArray(obj) || isString(obj) || isArguments$1(obj)\n    )) return length === 0;\n    return getLength(keys(obj)) === 0;\n  }\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  function isMatch(object, attrs) {\n    var _keys = keys(attrs), length = _keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = _keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  }\n\n  // If Underscore is called as a function, it returns a wrapped object that can\n  // be used OO-style. This wrapper holds altered versions of all functions added\n  // through `_.mixin`. Wrapped objects may be chained.\n  function _$1(obj) {\n    if (obj instanceof _$1) return obj;\n    if (!(this instanceof _$1)) return new _$1(obj);\n    this._wrapped = obj;\n  }\n\n  _$1.VERSION = VERSION;\n\n  // Extracts the result from a wrapped and chained object.\n  _$1.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxies for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;\n\n  _$1.prototype.toString = function() {\n    return String(this._wrapped);\n  };\n\n  // Internal function to wrap or shallow-copy an ArrayBuffer,\n  // typed array or DataView to a new view, reusing the buffer.\n  function toBufferView(bufferSource) {\n    return new Uint8Array(\n      bufferSource.buffer || bufferSource,\n      bufferSource.byteOffset || 0,\n      getByteLength(bufferSource)\n    );\n  }\n\n  // We use this string twice, so give it a name for minification.\n  var tagDataView = '[object DataView]';\n\n  // Internal recursive comparison function for `_.isEqual`.\n  function eq(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  }\n\n  // Internal recursive comparison function for `_.isEqual`.\n  function deepEq(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _$1) a = a._wrapped;\n    if (b instanceof _$1) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    // Work around a bug in IE 10 - Edge 13.\n    if (hasStringTagBug && className == '[object Object]' && isDataView$1(a)) {\n      if (!isDataView$1(b)) return false;\n      className = tagDataView;\n    }\n    switch (className) {\n      // These types are compared by value.\n      case '[object RegExp]':\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n      case '[object ArrayBuffer]':\n      case tagDataView:\n        // Coerce to typed array so we can fall through.\n        return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays && isTypedArray$1(a)) {\n        var byteLength = getByteLength(a);\n        if (byteLength !== getByteLength(b)) return false;\n        if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;\n        areArrays = true;\n    }\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&\n                               isFunction$1(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var _keys = keys(a), key;\n      length = _keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = _keys[length];\n        if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  }\n\n  // Perform a deep comparison to check if two objects are equal.\n  function isEqual(a, b) {\n    return eq(a, b);\n  }\n\n  // Retrieve all the enumerable property names of an object.\n  function allKeys(obj) {\n    if (!isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  }\n\n  // Since the regular `Object.prototype.toString` type tests don't work for\n  // some types in IE 11, we use a fingerprinting heuristic instead, based\n  // on the methods. It's not great, but it's the best we got.\n  // The fingerprint method lists are defined below.\n  function ie11fingerprint(methods) {\n    var length = getLength(methods);\n    return function(obj) {\n      if (obj == null) return false;\n      // `Map`, `WeakMap` and `Set` have no enumerable keys.\n      var keys = allKeys(obj);\n      if (getLength(keys)) return false;\n      for (var i = 0; i < length; i++) {\n        if (!isFunction$1(obj[methods[i]])) return false;\n      }\n      // If we are testing against `WeakMap`, we need to ensure that\n      // `obj` doesn't have a `forEach` method in order to distinguish\n      // it from a regular `Map`.\n      return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);\n    };\n  }\n\n  // In the interest of compact minification, we write\n  // each string in the fingerprints only once.\n  var forEachName = 'forEach',\n      hasName = 'has',\n      commonInit = ['clear', 'delete'],\n      mapTail = ['get', hasName, 'set'];\n\n  // `Map`, `WeakMap` and `Set` each have slightly different\n  // combinations of the above sublists.\n  var mapMethods = commonInit.concat(forEachName, mapTail),\n      weakMapMethods = commonInit.concat(mapTail),\n      setMethods = ['add'].concat(commonInit, forEachName, hasName);\n\n  var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');\n\n  var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');\n\n  var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');\n\n  var isWeakSet = tagTester('WeakSet');\n\n  // Retrieve the values of an object's properties.\n  function values(obj) {\n    var _keys = keys(obj);\n    var length = _keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[_keys[i]];\n    }\n    return values;\n  }\n\n  // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of `_.object` with one argument.\n  function pairs(obj) {\n    var _keys = keys(obj);\n    var length = _keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [_keys[i], obj[_keys[i]]];\n    }\n    return pairs;\n  }\n\n  // Invert the keys and values of an object. The values must be serializable.\n  function invert(obj) {\n    var result = {};\n    var _keys = keys(obj);\n    for (var i = 0, length = _keys.length; i < length; i++) {\n      result[obj[_keys[i]]] = _keys[i];\n    }\n    return result;\n  }\n\n  // Return a sorted list of the function names available on the object.\n  function functions(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (isFunction$1(obj[key])) names.push(key);\n    }\n    return names.sort();\n  }\n\n  // An internal function for creating assigner functions.\n  function createAssigner(keysFunc, defaults) {\n    return function(obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  }\n\n  // Extend a given object with all the properties in passed-in object(s).\n  var extend = createAssigner(allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in\n  // object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  var extendOwn = createAssigner(keys);\n\n  // Fill in a given object with default properties.\n  var defaults = createAssigner(allKeys, true);\n\n  // Create a naked function reference for surrogate-prototype-swapping.\n  function ctor() {\n    return function(){};\n  }\n\n  // An internal function for creating a new object that inherits from another.\n  function baseCreate(prototype) {\n    if (!isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    var Ctor = ctor();\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  }\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  function create(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) extendOwn(result, props);\n    return result;\n  }\n\n  // Create a (shallow-cloned) duplicate of an object.\n  function clone(obj) {\n    if (!isObject(obj)) return obj;\n    return isArray(obj) ? obj.slice() : extend({}, obj);\n  }\n\n  // Invokes `interceptor` with the `obj` and then returns `obj`.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  function tap(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  }\n\n  // Normalize a (deep) property `path` to array.\n  // Like `_.iteratee`, this function can be customized.\n  function toPath$1(path) {\n    return isArray(path) ? path : [path];\n  }\n  _$1.toPath = toPath$1;\n\n  // Internal wrapper for `_.toPath` to enable minification.\n  // Similar to `cb` for `_.iteratee`.\n  function toPath(path) {\n    return _$1.toPath(path);\n  }\n\n  // Internal function to obtain a nested property in `obj` along `path`.\n  function deepGet(obj, path) {\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n  }\n\n  // Get the value of the (deep) property on `path` from `object`.\n  // If any property in `path` does not exist or if the value is\n  // `undefined`, return `defaultValue` instead.\n  // The `path` is normalized through `_.toPath`.\n  function get(object, path, defaultValue) {\n    var value = deepGet(object, toPath(path));\n    return isUndefined(value) ? defaultValue : value;\n  }\n\n  // Shortcut function for checking if an object has a given property directly on\n  // itself (in other words, not on a prototype). Unlike the internal `has`\n  // function, this public version can also traverse nested properties.\n  function has(obj, path) {\n    path = toPath(path);\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n      if (!has$1(obj, key)) return false;\n      obj = obj[key];\n    }\n    return !!length;\n  }\n\n  // Keep the identity function around for default iteratees.\n  function identity(value) {\n    return value;\n  }\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  function matcher(attrs) {\n    attrs = extendOwn({}, attrs);\n    return function(obj) {\n      return isMatch(obj, attrs);\n    };\n  }\n\n  // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indices.\n  function property(path) {\n    path = toPath(path);\n    return function(obj) {\n      return deepGet(obj, path);\n    };\n  }\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  function optimizeCb(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      // The 2-argument case is omitted because we’re not using it.\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  }\n\n  // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `_.identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n  function baseIteratee(value, context, argCount) {\n    if (value == null) return identity;\n    if (isFunction$1(value)) return optimizeCb(value, context, argCount);\n    if (isObject(value) && !isArray(value)) return matcher(value);\n    return property(value);\n  }\n\n  // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only `argCount` argument.\n  function iteratee(value, context) {\n    return baseIteratee(value, context, Infinity);\n  }\n  _$1.iteratee = iteratee;\n\n  // The function we call internally to generate a callback. It invokes\n  // `_.iteratee` if overridden, otherwise `baseIteratee`.\n  function cb(value, context, argCount) {\n    if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);\n    return baseIteratee(value, context, argCount);\n  }\n\n  // Returns the results of applying the `iteratee` to each element of `obj`.\n  // In contrast to `_.map` it returns an object.\n  function mapObject(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var _keys = keys(obj),\n        length = _keys.length,\n        results = {};\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  }\n\n  // Predicate-generating function. Often useful outside of Underscore.\n  function noop(){}\n\n  // Generates a function for a given object that returns a given property.\n  function propertyOf(obj) {\n    if (obj == null) return noop;\n    return function(path) {\n      return get(obj, path);\n    };\n  }\n\n  // Run a function **n** times.\n  function times(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  }\n\n  // Return a random integer between `min` and `max` (inclusive).\n  function random(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  }\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  var now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n  // Internal helper to generate functions for escaping and unescaping strings\n  // to/from HTML interpolation.\n  function createEscaper(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = '(?:' + keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  }\n\n  // Internal list of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n\n  // Function for escaping strings to HTML interpolation.\n  var _escape = createEscaper(escapeMap);\n\n  // Internal list of HTML entities for unescaping.\n  var unescapeMap = invert(escapeMap);\n\n  // Function for unescaping strings from HTML interpolation.\n  var _unescape = createEscaper(unescapeMap);\n\n  // By default, Underscore uses ERB-style template delimiters. Change the\n  // following template settings to use alternative delimiters.\n  var templateSettings = _$1.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `_.templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  function escapeChar(match) {\n    return '\\\\' + escapes[match];\n  }\n\n  // In order to prevent third-party code injection through\n  // `_.templateSettings.variable`, we test it against the following regular\n  // expression. It is intentionally a bit more liberal than just matching valid\n  // identifiers, but still prevents possible loopholes through defaults or\n  // destructuring assignment.\n  var bareIdentifier = /^\\s*(\\w|\\$)+\\s*$/;\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  function template(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = defaults({}, settings, _$1.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offset.\n      return match;\n    });\n    source += \"';\\n\";\n\n    var argument = settings.variable;\n    if (argument) {\n      // Insure against third-party code injection. (CVE-2021-23358)\n      if (!bareIdentifier.test(argument)) throw new Error(\n        'variable is not a bare identifier: ' + argument\n      );\n    } else {\n      // If a variable is not specified, place data values in local scope.\n      source = 'with(obj||{}){\\n' + source + '}\\n';\n      argument = 'obj';\n    }\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    var render;\n    try {\n      render = new Function(argument, '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _$1);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  }\n\n  // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n  function result(obj, path, fallback) {\n    path = toPath(path);\n    var length = path.length;\n    if (!length) {\n      return isFunction$1(fallback) ? fallback.call(obj) : fallback;\n    }\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n      obj = isFunction$1(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n  }\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  function uniqueId(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  }\n\n  // Start chaining a wrapped Underscore object.\n  function chain(obj) {\n    var instance = _$1(obj);\n    instance._chain = true;\n    return instance;\n  }\n\n  // Internal function to execute `sourceFunc` bound to `context` with optional\n  // `args`. Determines whether to execute a function as a constructor or as a\n  // normal function.\n  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (isObject(result)) return result;\n    return self;\n  }\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. `_` acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n  var partial = restArguments(function(func, boundArgs) {\n    var placeholder = partial.placeholder;\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  });\n\n  partial.placeholder = _$1;\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally).\n  var bind = restArguments(function(func, context, args) {\n    if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function(callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  });\n\n  // Internal helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var isArrayLike = createSizePropertyCheck(getLength);\n\n  // Internal implementation of a recursive `flatten` function.\n  function flatten$1(input, depth, strict, output) {\n    output = output || [];\n    if (!depth && depth !== 0) {\n      depth = Infinity;\n    } else if (depth <= 0) {\n      return output.concat(input);\n    }\n    var idx = output.length;\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {\n        // Flatten current level of array or arguments object.\n        if (depth > 1) {\n          flatten$1(value, depth - 1, strict, output);\n          idx = output.length;\n        } else {\n          var j = 0, len = value.length;\n          while (j < len) output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  }\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  var bindAll = restArguments(function(obj, keys) {\n    keys = flatten$1(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n    while (index--) {\n      var key = keys[index];\n      obj[key] = bind(obj[key], obj);\n    }\n    return obj;\n  });\n\n  // Memoize an expensive function by storing its results.\n  function memoize(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  }\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  var delay = restArguments(function(func, wait, args) {\n    return setTimeout(function() {\n      return func.apply(null, args);\n    }, wait);\n  });\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  var defer = partial(delay, _$1, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  function throttle(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var _now = now();\n      if (!previous && options.leading === false) previous = _now;\n      var remaining = wait - (_now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = _now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  }\n\n  // When a sequence of calls of the returned function ends, the argument\n  // function is triggered. The end of a sequence is defined by the `wait`\n  // parameter. If `immediate` is passed, the argument function will be\n  // triggered at the beginning of the sequence instead of at the end.\n  function debounce(func, wait, immediate) {\n    var timeout, previous, args, result, context;\n\n    var later = function() {\n      var passed = now() - previous;\n      if (wait > passed) {\n        timeout = setTimeout(later, wait - passed);\n      } else {\n        timeout = null;\n        if (!immediate) result = func.apply(context, args);\n        // This check is needed because `func` can recursively invoke `debounced`.\n        if (!timeout) args = context = null;\n      }\n    };\n\n    var debounced = restArguments(function(_args) {\n      context = this;\n      args = _args;\n      previous = now();\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n        if (immediate) result = func.apply(context, args);\n      }\n      return result;\n    });\n\n    debounced.cancel = function() {\n      clearTimeout(timeout);\n      timeout = args = context = null;\n    };\n\n    return debounced;\n  }\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  function wrap(func, wrapper) {\n    return partial(wrapper, func);\n  }\n\n  // Returns a negated version of the passed-in predicate.\n  function negate(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  }\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  function compose() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  }\n\n  // Returns a function that will only be executed on and after the Nth call.\n  function after(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  }\n\n  // Returns a function that will only be executed up to (but not including) the\n  // Nth call.\n  function before(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  }\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  var once = partial(before, 2);\n\n  // Returns the first key on an object that passes a truth test.\n  function findKey(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var _keys = keys(obj), key;\n    for (var i = 0, length = _keys.length; i < length; i++) {\n      key = _keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  }\n\n  // Internal function to generate `_.findIndex` and `_.findLastIndex`.\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a truth test.\n  var findIndex = createPredicateIndexFinder(1);\n\n  // Returns the last index on an array-like that passes a truth test.\n  var findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  function sortedIndex(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  }\n\n  // Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), isNaN$1);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  var indexOf = createIndexFinder(1, findIndex, sortedIndex);\n\n  // Return the position of the last occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  var lastIndexOf = createIndexFinder(-1, findLastIndex);\n\n  // Return the first value which passes a truth test.\n  function find(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? findIndex : findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  }\n\n  // Convenience version of a common use case of `_.find`: getting the first\n  // object containing specific `key:value` pairs.\n  function findWhere(obj, attrs) {\n    return find(obj, matcher(attrs));\n  }\n\n  // The cornerstone for collection functions, an `each`\n  // implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  function each(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var _keys = keys(obj);\n      for (i = 0, length = _keys.length; i < length; i++) {\n        iteratee(obj[_keys[i]], _keys[i], obj);\n      }\n    }\n    return obj;\n  }\n\n  // Return the results of applying the iteratee to each element.\n  function map(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  }\n\n  // Internal helper to create a reducing function, iterating left or right.\n  function createReduce(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n      var _keys = !isArrayLike(obj) && keys(obj),\n          length = (_keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      if (!initial) {\n        memo = obj[_keys ? _keys[index] : index];\n        index += dir;\n      }\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = _keys ? _keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    };\n\n    return function(obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  var reduce = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  var reduceRight = createReduce(-1);\n\n  // Return all the elements that pass a truth test.\n  function filter(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  }\n\n  // Return all the elements for which a truth test fails.\n  function reject(obj, predicate, context) {\n    return filter(obj, negate(cb(predicate)), context);\n  }\n\n  // Determine whether all of the elements pass a truth test.\n  function every(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  }\n\n  // Determine if at least one element in the object passes a truth test.\n  function some(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  }\n\n  // Determine if the array or object contains a given item (using `===`).\n  function contains(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return indexOf(obj, item, fromIndex) >= 0;\n  }\n\n  // Invoke a method (with arguments) on every item in a collection.\n  var invoke = restArguments(function(obj, path, args) {\n    var contextPath, func;\n    if (isFunction$1(path)) {\n      func = path;\n    } else {\n      path = toPath(path);\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n    return map(obj, function(context) {\n      var method = func;\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n        if (context == null) return void 0;\n        method = context[path];\n      }\n      return method == null ? method : method.apply(context, args);\n    });\n  });\n\n  // Convenience version of a common use case of `_.map`: fetching a property.\n  function pluck(obj, key) {\n    return map(obj, property(key));\n  }\n\n  // Convenience version of a common use case of `_.filter`: selecting only\n  // objects containing specific `key:value` pairs.\n  function where(obj, attrs) {\n    return filter(obj, matcher(attrs));\n  }\n\n  // Return the maximum element (or element-based computation).\n  function max(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  }\n\n  // Return the minimum element (or element-based computation).\n  function min(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  }\n\n  // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `_.map`.\n  function sample(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = values(obj);\n      return obj[random(obj.length - 1)];\n    }\n    var sample = isArrayLike(obj) ? clone(obj) : values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for (var index = 0; index < n; index++) {\n      var rand = random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n  }\n\n  // Shuffle a collection.\n  function shuffle(obj) {\n    return sample(obj, Infinity);\n  }\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  function sortBy(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return pluck(map(obj, function(value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  }\n\n  // An internal function used for aggregate \"group by\" operations.\n  function group(behavior, partition) {\n    return function(obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  }\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  var groupBy = group(function(result, value, key) {\n    if (has$1(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `_.groupBy`, but for\n  // when you know that your index values will be unique.\n  var indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  var countBy = group(function(result, value, key) {\n    if (has$1(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Split a collection into two arrays: one whose elements all pass the given\n  // truth test, and one whose elements all do not pass the truth test.\n  var partition = group(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true);\n\n  // Safely create a real, live array from anything iterable.\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n  function toArray(obj) {\n    if (!obj) return [];\n    if (isArray(obj)) return slice.call(obj);\n    if (isString(obj)) {\n      // Keep surrogate pair characters together.\n      return obj.match(reStrSymbol);\n    }\n    if (isArrayLike(obj)) return map(obj, identity);\n    return values(obj);\n  }\n\n  // Return the number of elements in a collection.\n  function size(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : keys(obj).length;\n  }\n\n  // Internal `_.pick` helper function to determine whether `key` is an enumerable\n  // property name of `obj`.\n  function keyInObj(value, key, obj) {\n    return key in obj;\n  }\n\n  // Return a copy of the object only containing the allowed properties.\n  var pick = restArguments(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if (isFunction$1(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten$1(keys, false, false);\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  });\n\n  // Return a copy of the object without the disallowed properties.\n  var omit = restArguments(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if (isFunction$1(iteratee)) {\n      iteratee = negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = map(flatten$1(keys, false, false), String);\n      iteratee = function(value, key) {\n        return !contains(keys, key);\n      };\n    }\n    return pick(obj, iteratee, context);\n  });\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  function initial(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  }\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  function first(array, n, guard) {\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return initial(array, array.length - n);\n  }\n\n  // Returns everything but the first entry of the `array`. Especially useful on\n  // the `arguments` object. Passing an **n** will return the rest N values in the\n  // `array`.\n  function rest(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  }\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  function last(array, n, guard) {\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return rest(array, Math.max(0, array.length - n));\n  }\n\n  // Trim out all falsy values from an array.\n  function compact(array) {\n    return filter(array, Boolean);\n  }\n\n  // Flatten out an array, either recursively (by default), or up to `depth`.\n  // Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.\n  function flatten(array, depth) {\n    return flatten$1(array, depth, false);\n  }\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  var difference = restArguments(function(array, rest) {\n    rest = flatten$1(rest, true, true);\n    return filter(array, function(value){\n      return !contains(rest, value);\n    });\n  });\n\n  // Return a version of the array that does not contain the specified value(s).\n  var without = restArguments(function(array, otherArrays) {\n    return difference(array, otherArrays);\n  });\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  function uniq(array, isSorted, iteratee, context) {\n    if (!isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  var union = restArguments(function(arrays) {\n    return uniq(flatten$1(arrays, true, true));\n  });\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  function intersection(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (contains(result, item)) continue;\n      var j;\n      for (j = 1; j < argsLength; j++) {\n        if (!contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  }\n\n  // Complement of zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n  function unzip(array) {\n    var length = array && max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = pluck(array, index);\n    }\n    return result;\n  }\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  var zip = restArguments(unzip);\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of `_.pairs`.\n  function object(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  }\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](https://docs.python.org/library/functions.html#range).\n  function range(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  }\n\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n  function chunk(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n    return result;\n  }\n\n  // Helper function to continue chaining intermediate results.\n  function chainResult(instance, obj) {\n    return instance._chain ? _$1(obj).chain() : obj;\n  }\n\n  // Add your own custom functions to the Underscore object.\n  function mixin(obj) {\n    each(functions(obj), function(name) {\n      var func = _$1[name] = obj[name];\n      _$1.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_$1, args));\n      };\n    });\n    return _$1;\n  }\n\n  // Add all mutator `Array` functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _$1.prototype[name] = function() {\n      var obj = this._wrapped;\n      if (obj != null) {\n        method.apply(obj, arguments);\n        if ((name === 'shift' || name === 'splice') && obj.length === 0) {\n          delete obj[0];\n        }\n      }\n      return chainResult(this, obj);\n    };\n  });\n\n  // Add all accessor `Array` functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _$1.prototype[name] = function() {\n      var obj = this._wrapped;\n      if (obj != null) obj = method.apply(obj, arguments);\n      return chainResult(this, obj);\n    };\n  });\n\n  // Named Exports\n\n  var allExports = {\n    __proto__: null,\n    VERSION: VERSION,\n    restArguments: restArguments,\n    isObject: isObject,\n    isNull: isNull,\n    isUndefined: isUndefined,\n    isBoolean: isBoolean,\n    isElement: isElement,\n    isString: isString,\n    isNumber: isNumber,\n    isDate: isDate,\n    isRegExp: isRegExp,\n    isError: isError,\n    isSymbol: isSymbol,\n    isArrayBuffer: isArrayBuffer,\n    isDataView: isDataView$1,\n    isArray: isArray,\n    isFunction: isFunction$1,\n    isArguments: isArguments$1,\n    isFinite: isFinite$1,\n    isNaN: isNaN$1,\n    isTypedArray: isTypedArray$1,\n    isEmpty: isEmpty,\n    isMatch: isMatch,\n    isEqual: isEqual,\n    isMap: isMap,\n    isWeakMap: isWeakMap,\n    isSet: isSet,\n    isWeakSet: isWeakSet,\n    keys: keys,\n    allKeys: allKeys,\n    values: values,\n    pairs: pairs,\n    invert: invert,\n    functions: functions,\n    methods: functions,\n    extend: extend,\n    extendOwn: extendOwn,\n    assign: extendOwn,\n    defaults: defaults,\n    create: create,\n    clone: clone,\n    tap: tap,\n    get: get,\n    has: has,\n    mapObject: mapObject,\n    identity: identity,\n    constant: constant,\n    noop: noop,\n    toPath: toPath$1,\n    property: property,\n    propertyOf: propertyOf,\n    matcher: matcher,\n    matches: matcher,\n    times: times,\n    random: random,\n    now: now,\n    escape: _escape,\n    unescape: _unescape,\n    templateSettings: templateSettings,\n    template: template,\n    result: result,\n    uniqueId: uniqueId,\n    chain: chain,\n    iteratee: iteratee,\n    partial: partial,\n    bind: bind,\n    bindAll: bindAll,\n    memoize: memoize,\n    delay: delay,\n    defer: defer,\n    throttle: throttle,\n    debounce: debounce,\n    wrap: wrap,\n    negate: negate,\n    compose: compose,\n    after: after,\n    before: before,\n    once: once,\n    findKey: findKey,\n    findIndex: findIndex,\n    findLastIndex: findLastIndex,\n    sortedIndex: sortedIndex,\n    indexOf: indexOf,\n    lastIndexOf: lastIndexOf,\n    find: find,\n    detect: find,\n    findWhere: findWhere,\n    each: each,\n    forEach: each,\n    map: map,\n    collect: map,\n    reduce: reduce,\n    foldl: reduce,\n    inject: reduce,\n    reduceRight: reduceRight,\n    foldr: reduceRight,\n    filter: filter,\n    select: filter,\n    reject: reject,\n    every: every,\n    all: every,\n    some: some,\n    any: some,\n    contains: contains,\n    includes: contains,\n    include: contains,\n    invoke: invoke,\n    pluck: pluck,\n    where: where,\n    max: max,\n    min: min,\n    shuffle: shuffle,\n    sample: sample,\n    sortBy: sortBy,\n    groupBy: groupBy,\n    indexBy: indexBy,\n    countBy: countBy,\n    partition: partition,\n    toArray: toArray,\n    size: size,\n    pick: pick,\n    omit: omit,\n    first: first,\n    head: first,\n    take: first,\n    initial: initial,\n    last: last,\n    rest: rest,\n    tail: rest,\n    drop: rest,\n    compact: compact,\n    flatten: flatten,\n    without: without,\n    uniq: uniq,\n    unique: uniq,\n    union: union,\n    intersection: intersection,\n    difference: difference,\n    unzip: unzip,\n    transpose: unzip,\n    zip: zip,\n    object: object,\n    range: range,\n    chunk: chunk,\n    mixin: mixin,\n    'default': _$1\n  };\n\n  // Default Export\n\n  // Add all of the Underscore functions to the wrapper object.\n  var _ = mixin(allExports);\n  // Legacy Node.js API.\n  _._ = _;\n\n  return _;\n\n})));\n//# sourceMappingURL=underscore-umd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/underscore/underscore-umd.js\n");

/***/ }),

/***/ "./src/pages/_app.js":
/*!***************************!*\
  !*** ./src/pages/_app.js ***!
  \***************************/
/*! exports provided: MyApp, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MyApp\", function() { return MyApp; });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/head */ \"next/head\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../redux/store */ \"./src/redux/store.js\");\n/* harmony import */ var _assets_scss_index_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../assets/scss/index.scss */ \"./assets/scss/index.scss\");\n/* harmony import */ var _assets_scss_index_scss__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_assets_scss_index_scss__WEBPACK_IMPORTED_MODULE_4__);\n\n\nvar _jsxFileName = \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/pages/_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], {\n    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(next_head__WEBPACK_IMPORTED_MODULE_2___default.a, {\n      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"title\", {\n        children: \"App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"meta\", {\n        property: \"og:title\",\n        content: \"My page title\"\n      }, \"title\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(Component, _objectSpread({}, pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (_redux_store__WEBPACK_IMPORTED_MODULE_3__[\"wrapper\"].withRedux(MyApp));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvX2FwcC5qcz8yMjU0Il0sIm5hbWVzIjpbIk15QXBwIiwiQ29tcG9uZW50IiwicGFnZVByb3BzIiwid3JhcHBlciIsIndpdGhSZWR1eCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFTyxTQUFTQSxLQUFULENBQWU7QUFBRUMsV0FBRjtBQUFhQztBQUFiLENBQWYsRUFBeUM7QUFDOUMsc0JBQ0U7QUFBQSw0QkFDRSxxRUFBQyxnREFBRDtBQUFBLDhCQUNFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGNBREYsZUFFRTtBQUFNLGdCQUFRLEVBQUMsVUFBZjtBQUEwQixlQUFPLEVBQUM7QUFBbEMsU0FBc0QsT0FBdEQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxjQUZGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQURGLGVBS0UscUVBQUMsU0FBRCxvQkFBZUEsU0FBZjtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBTEY7QUFBQSxrQkFERjtBQVNEO0FBRWNDLG1IQUFPLENBQUNDLFNBQVIsQ0FBa0JKLEtBQWxCLENBQWYiLCJmaWxlIjoiLi9zcmMvcGFnZXMvX2FwcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBIZWFkIGZyb20gXCJuZXh0L2hlYWRcIjtcbmltcG9ydCB7IHdyYXBwZXIgfSBmcm9tIFwiLi4vcmVkdXgvc3RvcmVcIjtcbmltcG9ydCBcIi4uLy4uL2Fzc2V0cy9zY3NzL2luZGV4LnNjc3NcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIE15QXBwKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfSkge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPHRpdGxlPkFwcDwvdGl0bGU+XG4gICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dGl0bGVcIiBjb250ZW50PVwiTXkgcGFnZSB0aXRsZVwiIGtleT1cInRpdGxlXCIgLz5cbiAgICAgIDwvSGVhZD5cbiAgICAgIDxDb21wb25lbnQgey4uLnBhZ2VQcm9wc30gLz5cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd3JhcHBlci53aXRoUmVkdXgoTXlBcHApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/pages/_app.js\n");

/***/ }),

/***/ "./src/redux/action.js":
/*!*****************************!*\
  !*** ./src/redux/action.js ***!
  \*****************************/
/*! exports provided: SET_DATA, FAILURE, TOGGLE_TEMP, getData, toggleTemp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SET_DATA\", function() { return SET_DATA; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FAILURE\", function() { return FAILURE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TOGGLE_TEMP\", function() { return TOGGLE_TEMP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getData\", function() { return getData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toggleTemp\", function() { return toggleTemp; });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./src/utils/index.js\");\n\n\nconst SET_DATA = \"SET_DATA\";\nconst FAILURE = \"FAILURE\";\nconst TOGGLE_TEMP = \"TOGGLE_TEMP\";\nconst key = \"82bc0d2d2aa2db497547b0da40fb0dcf\"; //process.env.REACT_APP_API_KEY;\n\nconst lang = \"en\";\nconst forecast = \"https://api.openweathermap.org/data/2.5/onecall\";\nconst getData = options => async dispatch => {\n  const {\n    unit,\n    query\n  } = options;\n  let params = {\n    appid: key,\n    lang,\n    units: unit,\n    lat: 11,\n    lon: 11\n  };\n  const geoCode = `https://api.openweathermap.org/geo/1.0/direct?q=${query}&&limit=1&appid=${key}`;\n\n  try {\n    const geocode = await axios__WEBPACK_IMPORTED_MODULE_0___default.a.get(geoCode);\n    const [geoData] = geocode.data;\n    params.lat = geoData.lat;\n    params.lon = geoData.lon;\n    const forecastResponse = await axios__WEBPACK_IMPORTED_MODULE_0___default.a.get(forecast, {\n      params\n    });\n    const payload = await Object(_utils__WEBPACK_IMPORTED_MODULE_1__[\"mapData\"])(forecastResponse.data.daily, forecastResponse.data.current, geoData, lang);\n    dispatch({\n      type: SET_DATA,\n      payload: payload\n    });\n  } catch (error) {\n    dispatch({\n      type: FAILURE,\n      payload: true\n    });\n  }\n};\nconst toggleTemp = options => async dispatch => {\n  const {\n    unit,\n    query\n  } = options;\n  let params = {\n    appid: key,\n    lang,\n    units: unit,\n    lat: 11,\n    lon: 11\n  };\n  const geoCode = `https://api.openweathermap.org/geo/1.0/direct?q=${query}&&limit=1&appid=${key}`;\n\n  try {\n    const geocode = await axios__WEBPACK_IMPORTED_MODULE_0___default.a.get(geoCode);\n    const [geoData] = geocode.data;\n    params.lat = geoData.lat;\n    params.lon = geoData.lon;\n    const forecastResponse = await axios__WEBPACK_IMPORTED_MODULE_0___default.a.get(forecast, {\n      params\n    });\n    const data = await Object(_utils__WEBPACK_IMPORTED_MODULE_1__[\"mapData\"])(forecastResponse.data.daily, forecastResponse.data.current, geoData, lang);\n    dispatch({\n      type: TOGGLE_TEMP,\n      payload: {\n        data,\n        unit\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: FAILURE,\n      payload: true\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVkdXgvYWN0aW9uLmpzPzFkOTYiXSwibmFtZXMiOlsiU0VUX0RBVEEiLCJGQUlMVVJFIiwiVE9HR0xFX1RFTVAiLCJrZXkiLCJsYW5nIiwiZm9yZWNhc3QiLCJnZXREYXRhIiwib3B0aW9ucyIsImRpc3BhdGNoIiwidW5pdCIsInF1ZXJ5IiwicGFyYW1zIiwiYXBwaWQiLCJ1bml0cyIsImxhdCIsImxvbiIsImdlb0NvZGUiLCJnZW9jb2RlIiwiYXhpb3MiLCJnZXQiLCJnZW9EYXRhIiwiZGF0YSIsImZvcmVjYXN0UmVzcG9uc2UiLCJwYXlsb2FkIiwibWFwRGF0YSIsImRhaWx5IiwiY3VycmVudCIsInR5cGUiLCJlcnJvciIsInRvZ2dsZVRlbXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFTyxNQUFNQSxRQUFRLEdBQUcsVUFBakI7QUFDQSxNQUFNQyxPQUFPLEdBQUcsU0FBaEI7QUFDQSxNQUFNQyxXQUFXLEdBQUcsYUFBcEI7QUFFUCxNQUFNQyxHQUFHLEdBQUcsa0NBQVosQyxDQUFnRDs7QUFDaEQsTUFBTUMsSUFBSSxHQUFHLElBQWI7QUFDQSxNQUFNQyxRQUFRLEdBQUcsaURBQWpCO0FBRU8sTUFBTUMsT0FBTyxHQUFJQyxPQUFELElBQWEsTUFBT0MsUUFBUCxJQUFvQjtBQUN0RCxRQUFNO0FBQUVDLFFBQUY7QUFBUUM7QUFBUixNQUFrQkgsT0FBeEI7QUFDQSxNQUFJSSxNQUFNLEdBQUc7QUFDWEMsU0FBSyxFQUFFVCxHQURJO0FBRVhDLFFBRlc7QUFHWFMsU0FBSyxFQUFFSixJQUhJO0FBSVhLLE9BQUcsRUFBRSxFQUpNO0FBS1hDLE9BQUcsRUFBRTtBQUxNLEdBQWI7QUFRQSxRQUFNQyxPQUFPLEdBQUksbURBQWtETixLQUFNLG1CQUFrQlAsR0FBSSxFQUEvRjs7QUFFQSxNQUFJO0FBQ0YsVUFBTWMsT0FBTyxHQUFHLE1BQU1DLDRDQUFLLENBQUNDLEdBQU4sQ0FBVUgsT0FBVixDQUF0QjtBQUNBLFVBQU0sQ0FBQ0ksT0FBRCxJQUFZSCxPQUFPLENBQUNJLElBQTFCO0FBQ0FWLFVBQU0sQ0FBQ0csR0FBUCxHQUFhTSxPQUFPLENBQUNOLEdBQXJCO0FBQ0FILFVBQU0sQ0FBQ0ksR0FBUCxHQUFhSyxPQUFPLENBQUNMLEdBQXJCO0FBQ0EsVUFBTU8sZ0JBQWdCLEdBQUcsTUFBTUosNENBQUssQ0FBQ0MsR0FBTixDQUFVZCxRQUFWLEVBQW9CO0FBQUVNO0FBQUYsS0FBcEIsQ0FBL0I7QUFDQSxVQUFNWSxPQUFPLEdBQUcsTUFBTUMsc0RBQU8sQ0FDM0JGLGdCQUFnQixDQUFDRCxJQUFqQixDQUFzQkksS0FESyxFQUUzQkgsZ0JBQWdCLENBQUNELElBQWpCLENBQXNCSyxPQUZLLEVBRzNCTixPQUgyQixFQUkzQmhCLElBSjJCLENBQTdCO0FBT0FJLFlBQVEsQ0FBQztBQUNQbUIsVUFBSSxFQUFFM0IsUUFEQztBQUVQdUIsYUFBTyxFQUFFQTtBQUZGLEtBQUQsQ0FBUjtBQUlELEdBakJELENBaUJFLE9BQU9LLEtBQVAsRUFBYztBQUNkcEIsWUFBUSxDQUFDO0FBQUVtQixVQUFJLEVBQUUxQixPQUFSO0FBQWlCc0IsYUFBTyxFQUFFO0FBQTFCLEtBQUQsQ0FBUjtBQUNEO0FBQ0YsQ0FoQ007QUFrQ0EsTUFBTU0sVUFBVSxHQUFJdEIsT0FBRCxJQUFhLE1BQU9DLFFBQVAsSUFBb0I7QUFDekQsUUFBTTtBQUFFQyxRQUFGO0FBQVFDO0FBQVIsTUFBa0JILE9BQXhCO0FBQ0EsTUFBSUksTUFBTSxHQUFHO0FBQ1hDLFNBQUssRUFBRVQsR0FESTtBQUVYQyxRQUZXO0FBR1hTLFNBQUssRUFBRUosSUFISTtBQUlYSyxPQUFHLEVBQUUsRUFKTTtBQUtYQyxPQUFHLEVBQUU7QUFMTSxHQUFiO0FBUUEsUUFBTUMsT0FBTyxHQUFJLG1EQUFrRE4sS0FBTSxtQkFBa0JQLEdBQUksRUFBL0Y7O0FBRUEsTUFBSTtBQUNGLFVBQU1jLE9BQU8sR0FBRyxNQUFNQyw0Q0FBSyxDQUFDQyxHQUFOLENBQVVILE9BQVYsQ0FBdEI7QUFDQSxVQUFNLENBQUNJLE9BQUQsSUFBWUgsT0FBTyxDQUFDSSxJQUExQjtBQUNBVixVQUFNLENBQUNHLEdBQVAsR0FBYU0sT0FBTyxDQUFDTixHQUFyQjtBQUNBSCxVQUFNLENBQUNJLEdBQVAsR0FBYUssT0FBTyxDQUFDTCxHQUFyQjtBQUNBLFVBQU1PLGdCQUFnQixHQUFHLE1BQU1KLDRDQUFLLENBQUNDLEdBQU4sQ0FBVWQsUUFBVixFQUFvQjtBQUFFTTtBQUFGLEtBQXBCLENBQS9CO0FBQ0EsVUFBTVUsSUFBSSxHQUFHLE1BQU1HLHNEQUFPLENBQ3hCRixnQkFBZ0IsQ0FBQ0QsSUFBakIsQ0FBc0JJLEtBREUsRUFFeEJILGdCQUFnQixDQUFDRCxJQUFqQixDQUFzQkssT0FGRSxFQUd4Qk4sT0FId0IsRUFJeEJoQixJQUp3QixDQUExQjtBQU9BSSxZQUFRLENBQUM7QUFDUG1CLFVBQUksRUFBRXpCLFdBREM7QUFFUHFCLGFBQU8sRUFBRTtBQUFFRixZQUFGO0FBQVFaO0FBQVI7QUFGRixLQUFELENBQVI7QUFJRCxHQWpCRCxDQWlCRSxPQUFPbUIsS0FBUCxFQUFjO0FBQ2RwQixZQUFRLENBQUM7QUFBRW1CLFVBQUksRUFBRTFCLE9BQVI7QUFBaUJzQixhQUFPLEVBQUU7QUFBMUIsS0FBRCxDQUFSO0FBQ0Q7QUFDRixDQWhDTSIsImZpbGUiOiIuL3NyYy9yZWR1eC9hY3Rpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyBtYXBEYXRhIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBTRVRfREFUQSA9IFwiU0VUX0RBVEFcIjtcbmV4cG9ydCBjb25zdCBGQUlMVVJFID0gXCJGQUlMVVJFXCI7XG5leHBvcnQgY29uc3QgVE9HR0xFX1RFTVAgPSBcIlRPR0dMRV9URU1QXCI7XG5cbmNvbnN0IGtleSA9IFwiODJiYzBkMmQyYWEyZGI0OTc1NDdiMGRhNDBmYjBkY2ZcIjsgLy9wcm9jZXNzLmVudi5SRUFDVF9BUFBfQVBJX0tFWTtcbmNvbnN0IGxhbmcgPSBcImVuXCI7XG5jb25zdCBmb3JlY2FzdCA9IFwiaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L29uZWNhbGxcIjtcblxuZXhwb3J0IGNvbnN0IGdldERhdGEgPSAob3B0aW9ucykgPT4gYXN5bmMgKGRpc3BhdGNoKSA9PiB7XG4gIGNvbnN0IHsgdW5pdCwgcXVlcnkgfSA9IG9wdGlvbnM7XG4gIGxldCBwYXJhbXMgPSB7XG4gICAgYXBwaWQ6IGtleSxcbiAgICBsYW5nLFxuICAgIHVuaXRzOiB1bml0LFxuICAgIGxhdDogMTEsXG4gICAgbG9uOiAxMSxcbiAgfTtcblxuICBjb25zdCBnZW9Db2RlID0gYGh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9nZW8vMS4wL2RpcmVjdD9xPSR7cXVlcnl9JiZsaW1pdD0xJmFwcGlkPSR7a2V5fWA7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBnZW9jb2RlID0gYXdhaXQgYXhpb3MuZ2V0KGdlb0NvZGUpO1xuICAgIGNvbnN0IFtnZW9EYXRhXSA9IGdlb2NvZGUuZGF0YTtcbiAgICBwYXJhbXMubGF0ID0gZ2VvRGF0YS5sYXQ7XG4gICAgcGFyYW1zLmxvbiA9IGdlb0RhdGEubG9uO1xuICAgIGNvbnN0IGZvcmVjYXN0UmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoZm9yZWNhc3QsIHsgcGFyYW1zIH0pO1xuICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCBtYXBEYXRhKFxuICAgICAgZm9yZWNhc3RSZXNwb25zZS5kYXRhLmRhaWx5LFxuICAgICAgZm9yZWNhc3RSZXNwb25zZS5kYXRhLmN1cnJlbnQsXG4gICAgICBnZW9EYXRhLFxuICAgICAgbGFuZ1xuICAgICk7XG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBTRVRfREFUQSxcbiAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBGQUlMVVJFLCBwYXlsb2FkOiB0cnVlIH0pO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgdG9nZ2xlVGVtcCA9IChvcHRpb25zKSA9PiBhc3luYyAoZGlzcGF0Y2gpID0+IHtcbiAgY29uc3QgeyB1bml0LCBxdWVyeSB9ID0gb3B0aW9ucztcbiAgbGV0IHBhcmFtcyA9IHtcbiAgICBhcHBpZDoga2V5LFxuICAgIGxhbmcsXG4gICAgdW5pdHM6IHVuaXQsXG4gICAgbGF0OiAxMSxcbiAgICBsb246IDExLFxuICB9O1xuXG4gIGNvbnN0IGdlb0NvZGUgPSBgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2dlby8xLjAvZGlyZWN0P3E9JHtxdWVyeX0mJmxpbWl0PTEmYXBwaWQ9JHtrZXl9YDtcblxuICB0cnkge1xuICAgIGNvbnN0IGdlb2NvZGUgPSBhd2FpdCBheGlvcy5nZXQoZ2VvQ29kZSk7XG4gICAgY29uc3QgW2dlb0RhdGFdID0gZ2VvY29kZS5kYXRhO1xuICAgIHBhcmFtcy5sYXQgPSBnZW9EYXRhLmxhdDtcbiAgICBwYXJhbXMubG9uID0gZ2VvRGF0YS5sb247XG4gICAgY29uc3QgZm9yZWNhc3RSZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChmb3JlY2FzdCwgeyBwYXJhbXMgfSk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IG1hcERhdGEoXG4gICAgICBmb3JlY2FzdFJlc3BvbnNlLmRhdGEuZGFpbHksXG4gICAgICBmb3JlY2FzdFJlc3BvbnNlLmRhdGEuY3VycmVudCxcbiAgICAgIGdlb0RhdGEsXG4gICAgICBsYW5nXG4gICAgKTtcblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IFRPR0dMRV9URU1QLFxuICAgICAgcGF5bG9hZDogeyBkYXRhLCB1bml0IH0sXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBGQUlMVVJFLCBwYXlsb2FkOiB0cnVlIH0pO1xuICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/redux/action.js\n");

/***/ }),

/***/ "./src/redux/store.js":
/*!****************************!*\
  !*** ./src/redux/store.js ***!
  \****************************/
/*! exports provided: wrapper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"wrapper\", function() { return wrapper; });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"redux\");\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\");\n/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux-thunk */ \"redux-thunk\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(redux_thunk__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_redux_wrapper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next-redux-wrapper */ \"next-redux-wrapper\");\n/* harmony import */ var next_redux_wrapper__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_redux_wrapper__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var remote_redux_devtools__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! remote-redux-devtools */ \"remote-redux-devtools\");\n/* harmony import */ var remote_redux_devtools__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(remote_redux_devtools__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./action */ \"./src/redux/action.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nconst initialState = {\n  data: null,\n  error: null,\n  UnitType: \"metric\"\n};\nconst composeEnhancers =  false ? undefined : redux__WEBPACK_IMPORTED_MODULE_0__[\"compose\"]; // create your reducer\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case next_redux_wrapper__WEBPACK_IMPORTED_MODULE_4__[\"HYDRATE\"]:\n      const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n      if (state.count) nextState.count = state.count; // preserve count value on client side navigation\n\n      return nextState;\n\n    case _action__WEBPACK_IMPORTED_MODULE_6__[\"SET_DATA\"]:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.payload,\n          error: false\n        });\n      }\n\n    case _action__WEBPACK_IMPORTED_MODULE_6__[\"FAILURE\"]:\n      return {\n        data: null,\n        error: action.payload\n      };\n\n    case _action__WEBPACK_IMPORTED_MODULE_6__[\"TOGGLE_TEMP\"]:\n      {\n        const {\n          data,\n          unit\n        } = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: data,\n          UnitType: unit\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst enhancer = composeEnhancers(Object(redux__WEBPACK_IMPORTED_MODULE_0__[\"applyMiddleware\"])(redux_thunk__WEBPACK_IMPORTED_MODULE_2___default.a.withExtraArgument(axios__WEBPACK_IMPORTED_MODULE_3___default.a))); // create a makeStore function\n\nconst makeStore = context => Object(redux__WEBPACK_IMPORTED_MODULE_0__[\"createStore\"])(reducer, enhancer); // export an assembled wrapper\n\n\nconst wrapper = Object(next_redux_wrapper__WEBPACK_IMPORTED_MODULE_4__[\"createWrapper\"])(makeStore, {\n  debug: true\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVkdXgvc3RvcmUuanM/N2QzMSJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJkYXRhIiwiZXJyb3IiLCJVbml0VHlwZSIsImNvbXBvc2VFbmhhbmNlcnMiLCJ3aW5kb3ciLCJjb21wb3NlIiwicmVkdWNlciIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsIkhZRFJBVEUiLCJuZXh0U3RhdGUiLCJwYXlsb2FkIiwiY291bnQiLCJTRVRfREFUQSIsIkZBSUxVUkUiLCJUT0dHTEVfVEVNUCIsInVuaXQiLCJlbmhhbmNlciIsImFwcGx5TWlkZGxld2FyZSIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJheGlvcyIsIm1ha2VTdG9yZSIsImNvbnRleHQiLCJjcmVhdGVTdG9yZSIsIndyYXBwZXIiLCJjcmVhdGVXcmFwcGVyIiwiZGVidWciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTUEsWUFBWSxHQUFHO0FBQ25CQyxNQUFJLEVBQUUsSUFEYTtBQUVuQkMsT0FBSyxFQUFFLElBRlk7QUFHbkJDLFVBQVEsRUFBRTtBQUhTLENBQXJCO0FBTUEsTUFBTUMsZ0JBQWdCLEdBQ3BCLFNBQ0lDLFNBREosR0FJSUMsNkNBTE4sQyxDQU9BOztBQUNBLE1BQU1DLE9BQU8sR0FBRyxDQUFDQyxLQUFLLEdBQUdSLFlBQVQsRUFBdUJTLE1BQXZCLEtBQWtDO0FBQ2hELFVBQVFBLE1BQU0sQ0FBQ0MsSUFBZjtBQUNFLFNBQUtDLDBEQUFMO0FBQ0UsWUFBTUMsU0FBUyxtQ0FDVkosS0FEVSxHQUVWQyxNQUFNLENBQUNJLE9BRkcsQ0FBZjs7QUFJQSxVQUFJTCxLQUFLLENBQUNNLEtBQVYsRUFBaUJGLFNBQVMsQ0FBQ0UsS0FBVixHQUFrQk4sS0FBSyxDQUFDTSxLQUF4QixDQUxuQixDQUtrRDs7QUFDaEQsYUFBT0YsU0FBUDs7QUFDRixTQUFLRyxnREFBTDtBQUFlO0FBQ2IsK0NBQ0tQLEtBREw7QUFFRVAsY0FBSSxFQUFFUSxNQUFNLENBQUNJLE9BRmY7QUFHRVgsZUFBSyxFQUFFO0FBSFQ7QUFLRDs7QUFDRCxTQUFLYywrQ0FBTDtBQUNFLGFBQU87QUFBRWYsWUFBSSxFQUFFLElBQVI7QUFBY0MsYUFBSyxFQUFFTyxNQUFNLENBQUNJO0FBQTVCLE9BQVA7O0FBQ0YsU0FBS0ksbURBQUw7QUFBa0I7QUFDaEIsY0FBTTtBQUFFaEIsY0FBRjtBQUFRaUI7QUFBUixZQUFpQlQsTUFBTSxDQUFDSSxPQUE5QjtBQUNBLCtDQUNLTCxLQURMO0FBRUVQLGNBQUksRUFBRUEsSUFGUjtBQUdFRSxrQkFBUSxFQUFFZTtBQUhaO0FBS0Q7O0FBQ0Q7QUFDRSxhQUFPVixLQUFQO0FBMUJKO0FBNEJELENBN0JEOztBQStCQSxNQUFNVyxRQUFRLEdBQUdmLGdCQUFnQixDQUMvQmdCLDZEQUFlLENBQUNDLGtEQUFLLENBQUNDLGlCQUFOLENBQXdCQyw0Q0FBeEIsQ0FBRCxDQURnQixDQUFqQyxDLENBSUE7O0FBQ0EsTUFBTUMsU0FBUyxHQUFJQyxPQUFELElBQWFDLHlEQUFXLENBQUNuQixPQUFELEVBQVVZLFFBQVYsQ0FBMUMsQyxDQUVBOzs7QUFDTyxNQUFNUSxPQUFPLEdBQUdDLHdFQUFhLENBQUNKLFNBQUQsRUFBWTtBQUFFSyxPQUFLLEVBQUU7QUFBVCxDQUFaLENBQTdCIiwiZmlsZSI6Ii4vc3JjL3JlZHV4L3N0b3JlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSB9IGZyb20gXCJyZWR1eFwiO1xuaW1wb3J0IF8gZnJvbSBcInVuZGVyc2NvcmVcIjtcbmltcG9ydCB0aHVuayBmcm9tIFwicmVkdXgtdGh1bmtcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IGNyZWF0ZVdyYXBwZXIsIEhZRFJBVEUgfSBmcm9tIFwibmV4dC1yZWR1eC13cmFwcGVyXCI7XG5pbXBvcnQgeyBjb21wb3NlV2l0aERldlRvb2xzIH0gZnJvbSBcInJlbW90ZS1yZWR1eC1kZXZ0b29sc1wiO1xuaW1wb3J0IHsgU0VUX0RBVEEsIEZBSUxVUkUsIFRPR0dMRV9URU1QIH0gZnJvbSBcIi4vYWN0aW9uXCI7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgZGF0YTogbnVsbCxcbiAgZXJyb3I6IG51bGwsXG4gIFVuaXRUeXBlOiBcIm1ldHJpY1wiLFxufTtcblxuY29uc3QgY29tcG9zZUVuaGFuY2VycyA9XG4gIHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfX1xuICAgID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyh7XG4gICAgICAgIC8vIFNwZWNpZnkgZXh0ZW5zaW9u4oCZcyBvcHRpb25zIGxpa2UgbmFtZSwgYWN0aW9uc0JsYWNrbGlzdCwgYWN0aW9uc0NyZWF0b3JzLCBzZXJpYWxpemUuLi5cbiAgICAgIH0pXG4gICAgOiBjb21wb3NlO1xuXG4vLyBjcmVhdGUgeW91ciByZWR1Y2VyXG5jb25zdCByZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgSFlEUkFURTpcbiAgICAgIGNvbnN0IG5leHRTdGF0ZSA9IHtcbiAgICAgICAgLi4uc3RhdGUsIC8vIHVzZSBwcmV2aW91cyBzdGF0ZVxuICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZCwgLy8gYXBwbHkgZGVsdGEgZnJvbSBoeWRyYXRpb25cbiAgICAgIH07XG4gICAgICBpZiAoc3RhdGUuY291bnQpIG5leHRTdGF0ZS5jb3VudCA9IHN0YXRlLmNvdW50OyAvLyBwcmVzZXJ2ZSBjb3VudCB2YWx1ZSBvbiBjbGllbnQgc2lkZSBuYXZpZ2F0aW9uXG4gICAgICByZXR1cm4gbmV4dFN0YXRlO1xuICAgIGNhc2UgU0VUX0RBVEE6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBkYXRhOiBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBGQUlMVVJFOlxuICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3I6IGFjdGlvbi5wYXlsb2FkIH07XG4gICAgY2FzZSBUT0dHTEVfVEVNUDoge1xuICAgICAgY29uc3QgeyBkYXRhLCB1bml0IH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBVbml0VHlwZTogdW5pdCxcbiAgICAgIH07XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmNvbnN0IGVuaGFuY2VyID0gY29tcG9zZUVuaGFuY2VycyhcbiAgYXBwbHlNaWRkbGV3YXJlKHRodW5rLndpdGhFeHRyYUFyZ3VtZW50KGF4aW9zKSlcbik7XG5cbi8vIGNyZWF0ZSBhIG1ha2VTdG9yZSBmdW5jdGlvblxuY29uc3QgbWFrZVN0b3JlID0gKGNvbnRleHQpID0+IGNyZWF0ZVN0b3JlKHJlZHVjZXIsIGVuaGFuY2VyKTtcblxuLy8gZXhwb3J0IGFuIGFzc2VtYmxlZCB3cmFwcGVyXG5leHBvcnQgY29uc3Qgd3JhcHBlciA9IGNyZWF0ZVdyYXBwZXIobWFrZVN0b3JlLCB7IGRlYnVnOiB0cnVlIH0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/redux/store.js\n");

/***/ }),

/***/ "./src/utils/iconsMap.js":
/*!*******************************!*\
  !*** ./src/utils/iconsMap.js ***!
  \*******************************/
/*! exports provided: getIcon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getIcon\", function() { return getIcon; });\n/* harmony import */ var _svgIcons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./svgIcons */ \"./src/utils/svgIcons.js\");\n\nconst iconsMap = {\n  \"01d\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sunny,\n  \"02d\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cloudy,\n  \"03d\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cloudy,\n  \"04d\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cloudy,\n  \"09d\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].showers,\n  \"10d\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rain,\n  \"11d\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].thunderstorms,\n  \"13d\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].windySnow,\n  \"50d\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fog,\n  \"01n\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sunny,\n  \"02n\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cloudy,\n  \"03n\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cloudy,\n  \"04n\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cloudy,\n  \"09n\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].showers,\n  \"10n\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rain,\n  \"11n\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].thunderstorms,\n  \"13n\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].windySnow,\n  \"50n\": _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fog\n};\nconst getIcon = name => {\n  if (iconsMap[name]) {\n    return iconsMap[name];\n  }\n\n  return _svgIcons__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sunny;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvaWNvbnNNYXAuanM/ZTAzZSJdLCJuYW1lcyI6WyJpY29uc01hcCIsInN2Z0ljb25zIiwic3VubnkiLCJjbG91ZHkiLCJzaG93ZXJzIiwicmFpbiIsInRodW5kZXJzdG9ybXMiLCJ3aW5keVNub3ciLCJmb2ciLCJnZXRJY29uIiwibmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQSxNQUFNQSxRQUFRLEdBQUc7QUFDZixTQUFPQyxpREFBUSxDQUFDQyxLQUREO0FBRWYsU0FBT0QsaURBQVEsQ0FBQ0UsTUFGRDtBQUdmLFNBQU9GLGlEQUFRLENBQUNFLE1BSEQ7QUFJZixTQUFPRixpREFBUSxDQUFDRSxNQUpEO0FBS2YsU0FBT0YsaURBQVEsQ0FBQ0csT0FMRDtBQU1mLFNBQU9ILGlEQUFRLENBQUNJLElBTkQ7QUFPZixTQUFPSixpREFBUSxDQUFDSyxhQVBEO0FBUWYsU0FBT0wsaURBQVEsQ0FBQ00sU0FSRDtBQVNmLFNBQU9OLGlEQUFRLENBQUNPLEdBVEQ7QUFVZixTQUFPUCxpREFBUSxDQUFDQyxLQVZEO0FBV2YsU0FBT0QsaURBQVEsQ0FBQ0UsTUFYRDtBQVlmLFNBQU9GLGlEQUFRLENBQUNFLE1BWkQ7QUFhZixTQUFPRixpREFBUSxDQUFDRSxNQWJEO0FBY2YsU0FBT0YsaURBQVEsQ0FBQ0csT0FkRDtBQWVmLFNBQU9ILGlEQUFRLENBQUNJLElBZkQ7QUFnQmYsU0FBT0osaURBQVEsQ0FBQ0ssYUFoQkQ7QUFpQmYsU0FBT0wsaURBQVEsQ0FBQ00sU0FqQkQ7QUFrQmYsU0FBT04saURBQVEsQ0FBQ087QUFsQkQsQ0FBakI7QUFxQk8sTUFBTUMsT0FBTyxHQUFJQyxJQUFELElBQVU7QUFDL0IsTUFBSVYsUUFBUSxDQUFDVSxJQUFELENBQVosRUFBb0I7QUFDbEIsV0FBT1YsUUFBUSxDQUFDVSxJQUFELENBQWY7QUFDRDs7QUFDRCxTQUFPVCxpREFBUSxDQUFDQyxLQUFoQjtBQUNELENBTE0iLCJmaWxlIjoiLi9zcmMvdXRpbHMvaWNvbnNNYXAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3ZnSWNvbnMgZnJvbSBcIi4vc3ZnSWNvbnNcIjtcblxuY29uc3QgaWNvbnNNYXAgPSB7XG4gIFwiMDFkXCI6IHN2Z0ljb25zLnN1bm55LFxuICBcIjAyZFwiOiBzdmdJY29ucy5jbG91ZHksXG4gIFwiMDNkXCI6IHN2Z0ljb25zLmNsb3VkeSxcbiAgXCIwNGRcIjogc3ZnSWNvbnMuY2xvdWR5LFxuICBcIjA5ZFwiOiBzdmdJY29ucy5zaG93ZXJzLFxuICBcIjEwZFwiOiBzdmdJY29ucy5yYWluLFxuICBcIjExZFwiOiBzdmdJY29ucy50aHVuZGVyc3Rvcm1zLFxuICBcIjEzZFwiOiBzdmdJY29ucy53aW5keVNub3csXG4gIFwiNTBkXCI6IHN2Z0ljb25zLmZvZyxcbiAgXCIwMW5cIjogc3ZnSWNvbnMuc3VubnksXG4gIFwiMDJuXCI6IHN2Z0ljb25zLmNsb3VkeSxcbiAgXCIwM25cIjogc3ZnSWNvbnMuY2xvdWR5LFxuICBcIjA0blwiOiBzdmdJY29ucy5jbG91ZHksXG4gIFwiMDluXCI6IHN2Z0ljb25zLnNob3dlcnMsXG4gIFwiMTBuXCI6IHN2Z0ljb25zLnJhaW4sXG4gIFwiMTFuXCI6IHN2Z0ljb25zLnRodW5kZXJzdG9ybXMsXG4gIFwiMTNuXCI6IHN2Z0ljb25zLndpbmR5U25vdyxcbiAgXCI1MG5cIjogc3ZnSWNvbnMuZm9nLFxufTtcblxuZXhwb3J0IGNvbnN0IGdldEljb24gPSAobmFtZSkgPT4ge1xuICBpZiAoaWNvbnNNYXBbbmFtZV0pIHtcbiAgICByZXR1cm4gaWNvbnNNYXBbbmFtZV07XG4gIH1cbiAgcmV0dXJuIHN2Z0ljb25zLnN1bm55O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/iconsMap.js\n");

/***/ }),

/***/ "./src/utils/index.js":
/*!****************************!*\
  !*** ./src/utils/index.js ***!
  \****************************/
/*! exports provided: mapData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _mapData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mapData */ \"./src/utils/mapData.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"mapData\", function() { return _mapData__WEBPACK_IMPORTED_MODULE_0__[\"mapData\"]; });\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvaW5kZXguanM/ZWQwOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vc3JjL3V0aWxzL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwRGF0YSwgbWFwRm9yZWNhc3QsIG1hcEN1cnJlbnQsIGZvcm1hdERhdGUgfSBmcm9tIFwiLi9tYXBEYXRhXCI7XG5cbmV4cG9ydCB7IG1hcERhdGEgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/index.js\n");

/***/ }),

/***/ "./src/utils/mapData.js":
/*!******************************!*\
  !*** ./src/utils/mapData.js ***!
  \******************************/
/*! exports provided: mapData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapData\", function() { return mapData; });\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ \"dayjs\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _iconsMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iconsMap */ \"./src/utils/iconsMap.js\");\n\n\n\nconst formatDate = (dte, lang) => {\n  if (lang && lang !== \"en\") {\n    dayjs__WEBPACK_IMPORTED_MODULE_0___default.a.locale(lang.replace(\"_\", \"-\"));\n  }\n\n  if (dte && dayjs__WEBPACK_IMPORTED_MODULE_0___default()().isValid(dte)) {\n    return dayjs__WEBPACK_IMPORTED_MODULE_0___default.a.unix(dte).format(\"ddd D MMMM YYYY\");\n  }\n\n  return \"\";\n};\n\nconst mapCurrent = (day, geoData, lang) => {\n  return {\n    city: geoData.name,\n    state: geoData.state,\n    country: geoData.country,\n    date: formatDate(day.dt, lang),\n    description: day.weather[0] ? day.weather[0].description : null,\n    icon: day.weather[0] && Object(_iconsMap__WEBPACK_IMPORTED_MODULE_1__[\"getIcon\"])(day.weather[0].icon),\n    temperature: {\n      current: day.temp.toFixed(0),\n      min: undefined,\n      // openweather doesnt provide min/max on current weather\n      max: undefined\n    },\n    wind: day.wind_speed,\n    humidity: day.humidity,\n    pressure: day.pressure\n  };\n};\n\nconst mapForecast = (forecast, lang) => {\n  const mappedForecast = [];\n\n  for (let i = 0; i < 8; i += 1) {\n    mappedForecast.push({\n      date: formatDate(forecast[i].dt, lang),\n      description: forecast[i].weather[0] ? forecast[i].weather[0].description : null,\n      icon: forecast[i].weather[0] && Object(_iconsMap__WEBPACK_IMPORTED_MODULE_1__[\"getIcon\"])(forecast[i].weather[0].icon),\n      temperature: {\n        min: forecast[i].temp.min.toFixed(0),\n        max: forecast[i].temp.max.toFixed(0)\n      },\n      wind: forecast[i].wind_speed.toFixed(0),\n      humidity: forecast[i].humidity,\n      pressure: forecast[i].pressure\n    });\n  }\n\n  return mappedForecast;\n};\n\nconst mapData = (forecastData, todayData, geoData, lang) => {\n  const mapped = {};\n\n  if (forecastData && todayData) {\n    const daysData = forecastData;\n    mapped.current = mapCurrent(todayData, geoData, lang);\n    mapped.forecast = mapForecast(daysData);\n  }\n\n  return mapped;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbWFwRGF0YS5qcz8yMzRmIl0sIm5hbWVzIjpbImZvcm1hdERhdGUiLCJkdGUiLCJsYW5nIiwiZGF5anMiLCJsb2NhbGUiLCJyZXBsYWNlIiwiaXNWYWxpZCIsInVuaXgiLCJmb3JtYXQiLCJtYXBDdXJyZW50IiwiZGF5IiwiZ2VvRGF0YSIsImNpdHkiLCJuYW1lIiwic3RhdGUiLCJjb3VudHJ5IiwiZGF0ZSIsImR0IiwiZGVzY3JpcHRpb24iLCJ3ZWF0aGVyIiwiaWNvbiIsImdldEljb24iLCJ0ZW1wZXJhdHVyZSIsImN1cnJlbnQiLCJ0ZW1wIiwidG9GaXhlZCIsIm1pbiIsInVuZGVmaW5lZCIsIm1heCIsIndpbmQiLCJ3aW5kX3NwZWVkIiwiaHVtaWRpdHkiLCJwcmVzc3VyZSIsIm1hcEZvcmVjYXN0IiwiZm9yZWNhc3QiLCJtYXBwZWRGb3JlY2FzdCIsImkiLCJwdXNoIiwibWFwRGF0YSIsImZvcmVjYXN0RGF0YSIsInRvZGF5RGF0YSIsIm1hcHBlZCIsImRheXNEYXRhIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7QUFFQSxNQUFNQSxVQUFVLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLEtBQWU7QUFDaEMsTUFBSUEsSUFBSSxJQUFJQSxJQUFJLEtBQUssSUFBckIsRUFBMkI7QUFDekJDLGdEQUFLLENBQUNDLE1BQU4sQ0FBYUYsSUFBSSxDQUFDRyxPQUFMLENBQWEsR0FBYixFQUFrQixHQUFsQixDQUFiO0FBQ0Q7O0FBQ0QsTUFBSUosR0FBRyxJQUFJRSw0Q0FBSyxHQUFHRyxPQUFSLENBQWdCTCxHQUFoQixDQUFYLEVBQWlDO0FBQy9CLFdBQU9FLDRDQUFLLENBQUNJLElBQU4sQ0FBV04sR0FBWCxFQUFnQk8sTUFBaEIsQ0FBdUIsaUJBQXZCLENBQVA7QUFDRDs7QUFDRCxTQUFPLEVBQVA7QUFDRCxDQVJEOztBQVVBLE1BQU1DLFVBQVUsR0FBRyxDQUFDQyxHQUFELEVBQU1DLE9BQU4sRUFBZVQsSUFBZixLQUF3QjtBQUN6QyxTQUFPO0FBQ0xVLFFBQUksRUFBRUQsT0FBTyxDQUFDRSxJQURUO0FBRUxDLFNBQUssRUFBRUgsT0FBTyxDQUFDRyxLQUZWO0FBR0xDLFdBQU8sRUFBRUosT0FBTyxDQUFDSSxPQUhaO0FBSUxDLFFBQUksRUFBRWhCLFVBQVUsQ0FBQ1UsR0FBRyxDQUFDTyxFQUFMLEVBQVNmLElBQVQsQ0FKWDtBQUtMZ0IsZUFBVyxFQUFFUixHQUFHLENBQUNTLE9BQUosQ0FBWSxDQUFaLElBQWlCVCxHQUFHLENBQUNTLE9BQUosQ0FBWSxDQUFaLEVBQWVELFdBQWhDLEdBQThDLElBTHREO0FBTUxFLFFBQUksRUFBRVYsR0FBRyxDQUFDUyxPQUFKLENBQVksQ0FBWixLQUFrQkUseURBQU8sQ0FBQ1gsR0FBRyxDQUFDUyxPQUFKLENBQVksQ0FBWixFQUFlQyxJQUFoQixDQU4xQjtBQU9MRSxlQUFXLEVBQUU7QUFDWEMsYUFBTyxFQUFFYixHQUFHLENBQUNjLElBQUosQ0FBU0MsT0FBVCxDQUFpQixDQUFqQixDQURFO0FBRVhDLFNBQUcsRUFBRUMsU0FGTTtBQUVLO0FBQ2hCQyxTQUFHLEVBQUVEO0FBSE0sS0FQUjtBQVlMRSxRQUFJLEVBQUVuQixHQUFHLENBQUNvQixVQVpMO0FBYUxDLFlBQVEsRUFBRXJCLEdBQUcsQ0FBQ3FCLFFBYlQ7QUFjTEMsWUFBUSxFQUFFdEIsR0FBRyxDQUFDc0I7QUFkVCxHQUFQO0FBZ0JELENBakJEOztBQW1CQSxNQUFNQyxXQUFXLEdBQUcsQ0FBQ0MsUUFBRCxFQUFXaEMsSUFBWCxLQUFvQjtBQUN0QyxRQUFNaUMsY0FBYyxHQUFHLEVBQXZCOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxDQUFwQixFQUF1QkEsQ0FBQyxJQUFJLENBQTVCLEVBQStCO0FBQzdCRCxrQkFBYyxDQUFDRSxJQUFmLENBQW9CO0FBQ2xCckIsVUFBSSxFQUFFaEIsVUFBVSxDQUFDa0MsUUFBUSxDQUFDRSxDQUFELENBQVIsQ0FBWW5CLEVBQWIsRUFBaUJmLElBQWpCLENBREU7QUFFbEJnQixpQkFBVyxFQUFFZ0IsUUFBUSxDQUFDRSxDQUFELENBQVIsQ0FBWWpCLE9BQVosQ0FBb0IsQ0FBcEIsSUFDVGUsUUFBUSxDQUFDRSxDQUFELENBQVIsQ0FBWWpCLE9BQVosQ0FBb0IsQ0FBcEIsRUFBdUJELFdBRGQsR0FFVCxJQUpjO0FBS2xCRSxVQUFJLEVBQUVjLFFBQVEsQ0FBQ0UsQ0FBRCxDQUFSLENBQVlqQixPQUFaLENBQW9CLENBQXBCLEtBQTBCRSx5REFBTyxDQUFDYSxRQUFRLENBQUNFLENBQUQsQ0FBUixDQUFZakIsT0FBWixDQUFvQixDQUFwQixFQUF1QkMsSUFBeEIsQ0FMckI7QUFNbEJFLGlCQUFXLEVBQUU7QUFDWEksV0FBRyxFQUFFUSxRQUFRLENBQUNFLENBQUQsQ0FBUixDQUFZWixJQUFaLENBQWlCRSxHQUFqQixDQUFxQkQsT0FBckIsQ0FBNkIsQ0FBN0IsQ0FETTtBQUVYRyxXQUFHLEVBQUVNLFFBQVEsQ0FBQ0UsQ0FBRCxDQUFSLENBQVlaLElBQVosQ0FBaUJJLEdBQWpCLENBQXFCSCxPQUFyQixDQUE2QixDQUE3QjtBQUZNLE9BTks7QUFVbEJJLFVBQUksRUFBRUssUUFBUSxDQUFDRSxDQUFELENBQVIsQ0FBWU4sVUFBWixDQUF1QkwsT0FBdkIsQ0FBK0IsQ0FBL0IsQ0FWWTtBQVdsQk0sY0FBUSxFQUFFRyxRQUFRLENBQUNFLENBQUQsQ0FBUixDQUFZTCxRQVhKO0FBWWxCQyxjQUFRLEVBQUVFLFFBQVEsQ0FBQ0UsQ0FBRCxDQUFSLENBQVlKO0FBWkosS0FBcEI7QUFjRDs7QUFDRCxTQUFPRyxjQUFQO0FBQ0QsQ0FuQkQ7O0FBcUJBLE1BQU1HLE9BQU8sR0FBRyxDQUFDQyxZQUFELEVBQWVDLFNBQWYsRUFBMEI3QixPQUExQixFQUFtQ1QsSUFBbkMsS0FBNEM7QUFDMUQsUUFBTXVDLE1BQU0sR0FBRyxFQUFmOztBQUNBLE1BQUlGLFlBQVksSUFBSUMsU0FBcEIsRUFBK0I7QUFDN0IsVUFBTUUsUUFBUSxHQUFHSCxZQUFqQjtBQUNBRSxVQUFNLENBQUNsQixPQUFQLEdBQWlCZCxVQUFVLENBQUMrQixTQUFELEVBQVk3QixPQUFaLEVBQXFCVCxJQUFyQixDQUEzQjtBQUNBdUMsVUFBTSxDQUFDUCxRQUFQLEdBQWtCRCxXQUFXLENBQUNTLFFBQUQsQ0FBN0I7QUFDRDs7QUFDRCxTQUFPRCxNQUFQO0FBQ0QsQ0FSRCIsImZpbGUiOiIuL3NyYy91dGlscy9tYXBEYXRhLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRheWpzIGZyb20gXCJkYXlqc1wiO1xuaW1wb3J0IHsgZ2V0SWNvbiB9IGZyb20gXCIuL2ljb25zTWFwXCI7XG5cbmNvbnN0IGZvcm1hdERhdGUgPSAoZHRlLCBsYW5nKSA9PiB7XG4gIGlmIChsYW5nICYmIGxhbmcgIT09IFwiZW5cIikge1xuICAgIGRheWpzLmxvY2FsZShsYW5nLnJlcGxhY2UoXCJfXCIsIFwiLVwiKSk7XG4gIH1cbiAgaWYgKGR0ZSAmJiBkYXlqcygpLmlzVmFsaWQoZHRlKSkge1xuICAgIHJldHVybiBkYXlqcy51bml4KGR0ZSkuZm9ybWF0KFwiZGRkIEQgTU1NTSBZWVlZXCIpO1xuICB9XG4gIHJldHVybiBcIlwiO1xufTtcblxuY29uc3QgbWFwQ3VycmVudCA9IChkYXksIGdlb0RhdGEsIGxhbmcpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBjaXR5OiBnZW9EYXRhLm5hbWUsXG4gICAgc3RhdGU6IGdlb0RhdGEuc3RhdGUsXG4gICAgY291bnRyeTogZ2VvRGF0YS5jb3VudHJ5LFxuICAgIGRhdGU6IGZvcm1hdERhdGUoZGF5LmR0LCBsYW5nKSxcbiAgICBkZXNjcmlwdGlvbjogZGF5LndlYXRoZXJbMF0gPyBkYXkud2VhdGhlclswXS5kZXNjcmlwdGlvbiA6IG51bGwsXG4gICAgaWNvbjogZGF5LndlYXRoZXJbMF0gJiYgZ2V0SWNvbihkYXkud2VhdGhlclswXS5pY29uKSxcbiAgICB0ZW1wZXJhdHVyZToge1xuICAgICAgY3VycmVudDogZGF5LnRlbXAudG9GaXhlZCgwKSxcbiAgICAgIG1pbjogdW5kZWZpbmVkLCAvLyBvcGVud2VhdGhlciBkb2VzbnQgcHJvdmlkZSBtaW4vbWF4IG9uIGN1cnJlbnQgd2VhdGhlclxuICAgICAgbWF4OiB1bmRlZmluZWQsXG4gICAgfSxcbiAgICB3aW5kOiBkYXkud2luZF9zcGVlZCxcbiAgICBodW1pZGl0eTogZGF5Lmh1bWlkaXR5LFxuICAgIHByZXNzdXJlOiBkYXkucHJlc3N1cmUsXG4gIH07XG59O1xuXG5jb25zdCBtYXBGb3JlY2FzdCA9IChmb3JlY2FzdCwgbGFuZykgPT4ge1xuICBjb25zdCBtYXBwZWRGb3JlY2FzdCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkgKz0gMSkge1xuICAgIG1hcHBlZEZvcmVjYXN0LnB1c2goe1xuICAgICAgZGF0ZTogZm9ybWF0RGF0ZShmb3JlY2FzdFtpXS5kdCwgbGFuZyksXG4gICAgICBkZXNjcmlwdGlvbjogZm9yZWNhc3RbaV0ud2VhdGhlclswXVxuICAgICAgICA/IGZvcmVjYXN0W2ldLndlYXRoZXJbMF0uZGVzY3JpcHRpb25cbiAgICAgICAgOiBudWxsLFxuICAgICAgaWNvbjogZm9yZWNhc3RbaV0ud2VhdGhlclswXSAmJiBnZXRJY29uKGZvcmVjYXN0W2ldLndlYXRoZXJbMF0uaWNvbiksXG4gICAgICB0ZW1wZXJhdHVyZToge1xuICAgICAgICBtaW46IGZvcmVjYXN0W2ldLnRlbXAubWluLnRvRml4ZWQoMCksXG4gICAgICAgIG1heDogZm9yZWNhc3RbaV0udGVtcC5tYXgudG9GaXhlZCgwKSxcbiAgICAgIH0sXG4gICAgICB3aW5kOiBmb3JlY2FzdFtpXS53aW5kX3NwZWVkLnRvRml4ZWQoMCksXG4gICAgICBodW1pZGl0eTogZm9yZWNhc3RbaV0uaHVtaWRpdHksXG4gICAgICBwcmVzc3VyZTogZm9yZWNhc3RbaV0ucHJlc3N1cmUsXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG1hcHBlZEZvcmVjYXN0O1xufTtcblxuY29uc3QgbWFwRGF0YSA9IChmb3JlY2FzdERhdGEsIHRvZGF5RGF0YSwgZ2VvRGF0YSwgbGFuZykgPT4ge1xuICBjb25zdCBtYXBwZWQgPSB7fTtcbiAgaWYgKGZvcmVjYXN0RGF0YSAmJiB0b2RheURhdGEpIHtcbiAgICBjb25zdCBkYXlzRGF0YSA9IGZvcmVjYXN0RGF0YTtcbiAgICBtYXBwZWQuY3VycmVudCA9IG1hcEN1cnJlbnQodG9kYXlEYXRhLCBnZW9EYXRhLCBsYW5nKTtcbiAgICBtYXBwZWQuZm9yZWNhc3QgPSBtYXBGb3JlY2FzdChkYXlzRGF0YSk7XG4gIH1cbiAgcmV0dXJuIG1hcHBlZDtcbn07XG5cbmV4cG9ydCB7IG1hcERhdGEgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/mapData.js\n");

/***/ }),

/***/ "./src/utils/svgIcons.js":
/*!*******************************!*\
  !*** ./src/utils/svgIcons.js ***!
  \*******************************/
/*! exports provided: svgIcons, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"svgIcons\", function() { return svgIcons; });\nconst svgIcons = {\n  cloudy: \"M0 20.328q0-2.484 1.547-4.414t3.969-2.477q0.641-2.938 2.969-4.805t5.359-1.867q2.953 0 5.273 1.82t3.008 4.664h0.453q2.938 0 5.016 2.070t2.078 5.008-2.078 5.023-5.016 2.086h-15.469q-1.438 0-2.758-0.563t-2.273-1.516-1.516-2.273-0.563-2.758zM2.422 20.328q0 1.906 1.375 3.273t3.313 1.367h15.469q1.938 0 3.313-1.367t1.375-3.273-1.375-3.266-3.313-1.359h-2.313q-0.25 0-0.25-0.25l-0.109-0.813q-0.25-2.359-1.977-3.914t-4.086-1.555-4.102 1.563-1.961 3.906l-0.109 0.703q0 0.25-0.266 0.25l-0.75 0.109q-1.797 0.156-3.016 1.484t-1.219 3.141zM17.172 5.797q-0.25 0.234 0.125 0.344 1.078 0.469 1.797 0.922 0.281 0.078 0.375-0.047 1.516-1.438 3.531-1.438t3.492 1.352 1.648 3.336l0.156 1.063h2.359q1.625 0 2.797 1.164t1.172 2.773q0 1.5-1.031 2.609t-2.547 1.281q-0.25 0-0.25 0.266v1.891q0 0.266 0.25 0.266 2.516-0.156 4.25-1.984t1.734-4.328q0-2.641-1.867-4.508t-4.508-1.867h-0.25q-0.656-2.5-2.742-4.117t-4.664-1.617q-3.531 0-5.828 2.641z\",\n  fog: \"M0 26.078q0-0.609 0.422-1.016t1.047-0.406h31.109q0.625 0 1.023 0.398t0.398 1.023q0 0.578-0.414 0.969t-1.008 0.391h-31.109q-0.625 0-1.047-0.391t-0.422-0.969zM4.359 20.844q0-0.609 0.438-1 0.375-0.375 0.984-0.375h31.125q0.578 0 0.969 0.398t0.391 0.977q0 0.594-0.391 1.008t-0.969 0.414h-31.125q-0.594 0-1.008-0.422t-0.414-1zM4.578 16.875q0 0.219 0.25 0.219h2.391q0.156 0 0.328-0.266 0.594-1.297 1.773-2.125t2.586-0.938l0.922-0.125q0.281 0 0.281-0.297l0.109-0.828q0.266-2.703 2.289-4.508t4.742-1.805q2.703 0 4.711 1.781t2.289 4.469l0.125 0.953q0 0.281 0.328 0.281h2.656q1.609 0 2.93 0.859t1.961 2.281q0.172 0.266 0.344 0.266h2.391q0.297 0 0.234-0.375-0.734-2.563-2.906-4.188t-4.953-1.625h-0.531q-0.828-3.328-3.492-5.445t-6.086-2.117q-3.5 0-6.219 2.195t-3.484 5.602q-2.125 0.5-3.727 2.016t-2.227 3.625v-0.063q-0.016 0.047-0.016 0.156zM7.266 31.188q0-0.594 0.438-0.984 0.375-0.375 1-0.375h31.141q0.594 0 1.008 0.391t0.414 0.969q0 0.594-0.422 1.016t-1 0.422h-31.141q-0.578 0-1.008-0.43t-0.43-1.008z\",\n  hail: \"M0 19.219q0 2.797 1.633 4.977t4.258 2.977q0.219 0.047 0.406-0.125l1.938-2.391q-2.219 0-3.797-1.594t-1.578-3.844q0-2.109 1.406-3.664t3.5-1.727l0.875-0.109q0.266 0 0.266-0.219l0.125-0.922q0.313-2.75 2.32-4.555t4.742-1.805q2.75 0 4.789 1.82t2.289 4.539l0.125 0.969q0.063 0.281 0.359 0.281h2.703q2.25 0 3.828 1.578t1.578 3.813q0 2.078-1.406 3.633t-3.453 1.805q-0.297 0-0.813 0.094-0.484 0.047-0.688 0.375l-3.938 4.656q-0.359 0.453-0.273 1.047t0.523 0.953q0.266 0.313 0.938 0.313 0.656 0 1.016-0.578l3.531-4.063q3.109-0.313 5.25-2.688t2.141-5.547q0-1.688-0.648-3.219t-1.75-2.633-2.625-1.758-3.211-0.656h-0.531q-0.828-3.313-3.539-5.43t-6.195-2.117q-2.328 0-4.383 0.992t-3.461 2.766-1.891 4.039q-2.813 0.625-4.586 2.867t-1.773 5.148zM5.641 32.578q0 0.156 0.094 0.5 0.219 0.531 0.734 0.734 0.547 0.25 1.109 0.031t0.766-0.75q0.25-0.547 0.031-1.078t-0.766-0.719q-0.563-0.266-1.078-0.047t-0.766 0.781q-0.125 0.266-0.125 0.547zM8.719 28.516v0.172q0.047 0.563 0.5 0.938 0.563 0.313 1.031 0.313 0.563 0 1.016-0.547l3.875-4.609q0.359-0.438 0.328-1.094-0.063-0.531-0.461-0.891t-0.867-0.359q-0.141 0-0.234 0.016-0.578 0.109-0.938 0.547l-3.938 4.625q-0.313 0.359-0.313 0.891zM10 36.375q0 0.297 0.125 0.531 0.203 0.531 0.734 0.781 0.266 0.125 0.547 0.125 0.313 0 0.516-0.125 0.578-0.234 0.781-0.688 0.25-0.547 0.039-1.109t-0.742-0.766q-0.547-0.25-1.117-0.031t-0.758 0.75q-0.125 0.234-0.125 0.531zM12.781 32.469v0.188q0.063 0.547 0.516 0.914t0.922 0.367q0.563 0 1.047-0.547l7.25-8.734q0.281-0.313 0.281-0.859v-0.203q-0.063-0.563-0.453-0.891t-0.875-0.328h-0.219q-0.578 0.031-0.922 0.516l-7.25 8.672q-0.297 0.438-0.297 0.906zM18.641 34.391q0 0.219 0.094 0.5 0.219 0.547 0.766 0.781 0.344 0.094 0.516 0.094 0.359 0 0.563-0.125 0.563-0.219 0.766-0.703 0.25-0.422 0.031-1.109-0.203-0.516-0.734-0.734l-0.594-0.156q-0.219 0.047-0.531 0.125-0.547 0.203-0.75 0.734-0.125 0.297-0.125 0.594z\",\n  rain: \"M0 19.188q0-2.875 1.797-5.117t4.547-2.883q0.781-3.406 3.516-5.594t6.25-2.188q3.438 0 6.133 2.133t3.508 5.477h0.531q2.234 0 4.141 1.086t3.016 2.969 1.109 4.117q0 2.188-1.055 4.070t-2.883 3.008-4 1.188q-0.328 0-0.328-0.281v-2.219q0-0.297 0.328-0.297 2.125-0.109 3.633-1.703t1.508-3.766-1.625-3.773-3.844-1.602h-2.688q-0.297 0-0.297-0.281l-0.125-0.969q-0.281-2.703-2.32-4.523t-4.742-1.82q-2.734 0-4.758 1.82t-2.273 4.523l-0.125 0.891q0 0.313-0.328 0.313l-0.875 0.047q-2.078 0.25-3.492 1.781t-1.414 3.594q0 2.172 1.5 3.766t3.641 1.703q0.281 0 0.281 0.297v2.219q0 0.281-0.281 0.281-3.344-0.156-5.664-2.547t-2.32-5.719zM8.922 30.328q0-0.109 0.063-0.328l2.719-9.609q0.156-0.484 0.539-0.734t0.773-0.25q0.172 0 0.406 0.047 0.594 0.109 0.898 0.609t0.133 1.109l-2.719 9.547q-0.313 1.063-1.375 1.063-0.094 0-0.188-0.031-0.141-0.047-0.172-0.047-0.547-0.156-0.813-0.555t-0.266-0.82zM13.297 35.016l4.063-14.625q0.109-0.484 0.5-0.734t0.813-0.25q0.219 0 0.453 0.047 0.547 0.156 0.813 0.648t0.109 1.070l-4.047 14.641q-0.094 0.422-0.484 0.719t-0.844 0.297q-0.234 0-0.422-0.078-0.5-0.125-0.859-0.656-0.281-0.438-0.094-1.078zM20.172 30.375q0-0.094 0.063-0.375l2.719-9.609q0.141-0.484 0.508-0.734t0.773-0.25q0.203 0 0.438 0.047 0.516 0.141 0.773 0.516t0.258 0.781q0 0.078-0.031 0.227t-0.031 0.195l-2.719 9.547q-0.094 0.484-0.469 0.773t-0.844 0.289l-0.406-0.078q-0.5-0.141-0.766-0.539t-0.266-0.789z\",\n  showers: \"M0 19.188q0-2.875 1.797-5.117t4.547-2.883q0.766-3.406 3.5-5.586t6.266-2.18q3.438 0 6.125 2.125t3.516 5.469h0.516q2.234 0 4.141 1.086t3.016 2.969 1.109 4.117q0 3.344-2.305 5.75t-5.633 2.516q-0.328 0-0.328-0.281v-2.219q0-0.297 0.328-0.297 2.141-0.109 3.641-1.703t1.5-3.766-1.625-3.773-3.844-1.602h-2.672q-0.313 0-0.313-0.281l-0.109-0.969q-0.266-2.688-2.305-4.516t-4.758-1.828q-2.734 0-4.766 1.82t-2.297 4.523l-0.094 0.906q0 0.297-0.328 0.297l-0.875 0.047q-2.047 0.094-3.477 1.672t-1.43 3.703q0 2.172 1.5 3.766t3.641 1.703q0.281 0 0.281 0.297v2.219q0 0.281-0.281 0.281-3.344-0.156-5.664-2.547t-2.32-5.719zM9.875 20.656q0-0.609 0.609-1.648t1.141-1.68q0.531-0.594 0.641-0.703l0.594 0.672q0.641 0.688 1.195 1.695t0.555 1.664q0 0.984-0.672 1.641t-1.672 0.656q-0.984 0-1.688-0.672t-0.703-1.625zM14.844 27.297q0-0.688 0.398-1.594t0.977-1.703q0.453-0.641 1.109-1.398t1-1.086q0.172-0.156 0.406-0.391l0.406 0.391q0.938 0.828 2.125 2.438 0.594 0.828 0.984 1.734t0.391 1.609q0 1.609-1.133 2.742t-2.773 1.133q-1.609 0-2.75-1.125t-1.141-2.75zM17.297 16.203q0-1.047 1.625-2.672l0.406 0.422q0.438 0.531 0.797 1.18t0.359 1.070q0 0.641-0.461 1.102t-1.102 0.461q-0.672 0-1.148-0.461t-0.477-1.102z\",\n  sleet: \"M0 19.266q0 3.297 2.328 5.688t5.641 2.5q0.297 0 0.297-0.281v-2.219q0-0.297-0.297-0.297-2.109-0.109-3.625-1.695t-1.516-3.695q0-2.094 1.414-3.648t3.492-1.727l0.875-0.125q0.313 0 0.313-0.297l0.125-0.828q0.25-2.734 2.273-4.578t4.773-1.844q2.703 0 4.734 1.828t2.328 4.516l0.109 0.969q0 0.297 0.313 0.297h2.672q2.25 0 3.859 1.609t1.609 3.828q0 2.109-1.508 3.695t-3.633 1.695q-0.328 0-0.328 0.297v2.219q0 0.281 0.328 0.281 3.328-0.109 5.633-2.492t2.305-5.695q0-2.234-1.109-4.133t-3.016-3-4.141-1.102h-0.516q-0.828-3.344-3.516-5.477t-6.125-2.133q-3.516 0-6.25 2.188t-3.5 5.578q-2.813 0.719-4.578 2.945t-1.766 5.133zM9.016 30.969q0 0.422 0.273 0.844t0.789 0.578q0.578 0.172 1.063-0.063t0.656-0.938l0.234-1.016q0.125-0.563-0.156-1.055t-0.859-0.664q-0.563-0.172-1.070 0.125t-0.664 0.891l-0.234 0.984q-0.031 0.094-0.031 0.313zM10.281 26.141q0 0.531 0.422 0.953 0.391 0.422 0.938 0.422 0.594 0 1-0.398t0.406-0.977-0.406-0.977-1-0.398q-0.578 0-0.969 0.391t-0.391 0.984zM11.297 22.344q-0.031 0.391 0.227 0.758t0.805 0.539q0.516 0.156 1.031-0.117t0.688-0.852l0.469-1.5q0.188-0.609-0.109-1.086t-0.906-0.648q-0.547-0.172-1.055 0.109t-0.68 0.828l-0.406 1.531q0 0.047-0.031 0.195t-0.031 0.242zM13.234 36.172q0 0.438 0.258 0.828t0.805 0.547q0.203 0.047 0.422 0.047 1.063 0 1.313-1.016l0.234-0.984q0.156-0.641-0.141-1.141t-0.875-0.609q-0.531-0.172-1.047 0.117t-0.688 0.852l-0.234 0.984q-0.047 0.219-0.047 0.375zM14.531 31.328q0 0.547 0.422 0.969 0.406 0.406 0.953 0.406 0.594 0 0.984-0.391t0.391-0.984q0-0.578-0.391-0.969t-0.984-0.391-0.984 0.391-0.391 0.969zM15.578 27.547q-0.031 0.375 0.219 0.781t0.75 0.5q0.578 0.156 1.063-0.094t0.688-0.938l0.453-1.5q0.172-0.547-0.117-1.047t-0.883-0.672q-0.547-0.172-1.063 0.133t-0.688 0.883l-0.375 1.5q-0.047 0.203-0.047 0.453zM20.172 31.125q0 0.406 0.258 0.797t0.773 0.547q0.078 0 0.227 0.031t0.227 0.031q1.016 0 1.266-1.094l0.234-1q0.172-0.531-0.109-1.047t-0.844-0.688q-0.625-0.156-1.133 0.133t-0.68 0.883l-0.156 0.984q0 0.063-0.031 0.203t-0.031 0.219zM21.406 26.203q0 0.563 0.422 0.953 0.375 0.406 0.953 0.406 0.594 0 0.984-0.391t0.391-0.969q0-0.594-0.391-0.984t-0.984-0.391-0.984 0.391-0.391 0.984zM22.422 22.344q0 0.422 0.273 0.805t0.82 0.539q0.047 0 0.203 0.031t0.234 0.031q0.25 0 0.594-0.156 0.531-0.281 0.688-0.875l0.406-1.5q0.156-0.563-0.125-1.055t-0.844-0.664q-0.578-0.172-1.063 0.094t-0.656 0.844l-0.469 1.516q0 0.063-0.031 0.195t-0.031 0.195z\",\n  windySnow: \"M0 19.25q0-2.891 1.773-5.133t4.57-2.93q0.781-3.406 3.508-5.594t6.258-2.188q3.438 0 6.133 2.133t3.508 5.477h0.531q2.234 0 4.141 1.102t3.016 3 1.109 4.133q0 3.313-2.313 5.703t-5.625 2.5q-0.328 0-0.328-0.281v-2.219q0-0.297 0.328-0.297 2.125-0.109 3.633-1.695t1.508-3.711q0-2.219-1.609-3.828t-3.859-1.609h-2.688q-0.297 0-0.297-0.281l-0.125-0.969q-0.281-2.703-2.32-4.531t-4.742-1.828q-2.75 0-4.773 1.844t-2.289 4.578l-0.094 0.828q0 0.313-0.328 0.313l-0.875 0.109q-2.078 0.172-3.492 1.727t-1.414 3.648q0 2.125 1.508 3.711t3.633 1.695q0.281 0 0.281 0.297v2.219q0 0.281-0.281 0.281-3.344-0.109-5.664-2.5t-2.32-5.703zM9.172 32.078q0-0.578 0.422-1 0.406-0.375 0.953-0.375 0.578 0 0.977 0.391t0.398 0.984-0.398 0.984-0.977 0.391-0.977-0.391-0.398-0.984zM10.609 26.031q0-0.563 0.398-0.969t0.977-0.406 0.977 0.406 0.398 0.969q0 0.594-0.398 1.008t-0.977 0.414-0.977-0.414-0.398-1.008zM13.781 35.344q0-0.563 0.422-1.016 0.406-0.406 0.953-0.406 0.594 0 1.016 0.422t0.422 1-0.422 0.977-1.016 0.398q-0.563 0-0.969-0.398t-0.406-0.977zM15.219 29.25q0-0.594 0.406-1.031 0.406-0.406 0.969-0.406 0.578 0 1 0.422t0.422 1.016q0 0.578-0.414 0.992t-1.008 0.414q-0.563 0-0.969-0.414t-0.406-0.992zM15.922 23.219q0-0.578 0.422-1 0.438-0.406 0.953-0.406 0.594 0 1.016 0.414t0.422 0.992-0.422 0.977-1.016 0.398q-0.563 0-0.969-0.398t-0.406-0.977zM19.875 32.078q0-0.563 0.406-1 0.406-0.375 1-0.375t0.984 0.391 0.391 0.984-0.391 0.984-0.984 0.391-1-0.398-0.406-0.977zM21.297 26.031q0-0.547 0.422-0.961t1-0.414 0.977 0.406 0.398 0.969q0 0.594-0.398 1.008t-0.977 0.414q-0.594 0-1.008-0.422t-0.414-1z\",\n  snow: \"M0 19.25q0-2.891 1.773-5.133t4.57-2.93q0.781-3.406 3.508-5.594t6.258-2.188q3.438 0 6.133 2.133t3.508 5.477h0.531q2.234 0 4.141 1.102t3.016 3 1.109 4.133q0 3.313-2.313 5.703t-5.625 2.5q-0.328 0-0.328-0.281v-2.219q0-0.297 0.328-0.297 2.125-0.109 3.633-1.695t1.508-3.711q0-2.219-1.609-3.828t-3.859-1.609h-2.688q-0.297 0-0.297-0.281l-0.125-0.969q-0.281-2.703-2.32-4.531t-4.742-1.828q-2.75 0-4.773 1.844t-2.289 4.578l-0.094 0.828q0 0.313-0.328 0.313l-0.875 0.109q-2.078 0.172-3.492 1.727t-1.414 3.648q0 2.125 1.508 3.711t3.633 1.695q0.281 0 0.281 0.297v2.219q0 0.281-0.281 0.281-3.344-0.109-5.664-2.5t-2.32-5.703zM10.609 26.031q0-0.563 0.398-0.969t0.977-0.406 0.977 0.406 0.398 0.969q0 0.594-0.398 1.008t-0.977 0.414-0.977-0.414-0.398-1.008zM10.609 32.078q0-0.594 0.406-1 0.391-0.375 0.969-0.375t0.977 0.391 0.398 0.984-0.398 0.984-0.977 0.391-0.977-0.391-0.398-0.984zM15.922 29.25q0-0.578 0.422-1.031 0.406-0.406 0.953-0.406 0.578 0 1.008 0.43t0.43 1.008-0.422 0.992-1.016 0.414q-0.563 0-0.969-0.414t-0.406-0.992zM15.922 23.219q0-0.578 0.422-1 0.438-0.406 0.953-0.406 0.594 0 1.016 0.414t0.422 0.992-0.422 0.977-1.016 0.398q-0.563 0-0.969-0.398t-0.406-0.977zM15.922 35.344q0-0.563 0.422-1.016 0.406-0.406 0.953-0.406 0.594 0 1.016 0.422t0.422 1-0.422 0.977-1.016 0.398q-0.563 0-0.969-0.398t-0.406-0.977zM21.297 26.031q0-0.547 0.422-0.961t1-0.414 0.977 0.406 0.398 0.969q0 0.594-0.398 1.008t-0.977 0.414q-0.594 0-1.008-0.422t-0.414-1zM21.297 32.078q0-0.547 0.422-1 0.406-0.375 1-0.375t0.984 0.391 0.391 0.984-0.391 0.984-0.984 0.391-1.008-0.398-0.414-0.977z\",\n  stormyShowers: \"M0 19.188q0 2.766 1.648 4.953t4.273 2.984l-1.078 2.797q-0.078 0.359 0.234 0.359h3.547l-1.734 6.297h0.469l6.609-8.703q0.094-0.109 0.031-0.227t-0.234-0.117h-3.625l4.125-7.734q0.156-0.344-0.234-0.344h-4.906q-0.234 0-0.375 0.234l-1.797 4.781q-1.781-0.453-2.945-1.938t-1.164-3.344q0-2.078 1.406-3.602t3.5-1.773l0.875-0.125q0.328 0 0.328-0.281l0.125-0.859q0.25-2.703 2.273-4.531t4.758-1.828q2.719 0 4.758 1.828t2.336 4.531l0.094 0.969q0 0.297 0.313 0.297h2.688q2.266 0 3.867 1.578t1.602 3.797q0 2.125-1.484 3.68t-3.656 1.711q-0.328 0-0.328 0.313v2.281q0 0.281 0.328 0.281 1.625-0.047 3.102-0.734t2.539-1.789 1.688-2.609 0.625-3.133q0-2.25-1.117-4.148t-3.023-3-4.141-1.102h-0.531q-0.828-3.328-3.516-5.438t-6.141-2.109q-3.531 0-6.266 2.188t-3.5 5.594q-2.75 0.641-4.547 2.883t-1.797 5.133zM13.594 35.625q0 0.391 0.258 0.773t0.773 0.539q0.344 0.078 0.422 0.078 0.219 0 0.625-0.172 0.531-0.234 0.703-0.875l0.469-1.75q0.156-0.547-0.133-1.047t-0.883-0.672q-0.547-0.156-1.055 0.133t-0.68 0.883l-0.453 1.672q-0.047 0.422-0.047 0.438zM15.828 27.672q0 0.359 0.258 0.727t0.758 0.555q0.563 0.188 1.063-0.078t0.672-0.875l0.5-1.734q0.156-0.547-0.141-1.055t-0.891-0.68q-0.563-0.156-1.078 0.133t-0.688 0.867l-0.406 1.688q-0.047 0.422-0.047 0.453zM20.531 30.422q0 0.422 0.273 0.844t0.789 0.578q0.063 0 0.195 0.031t0.195 0.031q0.328 0 0.625-0.125 0.469-0.172 0.688-0.953l0.422-1.688q0.172-0.578-0.102-1.102t-0.836-0.695q-0.625-0.156-1.133 0.141t-0.617 0.891l-0.453 1.719q-0.047 0.141-0.047 0.328zM22.797 22.438q-0.016 0.391 0.25 0.781t0.813 0.625q0.188 0.094 0.438 0.094 0.266 0 0.563-0.141 0.516-0.25 0.734-0.953l0.484-1.719q0.047-0.328 0.047-0.359 0-0.422-0.273-0.82t-0.82-0.555q-0.063 0-0.188-0.031t-0.188-0.031q-0.422 0-0.813 0.258t-0.547 0.805l-0.453 1.688q-0.047 0.188-0.047 0.359z\",\n  sunny: \"M0 15.375q0-0.609 0.422-1.031 0.438-0.406 1-0.406h3.406q0.578 0 0.961 0.422t0.383 1.016-0.383 1.008-0.961 0.414h-3.406q-0.578 0-1-0.422t-0.422-1zM4.766 26.922q0-0.578 0.391-1.016l2.453-2.375q0.375-0.391 0.984-0.391 0.594 0 0.992 0.375t0.398 0.953q0 0.609-0.406 1.063l-2.375 2.375q-1.016 0.797-2.047 0-0.391-0.422-0.391-0.984zM4.766 3.844q0-0.578 0.391-1.016 0.484-0.406 1.063-0.406 0.547 0 0.984 0.406l2.375 2.453q0.406 0.375 0.406 0.984 0 0.594-0.398 0.992t-0.992 0.398q-0.609 0-0.984-0.406l-2.453-2.375q-0.391-0.422-0.391-1.031zM9.016 15.375q0-2.328 1.172-4.336t3.18-3.18 4.336-1.172q1.75 0 3.359 0.695t2.773 1.859 1.852 2.773 0.688 3.359q0 2.344-1.164 4.344t-3.164 3.164-4.344 1.164-4.344-1.164-3.172-3.164-1.172-4.344zM11.844 15.375q0 2.438 1.711 4.164t4.148 1.727 4.164-1.727 1.727-4.164q0-2.406-1.727-4.109t-4.164-1.703q-2.422 0-4.141 1.703t-1.719 4.109zM16.281 28.328q0-0.594 0.414-1t1.008-0.406q0.609 0 1.016 0.406t0.406 1v3.313q0 0.609-0.414 1.031t-1.008 0.422-1.008-0.422-0.414-1.031v-3.313zM16.281 2.5v-3.406q0-0.578 0.422-1t1-0.422 1 0.422 0.422 1v3.406q0 0.578-0.414 0.961t-1.008 0.383-1.008-0.383-0.414-0.961zM25.484 24.469q0-0.578 0.375-0.938 0.375-0.391 0.938-0.391 0.609 0 1 0.391l2.438 2.375q0.406 0.438 0.406 1.016t-0.406 0.984q-1 0.781-2 0l-2.375-2.375q-0.375-0.422-0.375-1.063zM25.484 6.266q0-0.625 0.375-0.984l2.375-2.453q0.438-0.406 0.984-0.406 0.594 0 1.008 0.422t0.414 1q0 0.625-0.406 1.031l-2.438 2.375q-0.453 0.406-1 0.406-0.563 0-0.938-0.398t-0.375-0.992zM29.25 15.375q0-0.594 0.406-1.031 0.406-0.406 0.953-0.406h3.375q0.578 0 1.008 0.43t0.43 1.008-0.43 1-1.008 0.422h-3.375q-0.578 0-0.969-0.414t-0.391-1.008z\",\n  thunderstorms: \"M0 19.188q0 2.766 1.656 4.953t4.297 2.984l-1.094 2.797q-0.078 0.359 0.234 0.359h3.547l-1.641 7.172h0.469l6.531-9.578q0.094-0.109 0.023-0.227t-0.242-0.117h-3.625l4.125-7.734q0.172-0.359-0.234-0.359h-4.906q-0.234 0-0.391 0.25l-1.781 4.781q-1.781-0.453-2.953-1.938t-1.172-3.344q0-2.078 1.414-3.609t3.508-1.781l0.875-0.109q0.328 0 0.328-0.297l0.109-0.844q0.266-2.703 2.289-4.531t4.758-1.828q2.719 0 4.758 1.828t2.336 4.531l0.109 0.969q0 0.281 0.297 0.281h2.672q2.266 0 3.875 1.586t1.609 3.805q0 2.125-1.484 3.68t-3.672 1.727q-0.328 0-0.328 0.297v2.281q0 0.281 0.328 0.281 3.328-0.109 5.648-2.516t2.32-5.75q0-2.25-1.109-4.148t-3.023-3-4.164-1.102h-0.516q-0.828-3.328-3.523-5.438t-6.133-2.109q-3.531 0-6.266 2.188t-3.5 5.594q-2.766 0.641-4.563 2.883t-1.797 5.133zM13.578 35.375q0 0.984 0.969 1.281 0.031 0 0.188 0.023t0.234 0.023q0.422 0 0.82-0.242t0.539-0.805l3.75-14.484q0.156-0.594-0.109-1.078t-0.828-0.656q-0.422-0.047-0.438-0.047-0.406 0-0.789 0.25t-0.523 0.75l-3.766 14.531q-0.047 0.219-0.047 0.453zM20.5 30.266q0 0.328 0.172 0.625 0.344 0.547 0.844 0.734 0.266 0.078 0.5 0.078t0.531-0.125q0.516-0.219 0.703-0.953l2.406-9.453q0.078-0.359 0.078-0.453 0-0.375-0.266-0.75t-0.766-0.531q-0.422-0.047-0.438-0.047-0.422 0-0.781 0.242t-0.5 0.758l-2.438 9.5q0 0.047-0.023 0.18t-0.023 0.195z\",\n  sprinkle: \"M0 19.188q0-2.875 1.797-5.117t4.547-2.883q0.766-3.406 3.5-5.586t6.266-2.18q3.438 0 6.125 2.125t3.516 5.469h0.516q2.234 0 4.141 1.086t3.016 2.969 1.109 4.117q0 3.344-2.305 5.75t-5.633 2.516q-0.328 0-0.328-0.281v-2.219q0-0.297 0.328-0.297 2.141-0.109 3.641-1.703t1.5-3.766-1.625-3.773-3.844-1.602h-2.672q-0.313 0-0.313-0.281l-0.109-0.969q-0.266-2.688-2.305-4.516t-4.758-1.828q-2.734 0-4.766 1.82t-2.297 4.523l-0.094 0.906q0 0.297-0.328 0.297l-0.875 0.047q-2.047 0.094-3.477 1.672t-1.43 3.703q0 2.172 1.5 3.766t3.641 1.703q0.281 0 0.281 0.297v2.219q0 0.281-0.281 0.281-3.344-0.156-5.664-2.547t-2.32-5.719zM9.875 20.656q0-0.609 0.609-1.648t1.141-1.68q0.531-0.594 0.641-0.703l0.594 0.672q0.641 0.688 1.195 1.695t0.555 1.664q0 0.984-0.672 1.641t-1.672 0.656q-0.984 0-1.688-0.672t-0.703-1.625zM14.844 27.297q0-0.688 0.398-1.594t0.977-1.703q0.453-0.641 1.109-1.398t1-1.086q0.172-0.156 0.406-0.391l0.406 0.391q0.938 0.828 2.125 2.438 0.594 0.828 0.984 1.734t0.391 1.609q0 1.609-1.133 2.742t-2.773 1.133q-1.609 0-2.75-1.125t-1.141-2.75zM17.297 16.203q0-1.047 1.625-2.672l0.406 0.422q0.438 0.531 0.797 1.18t0.359 1.070q0 0.641-0.461 1.102t-1.102 0.461q-0.672 0-1.148-0.461t-0.477-1.102z\"\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (svgIcons);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/svgIcons.js\n");

/***/ }),

/***/ 0:
/*!****************************************!*\
  !*** multi private-next-pages/_app.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! private-next-pages/_app.js */"./src/pages/_app.js");


/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"axios\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJheGlvc1wiPzcwYzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiYXhpb3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJheGlvc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///axios\n");

/***/ }),

/***/ "dayjs":
/*!************************!*\
  !*** external "dayjs" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"dayjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJkYXlqc1wiPzNhYTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiZGF5anMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJkYXlqc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///dayjs\n");

/***/ }),

/***/ "next-redux-wrapper":
/*!*************************************!*\
  !*** external "next-redux-wrapper" ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"next-redux-wrapper\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJuZXh0LXJlZHV4LXdyYXBwZXJcIj8wMWMyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Im5leHQtcmVkdXgtd3JhcHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQtcmVkdXgtd3JhcHBlclwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///next-redux-wrapper\n");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"next/head\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJuZXh0L2hlYWRcIj81ZWYyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Im5leHQvaGVhZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvaGVhZFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///next/head\n");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"react\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoicmVhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///react\n");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"react/jsx-dev-runtime\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdC9qc3gtZGV2LXJ1bnRpbWVcIj9jZDkwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6InJlYWN0L2pzeC1kZXYtcnVudGltZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0L2pzeC1kZXYtcnVudGltZVwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///react/jsx-dev-runtime\n");

/***/ }),

/***/ "redux":
/*!************************!*\
  !*** external "redux" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"redux\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWR1eFwiP2QzMjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoicmVkdXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWR1eFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///redux\n");

/***/ }),

/***/ "redux-thunk":
/*!******************************!*\
  !*** external "redux-thunk" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"redux-thunk\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWR1eC10aHVua1wiPzg4MDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoicmVkdXgtdGh1bmsuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWR1eC10aHVua1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///redux-thunk\n");

/***/ }),

/***/ "remote-redux-devtools":
/*!****************************************!*\
  !*** external "remote-redux-devtools" ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"remote-redux-devtools\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZW1vdGUtcmVkdXgtZGV2dG9vbHNcIj9mMzVhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6InJlbW90ZS1yZWR1eC1kZXZ0b29scy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlbW90ZS1yZWR1eC1kZXZ0b29sc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///remote-redux-devtools\n");

/***/ })

/******/ });