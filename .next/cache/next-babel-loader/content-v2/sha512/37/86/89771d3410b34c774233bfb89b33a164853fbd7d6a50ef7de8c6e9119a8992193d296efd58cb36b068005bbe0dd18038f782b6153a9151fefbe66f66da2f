{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var SET_DATA = \"SET_DATA\";\nexport var FAILURE = \"FAILURE\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\nexport var getData = function getData(options) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var unit, lang, key, query, params, geoCode, forecast, geocode, forecastResponse, payload;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              unit = options.unit, lang = options.lang, key = options.key, query = options.query;\n              params = {\n                appid: key,\n                lang: lang,\n                units: unit,\n                q: query\n              };\n              geoCode = \"http://api.openweathermap.org/geo/1.0/direct?q=\".concat(query, \"&&limit=1&appid=\").concat(key);\n              forecast = \"//api.openweathermap.org/data/2.5/onecall\";\n              _context.next = 6;\n              return axios.get(geoCode);\n\n            case 6:\n              geocode = _context.sent;\n              console.log(geocode);\n              params.lat = geocode[0].lat;\n              params.lon = geoCode[0].lon;\n              _context.prev = 10;\n              _context.next = 13;\n              return axios.get(forecast, {\n                params: params\n              });\n\n            case 13:\n              forecastResponse = _context.sent;\n              _context.next = 16;\n              return mapData(forecastResponse, lang);\n\n            case 16:\n              payload = _context.sent;\n              dispatch({\n                type: SET_DATA,\n                payload: payload\n              });\n              _context.next = 24;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](10);\n              console.error(_context.t0.message);\n              dispatch({\n                type: FAILURE,\n                payload: {\n                  error: _context.t0.message || _context.t0\n                }\n              });\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[10, 20]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/redux/action.js"],"names":["SET_DATA","FAILURE","axios","mapData","getData","options","dispatch","unit","lang","key","query","params","appid","units","q","geoCode","forecast","get","geocode","console","log","lat","lon","forecastResponse","payload","type","error","message"],"mappings":";;AAAA,OAAO,IAAMA,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB;AACP,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD;AAAA;AAAA,wEAAa,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,cAAAA,IAD0B,GACCF,OADD,CAC1BE,IAD0B,EACpBC,IADoB,GACCH,OADD,CACpBG,IADoB,EACdC,GADc,GACCJ,OADD,CACdI,GADc,EACTC,KADS,GACCL,OADD,CACTK,KADS;AAE5BC,cAAAA,MAF4B,GAEnB;AACbC,gBAAAA,KAAK,EAAEH,GADM;AAEbD,gBAAAA,IAAI,EAAJA,IAFa;AAGbK,gBAAAA,KAAK,EAAEN,IAHM;AAIbO,gBAAAA,CAAC,EAAEJ;AAJU,eAFmB;AAS5BK,cAAAA,OAT4B,4DASgCL,KAThC,6BASwDD,GATxD;AAU5BO,cAAAA,QAV4B,GAUjB,2CAViB;AAAA;AAAA,qBAYZd,KAAK,CAACe,GAAN,CAAUF,OAAV,CAZY;;AAAA;AAY5BG,cAAAA,OAZ4B;AAalCC,cAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEAP,cAAAA,MAAM,CAACU,GAAP,GAAaH,OAAO,CAAC,CAAD,CAAP,CAAWG,GAAxB;AACAV,cAAAA,MAAM,CAACW,GAAP,GAAaP,OAAO,CAAC,CAAD,CAAP,CAAWO,GAAxB;AAhBkC;AAAA;AAAA,qBAmBDpB,KAAK,CAACe,GAAN,CAAUD,QAAV,EAAoB;AAAEL,gBAAAA,MAAM,EAANA;AAAF,eAApB,CAnBC;;AAAA;AAmB1BY,cAAAA,gBAnB0B;AAAA;AAAA,qBAqBVpB,OAAO,CAACoB,gBAAD,EAAmBf,IAAnB,CArBG;;AAAA;AAqB1BgB,cAAAA,OArB0B;AAuBhClB,cAAAA,QAAQ,CAAC;AACPmB,gBAAAA,IAAI,EAAEzB,QADC;AAEPwB,gBAAAA,OAAO,EAAEA;AAFF,eAAD,CAAR;AAvBgC;AAAA;;AAAA;AAAA;AAAA;AA4BhCL,cAAAA,OAAO,CAACO,KAAR,CAAc,YAAMC,OAApB;AACArB,cAAAA,QAAQ,CAAC;AAAEmB,gBAAAA,IAAI,EAAExB,OAAR;AAAiBuB,gBAAAA,OAAO,EAAE;AAAEE,kBAAAA,KAAK,EAAE,YAAMC,OAAN;AAAT;AAA1B,eAAD,CAAR;;AA7BgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB","sourcesContent":["export const SET_DATA = \"SET_DATA\";\nexport const FAILURE = \"FAILURE\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\n\nexport const getData = (options) => async (dispatch) => {\n  const { unit, lang, key, query } = options;\n  const params = {\n    appid: key,\n    lang,\n    units: unit,\n    q: query,\n  };\n\n  const geoCode = `http://api.openweathermap.org/geo/1.0/direct?q=${query}&&limit=1&appid=${key}`;\n  const forecast = \"//api.openweathermap.org/data/2.5/onecall\";\n\n  const geocode = await axios.get(geoCode);\n  console.log(geocode);\n\n  params.lat = geocode[0].lat;\n  params.lon = geoCode[0].lon;\n\n  try {\n    const forecastResponse = await axios.get(forecast, { params });\n\n    const payload = await mapData(forecastResponse, lang);\n\n    dispatch({\n      type: SET_DATA,\n      payload: payload,\n    });\n  } catch (error) {\n    console.error(error.message);\n    dispatch({ type: FAILURE, payload: { error: error.message || error } });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}