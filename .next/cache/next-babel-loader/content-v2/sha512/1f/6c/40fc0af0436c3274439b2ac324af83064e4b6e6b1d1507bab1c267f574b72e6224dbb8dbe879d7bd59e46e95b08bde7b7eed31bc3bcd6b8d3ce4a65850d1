{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var SET_DATA = \"SET_DATA\";\nexport var FAILURE = \"FAILURE\";\nexport var getData = function getData(options) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var endpoint, unit, lang, key, query, params, forecastResponse, payload;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n              unit = options.unit, lang = options.lang, key = options.key, query = options.query;\n              params = {\n                appid: key,\n                lang: lang,\n                units: unit,\n                query: query\n              };\n              _context.prev = 3;\n              _context.next = 6;\n              return axios.get(endpoint, {\n                params: params\n              });\n\n            case 6:\n              forecastResponse = _context.sent;\n              payload = mapData(forecastResponse.data.daily, forecastResponse.data.current, lang);\n              dispatch({\n                type: SET_DATA,\n                payload: payload\n              });\n              _context.next = 15;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](3);\n              console.error(_context.t0.message);\n              dispatch({\n                type: FAILURE,\n                payload: {\n                  error: _context.t0.message || _context.t0\n                }\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/redux/action.js"],"names":["SET_DATA","FAILURE","getData","options","dispatch","endpoint","unit","lang","key","query","params","appid","units","axios","get","forecastResponse","payload","mapData","data","daily","current","type","console","error","message"],"mappings":";;AAAA,OAAO,IAAMA,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD;AAAA;AAAA,wEAAa,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BC,cAAAA,QAD4B,GACjB,2CADiB;AAG1BC,cAAAA,IAH0B,GAGCH,OAHD,CAG1BG,IAH0B,EAGpBC,IAHoB,GAGCJ,OAHD,CAGpBI,IAHoB,EAGdC,GAHc,GAGCL,OAHD,CAGdK,GAHc,EAGTC,KAHS,GAGCN,OAHD,CAGTM,KAHS;AAI5BC,cAAAA,MAJ4B,GAInB;AACbC,gBAAAA,KAAK,EAAEH,GADM;AAEbD,gBAAAA,IAAI,EAAJA,IAFa;AAGbK,gBAAAA,KAAK,EAAEN,IAHM;AAIbG,gBAAAA,KAAK,EAALA;AAJa,eAJmB;AAAA;AAAA;AAAA,qBAYDI,KAAK,CAACC,GAAN,CAAUT,QAAV,EAAoB;AAAEK,gBAAAA,MAAM,EAANA;AAAF,eAApB,CAZC;;AAAA;AAY1BK,cAAAA,gBAZ0B;AAa1BC,cAAAA,OAb0B,GAahBC,OAAO,CACrBF,gBAAgB,CAACG,IAAjB,CAAsBC,KADD,EAErBJ,gBAAgB,CAACG,IAAjB,CAAsBE,OAFD,EAGrBb,IAHqB,CAbS;AAmBhCH,cAAAA,QAAQ,CAAC;AACPiB,gBAAAA,IAAI,EAAErB,QADC;AAEPgB,gBAAAA,OAAO,EAAPA;AAFO,eAAD,CAAR;AAnBgC;AAAA;;AAAA;AAAA;AAAA;AAwBhCM,cAAAA,OAAO,CAACC,KAAR,CAAc,YAAMC,OAApB;AACApB,cAAAA,QAAQ,CAAC;AAAEiB,gBAAAA,IAAI,EAAEpB,OAAR;AAAiBe,gBAAAA,OAAO,EAAE;AAAEO,kBAAAA,KAAK,EAAE,YAAMC,OAAN;AAAT;AAA1B,eAAD,CAAR;;AAzBgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB","sourcesContent":["export const SET_DATA = \"SET_DATA\";\nexport const FAILURE = \"FAILURE\";\n\nexport const getData = (options) => async (dispatch) => {\n  const endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n\n  const { unit, lang, key, query } = options;\n  const params = {\n    appid: key,\n    lang,\n    units: unit,\n    query,\n  };\n\n  try {\n    const forecastResponse = await axios.get(endpoint, { params });\n    const payload = mapData(\n      forecastResponse.data.daily,\n      forecastResponse.data.current,\n      lang\n    );\n\n    dispatch({\n      type: SET_DATA,\n      payload,\n    });\n  } catch (error) {\n    console.error(error.message);\n    dispatch({ type: FAILURE, payload: { error: error.message || error } });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}