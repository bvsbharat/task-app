{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var SET_DATA = \"SET_DATA\";\nexport var FAILURE = \"FAILURE\";\nexport var getTenants = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _s = $RefreshSig$();\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", _s(function (dispatch) {\n              _s();\n\n              var endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n\n              var _useState = useState(false),\n                  _useState2 = _slicedToArray(_useState, 2),\n                  isLoading = _useState2[0],\n                  setIsLoading = _useState2[1];\n\n              var _options = options,\n                  unit = _options.unit,\n                  lang = _options.lang,\n                  key = _options.key,\n                  lon = _options.lon,\n                  lat = _options.lat;\n              var params = {\n                appid: key,\n                lang: lang,\n                units: unit,\n                lat: lat,\n                lon: lon\n              };\n\n              var fetchData = /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var forecastResponse, payload;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          setIsLoading(true);\n                          _context.prev = 1;\n                          _context.next = 4;\n                          return axios.get(endpoint, {\n                            params: params\n                          });\n\n                        case 4:\n                          forecastResponse = _context.sent;\n                          payload = mapData(forecastResponse.data.daily, forecastResponse.data.current, lang);\n                          dispatch({\n                            type: SET_DATA,\n                            payload: payload\n                          });\n                          _context.next = 13;\n                          break;\n\n                        case 9:\n                          _context.prev = 9;\n                          _context.t0 = _context[\"catch\"](1);\n                          console.error(_context.t0.message);\n                          dispatch({\n                            type: FAILURE,\n                            payload: {\n                              error: _context.t0.message || _context.t0\n                            }\n                          });\n\n                        case 13:\n                          setIsLoading(false);\n\n                        case 14:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[1, 9]]);\n                }));\n\n                return function fetchData() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n            }, \"EmvgwIb3cHpoFpeP+WmEDbjx4y4=\"));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getTenants() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/redux/action.js"],"names":["SET_DATA","FAILURE","getTenants","dispatch","endpoint","useState","isLoading","setIsLoading","options","unit","lang","key","lon","lat","params","appid","units","fetchData","axios","get","forecastResponse","payload","mapData","data","daily","current","type","console","error","message"],"mappings":";;;AAAA,OAAO,IAAMA,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB;AAEP,OAAO,IAAMC,UAAU;AAAA,sEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iDAAY,UAACC,QAAD,EAAc;AAAA;;AAClD,kBAAMC,QAAQ,GAAG,2CAAjB;;AADkD,8BAGhBC,QAAQ,CAAC,KAAD,CAHQ;AAAA;AAAA,kBAG3CC,SAH2C;AAAA,kBAGhCC,YAHgC;;AAAA,6BAIZC,OAJY;AAAA,kBAI1CC,IAJ0C,YAI1CA,IAJ0C;AAAA,kBAIpCC,IAJoC,YAIpCA,IAJoC;AAAA,kBAI9BC,GAJ8B,YAI9BA,GAJ8B;AAAA,kBAIzBC,GAJyB,YAIzBA,GAJyB;AAAA,kBAIpBC,GAJoB,YAIpBA,GAJoB;AAKlD,kBAAMC,MAAM,GAAG;AACbC,gBAAAA,KAAK,EAAEJ,GADM;AAEbD,gBAAAA,IAAI,EAAJA,IAFa;AAGbM,gBAAAA,KAAK,EAAEP,IAHM;AAIbI,gBAAAA,GAAG,EAAHA,GAJa;AAKbD,gBAAAA,GAAG,EAAHA;AALa,eAAf;;AAQA,kBAAMK,SAAS;AAAA,qFAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBV,0BAAAA,YAAY,CAAC,IAAD,CAAZ;AADgB;AAAA;AAAA,iCAGiBW,KAAK,CAACC,GAAN,CAAUf,QAAV,EAAoB;AAAEU,4BAAAA,MAAM,EAANA;AAAF,2BAApB,CAHjB;;AAAA;AAGRM,0BAAAA,gBAHQ;AAIRC,0BAAAA,OAJQ,GAIEC,OAAO,CACrBF,gBAAgB,CAACG,IAAjB,CAAsBC,KADD,EAErBJ,gBAAgB,CAACG,IAAjB,CAAsBE,OAFD,EAGrBf,IAHqB,CAJT;AAUdP,0BAAAA,QAAQ,CAAC;AACPuB,4BAAAA,IAAI,EAAE1B,QADC;AAEPqB,4BAAAA,OAAO,EAAPA;AAFO,2BAAD,CAAR;AAVc;AAAA;;AAAA;AAAA;AAAA;AAedM,0BAAAA,OAAO,CAACC,KAAR,CAAc,YAAMC,OAApB;AACA1B,0BAAAA,QAAQ,CAAC;AAAEuB,4BAAAA,IAAI,EAAEzB,OAAR;AAAiBoB,4BAAAA,OAAO,EAAE;AAAEO,8BAAAA,KAAK,EAAE,YAAMC,OAAN;AAAT;AAA1B,2BAAD,CAAR;;AAhBc;AAkBhBtB,0BAAAA,YAAY,CAAC,KAAD,CAAZ;;AAlBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAH;;AAAA,gCAATU,SAAS;AAAA;AAAA;AAAA,iBAAf;AAoBD,aAjCyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVf,UAAU;AAAA;AAAA;AAAA,GAAhB","sourcesContent":["export const SET_DATA = \"SET_DATA\";\nexport const FAILURE = \"FAILURE\";\n\nexport const getTenants = async () => (dispatch) => {\n  const endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n\n  const [isLoading, setIsLoading] = useState(false);\n  const { unit, lang, key, lon, lat } = options;\n  const params = {\n    appid: key,\n    lang,\n    units: unit,\n    lat,\n    lon,\n  };\n\n  const fetchData = async () => {\n    setIsLoading(true);\n    try {\n      const forecastResponse = await axios.get(endpoint, { params });\n      const payload = mapData(\n        forecastResponse.data.daily,\n        forecastResponse.data.current,\n        lang\n      );\n\n      dispatch({\n        type: SET_DATA,\n        payload,\n      });\n    } catch (error) {\n      console.error(error.message);\n      dispatch({ type: FAILURE, payload: { error: error.message || error } });\n    }\n    setIsLoading(false);\n  };\n};\n"]},"metadata":{},"sourceType":"module"}