{"ast":null,"code":"import dayjs from \"dayjs\";\nimport { getIcon } from \"./iconsMap\";\n\nvar formatDate = function formatDate(dte, lang) {\n  if (lang && lang !== \"en\") {\n    dayjs.locale(lang.replace(\"_\", \"-\"));\n  }\n\n  if (dte && dayjs().isValid(dte)) {\n    return dayjs.unix(dte).format(\"ddd D MMMM\");\n  }\n\n  return \"\";\n};\n\nvar mapCurrent = function mapCurrent(day, geoData, lang) {\n  console.log(geoData);\n  return {\n    city: geoData.name,\n    state: geoData.state,\n    country: geoData.country,\n    date: formatDate(day.dt, lang),\n    description: day.weather[0] ? day.weather[0].description : null,\n    icon: day.weather[0] && getIcon(day.weather[0].icon),\n    temperature: {\n      current: day.temp.toFixed(0),\n      min: undefined,\n      // openweather doesnt provide min/max on current weather\n      max: undefined\n    },\n    wind: day.wind_speed,\n    humidity: day.humidity,\n    pressure: day.pressure\n  };\n};\n\nvar mapForecast = function mapForecast(forecast, lang) {\n  var mappedForecast = [];\n\n  for (var i = 0; i < 8; i += 1) {\n    mappedForecast.push({\n      date: formatDate(forecast[i].dt, lang),\n      description: forecast[i].weather[0] ? forecast[i].weather[0].description : null,\n      icon: forecast[i].weather[0] && getIcon(forecast[i].weather[0].icon),\n      temperature: {\n        min: forecast[i].temp.min.toFixed(0),\n        max: forecast[i].temp.max.toFixed(0)\n      },\n      wind: forecast[i].wind_speed.toFixed(0),\n      humidity: forecast[i].humidity,\n      pressure: forecast[i].pressure\n    });\n  }\n\n  return mappedForecast;\n};\n\nvar mapData = function mapData(forecastData, todayData, geoData, lang) {\n  var mapped = {};\n\n  if (forecastData && todayData) {\n    var daysData = forecastData;\n    mapped.current = mapCurrent(todayData, geoData, lang);\n    mapped.forecast = mapForecast(daysData);\n  }\n\n  return mapped;\n};\n\nexport { mapData };","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/utils/mapData.js"],"names":["dayjs","getIcon","formatDate","dte","lang","locale","replace","isValid","unix","format","mapCurrent","day","geoData","console","log","city","name","state","country","date","dt","description","weather","icon","temperature","current","temp","toFixed","min","undefined","max","wind","wind_speed","humidity","pressure","mapForecast","forecast","mappedForecast","i","push","mapData","forecastData","todayData","mapped","daysData"],"mappings":"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","sourcesContent":["import dayjs from \"dayjs\";\nimport { getIcon } from \"./iconsMap\";\n\nconst formatDate = (dte, lang) => {\n  if (lang && lang !== \"en\") {\n    dayjs.locale(lang.replace(\"_\", \"-\"));\n  }\n  if (dte && dayjs().isValid(dte)) {\n    return dayjs.unix(dte).format(\"ddd D MMMM\");\n  }\n  return \"\";\n};\n\nconst mapCurrent = (day, geoData, lang) => {\n  console.log(geoData);\n  return {\n    city: geoData.name,\n    state: geoData.state,\n    country: geoData.country,\n    date: formatDate(day.dt, lang),\n    description: day.weather[0] ? day.weather[0].description : null,\n    icon: day.weather[0] && getIcon(day.weather[0].icon),\n    temperature: {\n      current: day.temp.toFixed(0),\n      min: undefined, // openweather doesnt provide min/max on current weather\n      max: undefined,\n    },\n    wind: day.wind_speed,\n    humidity: day.humidity,\n    pressure: day.pressure,\n  };\n};\n\nconst mapForecast = (forecast, lang) => {\n  const mappedForecast = [];\n  for (let i = 0; i < 8; i += 1) {\n    mappedForecast.push({\n      date: formatDate(forecast[i].dt, lang),\n      description: forecast[i].weather[0]\n        ? forecast[i].weather[0].description\n        : null,\n      icon: forecast[i].weather[0] && getIcon(forecast[i].weather[0].icon),\n      temperature: {\n        min: forecast[i].temp.min.toFixed(0),\n        max: forecast[i].temp.max.toFixed(0),\n      },\n      wind: forecast[i].wind_speed.toFixed(0),\n      humidity: forecast[i].humidity,\n      pressure: forecast[i].pressure,\n    });\n  }\n  return mappedForecast;\n};\n\nconst mapData = (forecastData, todayData, geoData, lang) => {\n  const mapped = {};\n  if (forecastData && todayData) {\n    const daysData = forecastData;\n    mapped.current = mapCurrent(todayData, geoData, lang);\n    mapped.forecast = mapForecast(daysData);\n  }\n  return mapped;\n};\n\nexport { mapData };\n"]},"metadata":{},"sourceType":"module"}