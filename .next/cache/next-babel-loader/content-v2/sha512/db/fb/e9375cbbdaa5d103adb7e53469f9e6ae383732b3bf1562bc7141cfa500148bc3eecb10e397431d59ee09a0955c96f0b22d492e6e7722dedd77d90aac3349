{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/Result.js\";\nimport React from \"react\";\nimport \"./Result.module.sass\";\nimport { useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport device from \"../../responsive/Device\";\nimport ForecastHour from \"./ForecastHour\";\nimport ResultFadeIn from \"./ResultFadeIn\";\nimport MediumLabel from \"./MediumLabel\";\nimport CurrentWeather from \"./CurrentWeather\";\nconst Results = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 40px 0;\n  opacity: 0;\n  visibility: hidden;\n  position: relative;\n  top: 20px;\n  background: rgb(0 0 0 / 23%);\n  margin-top: 50px;\n  padding: 20px 40px;\n  border-radius: 10px;\n  box-shadow: 0 3px 6px rgb(0 0 0 / 16%), 0 3px 6px rgb(0 0 0 / 23%);\n  animation: ${ResultFadeIn} 0.5s 1.4s forwards;\n`;\nconst ForecastWrapper = styled.div`\n  flex-basis: 100%;\n  margin: 20px 0;\n  overflow: hidden;\n`;\nconst Forecast = styled.div`\n  position: relative;\n  display: flex;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  scrollbar-color: lightgray #ffffff;\n  scrollbar-width: thin;\n  margin-top: 20px;\n  padding-bottom: 20px;\n  @media ${device.laptop} {\n    order: 4;\n  }\n`;\n\nconst Result = ({\n  weather\n}) => {\n  const {\n    current,\n    forecast\n  } = weather;\n  const unitType = useSelector(state => state.UnitType);\n\n  const getUnitTypes = type => {\n    if (type === \"metric\") return {\n      temperature: \"C\",\n      windSpeed: \"Km/h\"\n    };\n    return {\n      temperature: \"F\",\n      windSpeed: \"mph\"\n    };\n  };\n\n  const forecasts = forecast.map(({\n    date,\n    description,\n    icon,\n    temperature\n  }) => /*#__PURE__*/_jsxDEV(ForecastHour, {\n    date: date,\n    description: description,\n    icon: icon,\n    temperature: temperature,\n    unitsLabels: getUnitTypes(unitType)\n  }, date, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Results, {\n    children: [/*#__PURE__*/_jsxDEV(CurrentWeather, {\n      weather: current,\n      unitsLabels: getUnitTypes(unitType)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ForecastWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(MediumLabel, {\n        weight: \"800\",\n        children: \"Forecast Next 7 Day's\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Forecast, {\n        children: forecasts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\nResult.propTypes = {\n  weather: PropTypes.shape({\n    current: PropTypes.object,\n    forecast: PropTypes.array\n  }).isRequired\n};\nexport default Result;","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/Result.js"],"names":["React","useSelector","PropTypes","styled","device","ForecastHour","ResultFadeIn","MediumLabel","CurrentWeather","Results","div","ForecastWrapper","Forecast","laptop","Result","weather","current","forecast","unitType","state","UnitType","getUnitTypes","type","temperature","windSpeed","forecasts","map","date","description","icon","propTypes","shape","object","array","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,OAAO,GAAGN,MAAM,CAACO,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeJ,YAAa;AAC5B,CAfA;AAiBA,MAAMK,eAAe,GAAGR,MAAM,CAACO,GAAI;AACnC;AACA;AACA;AACA,CAJA;AAMA,MAAME,QAAQ,GAAGT,MAAM,CAACO,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAWN,MAAM,CAACS,MAAO;AACzB;AACA;AACA,CAZA;;AAcA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAC9B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBF,OAA9B;AACA,QAAMG,QAAQ,GAAGjB,WAAW,CAAEkB,KAAD,IAAWA,KAAK,CAACC,QAAlB,CAA5B;;AAEA,QAAMC,YAAY,GAAIC,IAAD,IAAU;AAC7B,QAAIA,IAAI,KAAK,QAAb,EAAuB,OAAO;AAAEC,MAAAA,WAAW,EAAE,GAAf;AAAoBC,MAAAA,SAAS,EAAE;AAA/B,KAAP;AACvB,WAAO;AAAED,MAAAA,WAAW,EAAE,GAAf;AAAoBC,MAAAA,SAAS,EAAE;AAA/B,KAAP;AACD,GAHD;;AAKA,QAAMC,SAAS,GAAGR,QAAQ,CAACS,GAAT,CAAa,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA,IAArB;AAA2BN,IAAAA;AAA3B,GAAD,kBAC7B,QAAC,YAAD;AAEE,IAAA,IAAI,EAAEI,IAFR;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,IAAI,EAAEC,IAJR;AAKE,IAAA,WAAW,EAAEN,WALf;AAME,IAAA,WAAW,EAAEF,YAAY,CAACH,QAAD;AAN3B,KACOS,IADP;AAAA;AAAA;AAAA;AAAA,UADgB,CAAlB;AAWA,sBACE,QAAC,OAAD;AAAA,4BACE,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAEX,OAAzB;AAAkC,MAAA,WAAW,EAAEK,YAAY,CAACH,QAAD;AAA3D;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,eAAD;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,MAAM,EAAC,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,QAAD;AAAA,kBAAWO;AAAX;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA9BD;;AAgCAX,MAAM,CAACgB,SAAP,GAAmB;AACjBf,EAAAA,OAAO,EAAEb,SAAS,CAAC6B,KAAV,CAAgB;AACvBf,IAAAA,OAAO,EAAEd,SAAS,CAAC8B,MADI;AAEvBf,IAAAA,QAAQ,EAAEf,SAAS,CAAC+B;AAFG,GAAhB,EAGNC;AAJc,CAAnB;AAOA,eAAepB,MAAf","sourcesContent":["import React from \"react\";\nimport \"./Result.module.sass\";\nimport { useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport device from \"../../responsive/Device\";\nimport ForecastHour from \"./ForecastHour\";\nimport ResultFadeIn from \"./ResultFadeIn\";\nimport MediumLabel from \"./MediumLabel\";\nimport CurrentWeather from \"./CurrentWeather\";\n\nconst Results = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 40px 0;\n  opacity: 0;\n  visibility: hidden;\n  position: relative;\n  top: 20px;\n  background: rgb(0 0 0 / 23%);\n  margin-top: 50px;\n  padding: 20px 40px;\n  border-radius: 10px;\n  box-shadow: 0 3px 6px rgb(0 0 0 / 16%), 0 3px 6px rgb(0 0 0 / 23%);\n  animation: ${ResultFadeIn} 0.5s 1.4s forwards;\n`;\n\nconst ForecastWrapper = styled.div`\n  flex-basis: 100%;\n  margin: 20px 0;\n  overflow: hidden;\n`;\n\nconst Forecast = styled.div`\n  position: relative;\n  display: flex;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  scrollbar-color: lightgray #ffffff;\n  scrollbar-width: thin;\n  margin-top: 20px;\n  padding-bottom: 20px;\n  @media ${device.laptop} {\n    order: 4;\n  }\n`;\n\nconst Result = ({ weather }) => {\n  const { current, forecast } = weather;\n  const unitType = useSelector((state) => state.UnitType);\n\n  const getUnitTypes = (type) => {\n    if (type === \"metric\") return { temperature: \"C\", windSpeed: \"Km/h\" };\n    return { temperature: \"F\", windSpeed: \"mph\" };\n  };\n\n  const forecasts = forecast.map(({ date, description, icon, temperature }) => (\n    <ForecastHour\n      key={date}\n      date={date}\n      description={description}\n      icon={icon}\n      temperature={temperature}\n      unitsLabels={getUnitTypes(unitType)}\n    />\n  ));\n\n  return (\n    <Results>\n      <CurrentWeather weather={current} unitsLabels={getUnitTypes(unitType)} />\n      <ForecastWrapper>\n        <MediumLabel weight=\"800\">Forecast Next 7 Day's</MediumLabel>\n        <hr />\n        <Forecast>{forecasts}</Forecast>\n      </ForecastWrapper>\n    </Results>\n  );\n};\n\nResult.propTypes = {\n  weather: PropTypes.shape({\n    current: PropTypes.object,\n    forecast: PropTypes.array,\n  }).isRequired,\n};\n\nexport default Result;\n"]},"metadata":{},"sourceType":"module"}