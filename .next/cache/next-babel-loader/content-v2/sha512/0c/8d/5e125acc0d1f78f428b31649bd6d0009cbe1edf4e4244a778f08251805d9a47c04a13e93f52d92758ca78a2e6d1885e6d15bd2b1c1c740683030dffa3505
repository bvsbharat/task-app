{"ast":null,"code":"import { useEffect, useReducer, useState } from \"react\";\nimport { useSelector } from \"redux\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\n\nconst useOpenWeather = options => {\n  const endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n  const [state, dispatch] = useSelector(state => state);\n  const {\n    data,\n    errorMessage\n  } = state;\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    unit,\n    lang,\n    key,\n    lon,\n    lat\n  } = options;\n  const params = {\n    appid: key,\n    lang,\n    units: unit,\n    lat,\n    lon\n  };\n\n  const fetchData = async () => {\n    setIsLoading(true);\n\n    try {\n      const forecastResponse = await axios.get(endpoint, {\n        params\n      });\n      const payload = mapData(forecastResponse.data.daily, forecastResponse.data.current, lang);\n      console.log(payload);\n      dispatch({\n        type: SUCCESS,\n        payload\n      });\n    } catch (error) {\n      console.error(error.message);\n      dispatch({\n        type: FAILURE,\n        payload: error.message || error\n      });\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [lon, lat]);\n  return {\n    data,\n    isLoading,\n    errorMessage,\n    fetchData\n  };\n};\n\nexport default useOpenWeather;","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/hooks/useOpenWeather.js"],"names":["useEffect","useReducer","useState","useSelector","axios","mapData","useOpenWeather","options","endpoint","state","dispatch","data","errorMessage","isLoading","setIsLoading","unit","lang","key","lon","lat","params","appid","units","fetchData","forecastResponse","get","payload","daily","current","console","log","type","SUCCESS","error","message","FAILURE"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,UAAxB;;AAEA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AAClC,QAAMC,QAAQ,GAAG,2CAAjB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,WAAW,CAAEM,KAAD,IAAWA,KAAZ,CAArC;AACA,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAyBH,KAA/B;AACA,QAAM;AAAA,OAACI,SAAD;AAAA,OAAYC;AAAZ,MAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEa,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,GAAd;AAAmBC,IAAAA,GAAnB;AAAwBC,IAAAA;AAAxB,MAAgCZ,OAAtC;AACA,QAAMa,MAAM,GAAG;AACbC,IAAAA,KAAK,EAAEJ,GADM;AAEbD,IAAAA,IAFa;AAGbM,IAAAA,KAAK,EAAEP,IAHM;AAIbI,IAAAA,GAJa;AAKbD,IAAAA;AALa,GAAf;;AAQA,QAAMK,SAAS,GAAG,YAAY;AAC5BT,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI;AACF,YAAMU,gBAAgB,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAUjB,QAAV,EAAoB;AAAEY,QAAAA;AAAF,OAApB,CAA/B;AACA,YAAMM,OAAO,GAAGrB,OAAO,CACrBmB,gBAAgB,CAACb,IAAjB,CAAsBgB,KADD,EAErBH,gBAAgB,CAACb,IAAjB,CAAsBiB,OAFD,EAGrBZ,IAHqB,CAAvB;AAMAa,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAhB,MAAAA,QAAQ,CAAC;AACPqB,QAAAA,IAAI,EAAEC,OADC;AAEPN,QAAAA;AAFO,OAAD,CAAR;AAID,KAbD,CAaE,OAAOO,KAAP,EAAc;AACdJ,MAAAA,OAAO,CAACI,KAAR,CAAcA,KAAK,CAACC,OAApB;AACAxB,MAAAA,QAAQ,CAAC;AAAEqB,QAAAA,IAAI,EAAEI,OAAR;AAAiBT,QAAAA,OAAO,EAAEO,KAAK,CAACC,OAAN,IAAiBD;AAA3C,OAAD,CAAR;AACD;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GApBD;;AAqBAd,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACL,GAAD,EAAMC,GAAN,CAFM,CAAT;AAGA,SAAO;AAAER,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBD,IAAAA,YAAnB;AAAiCW,IAAAA;AAAjC,GAAP;AACD,CAvCD;;AAyCA,eAAejB,cAAf","sourcesContent":["import { useEffect, useReducer, useState } from \"react\";\nimport { useSelector } from \"redux\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\n\nconst useOpenWeather = (options) => {\n  const endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n  const [state, dispatch] = useSelector((state) => state);\n  const { data, errorMessage } = state;\n  const [isLoading, setIsLoading] = useState(false);\n  const { unit, lang, key, lon, lat } = options;\n  const params = {\n    appid: key,\n    lang,\n    units: unit,\n    lat,\n    lon,\n  };\n\n  const fetchData = async () => {\n    setIsLoading(true);\n    try {\n      const forecastResponse = await axios.get(endpoint, { params });\n      const payload = mapData(\n        forecastResponse.data.daily,\n        forecastResponse.data.current,\n        lang\n      );\n\n      console.log(payload);\n      dispatch({\n        type: SUCCESS,\n        payload,\n      });\n    } catch (error) {\n      console.error(error.message);\n      dispatch({ type: FAILURE, payload: error.message || error });\n    }\n    setIsLoading(false);\n  };\n  useEffect(() => {\n    fetchData();\n  }, [lon, lat]);\n  return { data, isLoading, errorMessage, fetchData };\n};\n\nexport default useOpenWeather;\n"]},"metadata":{},"sourceType":"module"}