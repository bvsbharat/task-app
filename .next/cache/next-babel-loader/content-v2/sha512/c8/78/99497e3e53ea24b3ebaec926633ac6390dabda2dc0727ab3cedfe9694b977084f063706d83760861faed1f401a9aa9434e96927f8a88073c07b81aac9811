{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/WeatherInt.js\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport SearchCity from \"./SearchCity\";\nimport Title from \"./Title\";\nimport Result from \"./Result\";\nimport NotFound from \"./NotFound\";\nconst WeatherWrapper = styled.div`\n  max-width: 1500px;\n  margin: 0 auto;\n  height: calc(100vh - 64px);\n  width: 100%;\n  position: relative;\n`;\n\nconst WeatherInt = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(\"\");\n  const {\n    0: error,\n    1: SetError\n  } = useState(false);\n  const {\n    0: weatherInfo,\n    1: setWeatherInfo\n  } = useState(null);\n\n  const handleInputChange = e => {\n    setValue(e.target.value);\n  };\n\n  const handleSearchCity = e => {\n    e.preventDefault(); //value\n\n    const APIkey = \"82bc0d2d2aa2db497547b0da40fb0dcf\"; //process.env.REACT_APP_API_KEY;\n\n    const {\n      data,\n      isLoading,\n      errorMessage\n    } = useOpenWeather({\n      key: APIkey,\n      query: value,\n      lang: \"en\",\n      unit: \"metric\" // values are (metric, standard, imperial)\n\n    });\n    setWeatherInfo(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(WeatherWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        weatherInfo: weatherInfo,\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchCity, {\n        value: value,\n        showResult: (weatherInfo || error) && true,\n        change: handleInputChange,\n        submit: handleSearchCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), weatherInfo && /*#__PURE__*/_jsxDEV(Result, {\n        weather: weatherInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }, this), error && /*#__PURE__*/_jsxDEV(NotFound, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport default WeatherInt;","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/WeatherInt.js"],"names":["React","useEffect","useState","styled","SearchCity","Title","Result","NotFound","WeatherWrapper","div","WeatherInt","value","setValue","error","SetError","weatherInfo","setWeatherInfo","handleInputChange","e","target","handleSearchCity","preventDefault","APIkey","data","isLoading","errorMessage","useOpenWeather","key","query","lang","unit"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,cAAc,GAAGL,MAAM,CAACM,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA,CANA;;AAQA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACW,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM;AAAA,OAACa,WAAD;AAAA,OAAcC;AAAd,MAAgCd,QAAQ,CAAC,IAAD,CAA9C;;AAEA,QAAMe,iBAAiB,GAAIC,CAAD,IAAO;AAC/BN,IAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASR,KAAV,CAAR;AACD,GAFD;;AAIA,QAAMS,gBAAgB,GAAIF,CAAD,IAAO;AAC9BA,IAAAA,CAAC,CAACG,cAAF,GAD8B,CAE9B;;AACA,UAAMC,MAAM,GAAG,kCAAf,CAH8B,CAGqB;;AAEnD,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,SAAR;AAAmBC,MAAAA;AAAnB,QAAoCC,cAAc,CAAC;AACvDC,MAAAA,GAAG,EAAEL,MADkD;AAEvDM,MAAAA,KAAK,EAAEjB,KAFgD;AAGvDkB,MAAAA,IAAI,EAAE,IAHiD;AAIvDC,MAAAA,IAAI,EAAE,QAJiD,CAIvC;;AAJuC,KAAD,CAAxD;AAOAd,IAAAA,cAAc,CAACO,IAAD,CAAd;AACD,GAbD;;AAeA,sBACE;AAAA,2BACE,QAAC,cAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,WAAW,EAAER,WAApB;AAAiC,QAAA,KAAK,EAAEF;AAAxC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,UAAD;AACE,QAAA,KAAK,EAAEF,KADT;AAEE,QAAA,UAAU,EAAE,CAACI,WAAW,IAAIF,KAAhB,KAA0B,IAFxC;AAGE,QAAA,MAAM,EAAEI,iBAHV;AAIE,QAAA,MAAM,EAAEG;AAJV;AAAA;AAAA;AAAA;AAAA,cAFF,EAQGL,WAAW,iBAAI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,cARlB,EASGF,KAAK,iBAAI,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,cATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAeD,CAvCD;;AAyCA,eAAeH,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport styled from \"styled-components\";\nimport SearchCity from \"./SearchCity\";\nimport Title from \"./Title\";\nimport Result from \"./Result\";\nimport NotFound from \"./NotFound\";\n\nconst WeatherWrapper = styled.div`\n  max-width: 1500px;\n  margin: 0 auto;\n  height: calc(100vh - 64px);\n  width: 100%;\n  position: relative;\n`;\n\nconst WeatherInt = () => {\n  const [value, setValue] = useState(\"\");\n  const [error, SetError] = useState(false);\n  const [weatherInfo, setWeatherInfo] = useState(null);\n\n  const handleInputChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSearchCity = (e) => {\n    e.preventDefault();\n    //value\n    const APIkey = \"82bc0d2d2aa2db497547b0da40fb0dcf\"; //process.env.REACT_APP_API_KEY;\n\n    const { data, isLoading, errorMessage } = useOpenWeather({\n      key: APIkey,\n      query: value,\n      lang: \"en\",\n      unit: \"metric\", // values are (metric, standard, imperial)\n    });\n\n    setWeatherInfo(data);\n  };\n\n  return (\n    <>\n      <WeatherWrapper>\n        <Title weatherInfo={weatherInfo} error={error} />\n        <SearchCity\n          value={value}\n          showResult={(weatherInfo || error) && true}\n          change={handleInputChange}\n          submit={handleSearchCity}\n        />\n        {weatherInfo && <Result weather={weatherInfo} />}\n        {error && <NotFound error={error} />}\n      </WeatherWrapper>\n    </>\n  );\n};\n\nexport default WeatherInt;\n"]},"metadata":{},"sourceType":"module"}