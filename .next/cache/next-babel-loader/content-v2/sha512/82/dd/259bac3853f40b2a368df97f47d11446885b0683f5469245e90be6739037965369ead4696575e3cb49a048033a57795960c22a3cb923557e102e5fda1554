{"ast":null,"code":"import _defineProperty from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore } from \"redux\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nexport var SUCCESS = \"SUCCESS\";\nexport var FAILURE = \"FAILURE\";\nvar initialState = {\n  data: null,\n  errorMessage: null\n}; // create your reducer\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    data: null,\n    errorMessage: null\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      var nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n      if (state.count) nextState.count = state.count; // preserve count value on client side navigation\n\n      return nextState;\n\n    case SUCCESS:\n      return {\n        data: payload,\n        errorMessage: null\n      };\n\n    case FAILURE:\n      return {\n        data: null,\n        errorMessage: payload\n      };\n\n    default:\n      return state;\n  }\n}; // create a makeStore function\n\n\nvar makeStore = function makeStore(context) {\n  return createStore(reducer);\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/redux/store.js"],"names":["createStore","createWrapper","HYDRATE","SUCCESS","FAILURE","initialState","data","errorMessage","reducer","state","action","type","nextState","payload","count","makeStore","context","wrapper","debug"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB;AAEP,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,YAAY,EAAE;AAFK,CAArB,C,CAKA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAMX;AAAA,MALHC,KAKG,uEALK;AACNH,IAAAA,IAAI,EAAE,IADA;AAENC,IAAAA,YAAY,EAAE;AAFR,GAKL;AAAA,MADHG,MACG;;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,OAAL;AACE,UAAMU,SAAS,mCACVH,KADU,GAEVC,MAAM,CAACG,OAFG,CAAf;;AAIA,UAAIJ,KAAK,CAACK,KAAV,EAAiBF,SAAS,CAACE,KAAV,GAAkBL,KAAK,CAACK,KAAxB,CALnB,CAKkD;;AAChD,aAAOF,SAAP;;AACF,SAAKT,OAAL;AACE,aAAO;AACLG,QAAAA,IAAI,EAAEO,OADD;AAELN,QAAAA,YAAY,EAAE;AAFT,OAAP;;AAIF,SAAKH,OAAL;AACE,aAAO;AAAEE,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,YAAY,EAAEM;AAA5B,OAAP;;AACF;AACE,aAAOJ,KAAP;AAhBJ;AAkBD,CAzBD,C,CA2BA;;;AACA,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD;AAAA,SAAahB,WAAW,CAACQ,OAAD,CAAxB;AAAA,CAAlB,C,CAEA;;;AACA,OAAO,IAAMS,OAAO,GAAGhB,aAAa,CAACc,SAAD,EAAY;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore } from \"redux\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\n\nexport const SUCCESS = \"SUCCESS\";\nexport const FAILURE = \"FAILURE\";\n\nconst initialState = {\n  data: null,\n  errorMessage: null,\n};\n\n// create your reducer\nconst reducer = (\n  state = {\n    data: null,\n    errorMessage: null,\n  },\n  action\n) => {\n  switch (action.type) {\n    case HYDRATE:\n      const nextState = {\n        ...state, // use previous state\n        ...action.payload, // apply delta from hydration\n      };\n      if (state.count) nextState.count = state.count; // preserve count value on client side navigation\n      return nextState;\n    case SUCCESS:\n      return {\n        data: payload,\n        errorMessage: null,\n      };\n    case FAILURE:\n      return { data: null, errorMessage: payload };\n    default:\n      return state;\n  }\n};\n\n// create a makeStore function\nconst makeStore = (context) => createStore(reducer);\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(makeStore, { debug: true });\n"]},"metadata":{},"sourceType":"module"}