{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\nexport var SET_DATA = \"SET_DATA\";\nexport var FAILURE = \"FAILURE\";\nexport var TOGGLE_TEMP = \"TOGGLE_TEMP\";\nvar key = \"82bc0d2d2aa2db497547b0da40fb0dcf\"; //process.env.REACT_APP_API_KEY;\n\nvar lang = \"en\";\nvar forecast = \"https://api.openweathermap.org/data/2.5/onecall\";\nexport var getData = function getData(options) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var unit, query, params, geoCode, geocode, _geocode$data, geoData, forecastResponse, payload;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              unit = options.unit, query = options.query;\n              params = {\n                appid: key,\n                lang: lang,\n                units: unit,\n                lat: 11,\n                lon: 11\n              };\n              geoCode = \"https://api.openweathermap.org/geo/1.0/direct?q=\".concat(query, \"&&limit=1&appid=\").concat(key);\n              _context.prev = 3;\n              _context.next = 6;\n              return axios.get(geoCode);\n\n            case 6:\n              geocode = _context.sent;\n              _geocode$data = _slicedToArray(geocode.data, 1), geoData = _geocode$data[0];\n              params.lat = geoData.lat;\n              params.lon = geoData.lon;\n              _context.next = 12;\n              return axios.get(forecast, {\n                params: params\n              });\n\n            case 12:\n              forecastResponse = _context.sent;\n              _context.next = 15;\n              return mapData(forecastResponse.data.daily, forecastResponse.data.current, geoData, lang);\n\n            case 15:\n              payload = _context.sent;\n              dispatch({\n                type: SET_DATA,\n                payload: payload\n              });\n              _context.next = 22;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](3);\n              dispatch({\n                type: FAILURE,\n                payload: true\n              });\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 19]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var toggleTemp = function toggleTemp(options) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var unit, query, params, geoCode, geocode, _geocode$data2, geoData, forecastResponse, data;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              unit = options.unit, query = options.query;\n              params = {\n                appid: key,\n                lang: lang,\n                units: unit,\n                lat: 11,\n                lon: 11\n              };\n              geoCode = \"https://api.openweathermap.org/geo/1.0/direct?q=\".concat(query, \"&&limit=1&appid=\").concat(key);\n              _context2.prev = 3;\n              _context2.next = 6;\n              return axios.get(geoCode);\n\n            case 6:\n              geocode = _context2.sent;\n              _geocode$data2 = _slicedToArray(geocode.data, 1), geoData = _geocode$data2[0];\n              params.lat = geoData.lat;\n              params.lon = geoData.lon;\n              _context2.next = 12;\n              return axios.get(forecast, {\n                params: params\n              });\n\n            case 12:\n              forecastResponse = _context2.sent;\n              _context2.next = 15;\n              return mapData(forecastResponse.data.daily, forecastResponse.data.current, geoData, lang);\n\n            case 15:\n              data = _context2.sent;\n              dispatch({\n                type: TOGGLE_TEMP,\n                payload: {\n                  data: data,\n                  unit: unit\n                }\n              });\n              _context2.next = 22;\n              break;\n\n            case 19:\n              _context2.prev = 19;\n              _context2.t0 = _context2[\"catch\"](3);\n              dispatch({\n                type: FAILURE,\n                payload: true\n              });\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[3, 19]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/redux/action.js"],"names":["axios","mapData","SET_DATA","FAILURE","TOGGLE_TEMP","key","lang","forecast","getData","options","dispatch","unit","query","params","appid","units","lat","lon","geoCode","get","geocode","data","geoData","forecastResponse","daily","current","payload","type","toggleTemp"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { mapData } from \"../utils\";\n\nexport const SET_DATA = \"SET_DATA\";\nexport const FAILURE = \"FAILURE\";\nexport const TOGGLE_TEMP = \"TOGGLE_TEMP\";\n\nconst key = \"82bc0d2d2aa2db497547b0da40fb0dcf\"; //process.env.REACT_APP_API_KEY;\nconst lang = \"en\";\nconst forecast = \"https://api.openweathermap.org/data/2.5/onecall\";\n\nexport const getData = (options) => async (dispatch) => {\n  const { unit, query } = options;\n  let params = {\n    appid: key,\n    lang,\n    units: unit,\n    lat: 11,\n    lon: 11,\n  };\n\n  const geoCode = `https://api.openweathermap.org/geo/1.0/direct?q=${query}&&limit=1&appid=${key}`;\n\n  try {\n    const geocode = await axios.get(geoCode);\n    const [geoData] = geocode.data;\n    params.lat = geoData.lat;\n    params.lon = geoData.lon;\n    const forecastResponse = await axios.get(forecast, { params });\n    const payload = await mapData(\n      forecastResponse.data.daily,\n      forecastResponse.data.current,\n      geoData,\n      lang\n    );\n\n    dispatch({\n      type: SET_DATA,\n      payload: payload,\n    });\n  } catch (error) {\n    dispatch({ type: FAILURE, payload: true });\n  }\n};\n\nexport const toggleTemp = (options) => async (dispatch) => {\n  const { unit, query } = options;\n  let params = {\n    appid: key,\n    lang,\n    units: unit,\n    lat: 11,\n    lon: 11,\n  };\n\n  const geoCode = `https://api.openweathermap.org/geo/1.0/direct?q=${query}&&limit=1&appid=${key}`;\n\n  try {\n    const geocode = await axios.get(geoCode);\n    const [geoData] = geocode.data;\n    params.lat = geoData.lat;\n    params.lon = geoData.lon;\n    const forecastResponse = await axios.get(forecast, { params });\n    const data = await mapData(\n      forecastResponse.data.daily,\n      forecastResponse.data.current,\n      geoData,\n      lang\n    );\n\n    dispatch({\n      type: TOGGLE_TEMP,\n      payload: { data, unit },\n    });\n  } catch (error) {\n    dispatch({ type: FAILURE, payload: true });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}