{"ast":null,"code":"import dayjs from \"dayjs\";\nimport { getIcon } from \"./iconsMap\";\n\nconst formatDate = (dte, lang) => {\n  if (lang && lang !== \"en\") {\n    dayjs.locale(lang.replace(\"_\", \"-\"));\n  }\n\n  if (dte && dayjs().isValid(dte)) {\n    return dayjs.unix(dte).format(\"ddd D MMMM\");\n  }\n\n  return \"\";\n};\n\nconst mapCurrent = (day, lang) => {\n  console.log(\"day\", day);\n  return {\n    date: formatDate(day.dt, lang),\n    description: day.weather[0] ? day.weather[0].description : null,\n    icon: day.weather[0] && getIcon(day.weather[0].icon),\n    temperature: {\n      current: day.main.temp.toFixed(0),\n      min: undefined,\n      // openweather doesnt provide min/max on current weather\n      max: undefined\n    },\n    wind: day.wind.speed.toFixed(0),\n    humidity: day.main.humidity,\n    pressure: day.main.pressure\n  };\n};\n\nconst mapForecast = (forecast, lang) => {\n  const mappedForecast = [];\n\n  for (let i = 0; i < 5; i += 1) {\n    mappedForecast.push({\n      date: formatDate(forecast[i].dt, lang),\n      description: forecast[i].weather[0] ? forecast[i].weather[0].description : null,\n      icon: forecast[i].weather[0] && getIcon(forecast[i].weather[0].icon),\n      temperature: {\n        min: forecast[i].main.temp_min.toFixed(0),\n        max: forecast[i].main.temp_max.toFixed(0)\n      },\n      wind: forecast[i].wind.speed.toFixed(0),\n      humidity: forecast[i].main.humidity\n    });\n  }\n\n  return mappedForecast;\n};\n\nconst mapData = async (data, lang) => {\n  if (data.length) {\n    const [todayData, forecastData] = data;\n    const mapped = {};\n\n    if (forecastData.data && todayData.data) {\n      const daysData = forecastData;\n      mapped.current = mapCurrent(todayData.data, lang);\n      mapped.forecast = mapForecast(daysData.data);\n    }\n\n    return mapped;\n  }\n\n  return [];\n};\n\nexport { mapData };","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/utils/mapData.js"],"names":["dayjs","getIcon","formatDate","dte","lang","locale","replace","isValid","unix","format","mapCurrent","day","console","log","date","dt","description","weather","icon","temperature","current","main","temp","toFixed","min","undefined","max","wind","speed","humidity","pressure","mapForecast","forecast","mappedForecast","i","push","temp_min","temp_max","mapData","data","length","todayData","forecastData","mapped","daysData"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAEA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AAChC,MAAIA,IAAI,IAAIA,IAAI,KAAK,IAArB,EAA2B;AACzBJ,IAAAA,KAAK,CAACK,MAAN,CAAaD,IAAI,CAACE,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAb;AACD;;AACD,MAAIH,GAAG,IAAIH,KAAK,GAAGO,OAAR,CAAgBJ,GAAhB,CAAX,EAAiC;AAC/B,WAAOH,KAAK,CAACQ,IAAN,CAAWL,GAAX,EAAgBM,MAAhB,CAAuB,YAAvB,CAAP;AACD;;AACD,SAAO,EAAP;AACD,CARD;;AAUA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMP,IAAN,KAAe;AAChCQ,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACA,SAAO;AACLG,IAAAA,IAAI,EAAEZ,UAAU,CAACS,GAAG,CAACI,EAAL,EAASX,IAAT,CADX;AAELY,IAAAA,WAAW,EAAEL,GAAG,CAACM,OAAJ,CAAY,CAAZ,IAAiBN,GAAG,CAACM,OAAJ,CAAY,CAAZ,EAAeD,WAAhC,GAA8C,IAFtD;AAGLE,IAAAA,IAAI,EAAEP,GAAG,CAACM,OAAJ,CAAY,CAAZ,KAAkBhB,OAAO,CAACU,GAAG,CAACM,OAAJ,CAAY,CAAZ,EAAeC,IAAhB,CAH1B;AAILC,IAAAA,WAAW,EAAE;AACXC,MAAAA,OAAO,EAAET,GAAG,CAACU,IAAJ,CAASC,IAAT,CAAcC,OAAd,CAAsB,CAAtB,CADE;AAEXC,MAAAA,GAAG,EAAEC,SAFM;AAEK;AAChBC,MAAAA,GAAG,EAAED;AAHM,KAJR;AASLE,IAAAA,IAAI,EAAEhB,GAAG,CAACgB,IAAJ,CAASC,KAAT,CAAeL,OAAf,CAAuB,CAAvB,CATD;AAULM,IAAAA,QAAQ,EAAElB,GAAG,CAACU,IAAJ,CAASQ,QAVd;AAWLC,IAAAA,QAAQ,EAAEnB,GAAG,CAACU,IAAJ,CAASS;AAXd,GAAP;AAaD,CAfD;;AAiBA,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAW5B,IAAX,KAAoB;AACtC,QAAM6B,cAAc,GAAG,EAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7BD,IAAAA,cAAc,CAACE,IAAf,CAAoB;AAClBrB,MAAAA,IAAI,EAAEZ,UAAU,CAAC8B,QAAQ,CAACE,CAAD,CAAR,CAAYnB,EAAb,EAAiBX,IAAjB,CADE;AAElBY,MAAAA,WAAW,EAAEgB,QAAQ,CAACE,CAAD,CAAR,CAAYjB,OAAZ,CAAoB,CAApB,IACTe,QAAQ,CAACE,CAAD,CAAR,CAAYjB,OAAZ,CAAoB,CAApB,EAAuBD,WADd,GAET,IAJc;AAKlBE,MAAAA,IAAI,EAAEc,QAAQ,CAACE,CAAD,CAAR,CAAYjB,OAAZ,CAAoB,CAApB,KAA0BhB,OAAO,CAAC+B,QAAQ,CAACE,CAAD,CAAR,CAAYjB,OAAZ,CAAoB,CAApB,EAAuBC,IAAxB,CALrB;AAMlBC,MAAAA,WAAW,EAAE;AACXK,QAAAA,GAAG,EAAEQ,QAAQ,CAACE,CAAD,CAAR,CAAYb,IAAZ,CAAiBe,QAAjB,CAA0Bb,OAA1B,CAAkC,CAAlC,CADM;AAEXG,QAAAA,GAAG,EAAEM,QAAQ,CAACE,CAAD,CAAR,CAAYb,IAAZ,CAAiBgB,QAAjB,CAA0Bd,OAA1B,CAAkC,CAAlC;AAFM,OANK;AAUlBI,MAAAA,IAAI,EAAEK,QAAQ,CAACE,CAAD,CAAR,CAAYP,IAAZ,CAAiBC,KAAjB,CAAuBL,OAAvB,CAA+B,CAA/B,CAVY;AAWlBM,MAAAA,QAAQ,EAAEG,QAAQ,CAACE,CAAD,CAAR,CAAYb,IAAZ,CAAiBQ;AAXT,KAApB;AAaD;;AACD,SAAOI,cAAP;AACD,CAlBD;;AAoBA,MAAMK,OAAO,GAAG,OAAOC,IAAP,EAAanC,IAAb,KAAsB;AACpC,MAAImC,IAAI,CAACC,MAAT,EAAiB;AACf,UAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,IAAlC;AACA,UAAMI,MAAM,GAAG,EAAf;;AACA,QAAID,YAAY,CAACH,IAAb,IAAqBE,SAAS,CAACF,IAAnC,EAAyC;AACvC,YAAMK,QAAQ,GAAGF,YAAjB;AACAC,MAAAA,MAAM,CAACvB,OAAP,GAAiBV,UAAU,CAAC+B,SAAS,CAACF,IAAX,EAAiBnC,IAAjB,CAA3B;AACAuC,MAAAA,MAAM,CAACX,QAAP,GAAkBD,WAAW,CAACa,QAAQ,CAACL,IAAV,CAA7B;AACD;;AACD,WAAOI,MAAP;AACD;;AACD,SAAO,EAAP;AACD,CAZD;;AAcA,SAASL,OAAT","sourcesContent":["import dayjs from \"dayjs\";\nimport { getIcon } from \"./iconsMap\";\n\nconst formatDate = (dte, lang) => {\n  if (lang && lang !== \"en\") {\n    dayjs.locale(lang.replace(\"_\", \"-\"));\n  }\n  if (dte && dayjs().isValid(dte)) {\n    return dayjs.unix(dte).format(\"ddd D MMMM\");\n  }\n  return \"\";\n};\n\nconst mapCurrent = (day, lang) => {\n  console.log(\"day\", day);\n  return {\n    date: formatDate(day.dt, lang),\n    description: day.weather[0] ? day.weather[0].description : null,\n    icon: day.weather[0] && getIcon(day.weather[0].icon),\n    temperature: {\n      current: day.main.temp.toFixed(0),\n      min: undefined, // openweather doesnt provide min/max on current weather\n      max: undefined,\n    },\n    wind: day.wind.speed.toFixed(0),\n    humidity: day.main.humidity,\n    pressure: day.main.pressure,\n  };\n};\n\nconst mapForecast = (forecast, lang) => {\n  const mappedForecast = [];\n  for (let i = 0; i < 5; i += 1) {\n    mappedForecast.push({\n      date: formatDate(forecast[i].dt, lang),\n      description: forecast[i].weather[0]\n        ? forecast[i].weather[0].description\n        : null,\n      icon: forecast[i].weather[0] && getIcon(forecast[i].weather[0].icon),\n      temperature: {\n        min: forecast[i].main.temp_min.toFixed(0),\n        max: forecast[i].main.temp_max.toFixed(0),\n      },\n      wind: forecast[i].wind.speed.toFixed(0),\n      humidity: forecast[i].main.humidity,\n    });\n  }\n  return mappedForecast;\n};\n\nconst mapData = async (data, lang) => {\n  if (data.length) {\n    const [todayData, forecastData] = data;\n    const mapped = {};\n    if (forecastData.data && todayData.data) {\n      const daysData = forecastData;\n      mapped.current = mapCurrent(todayData.data, lang);\n      mapped.forecast = mapForecast(daysData.data);\n    }\n    return mapped;\n  }\n  return [];\n};\n\nexport { mapData };\n"]},"metadata":{},"sourceType":"module"}