{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport _ from \"underscore\";\nimport thunk from \"redux-thunk\";\nimport axios from \"axios\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"remote-redux-devtools\";\nimport { SET_DATA, FAILURE } from \"./action\";\nconst initialState = {\n  data: null,\n  error: null,\n  UnitType: \"metric\"\n};\nconst composeEnhancers = false && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n}) : compose; // create your reducer\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n      if (state.count) nextState.count = state.count; // preserve count value on client side navigation\n\n      return nextState;\n\n    case SET_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.payload,\n          error: false\n        });\n      }\n\n    case FAILURE:\n      return {\n        data: null,\n        error: action.payload\n      };\n\n    case TOGGLE_TEMP:\n      {\n        if (state.UnitType === \"metric\") {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            UnitType: \"imperial\"\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          UnitType: payload.UnitType\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst enhancer = composeEnhancers(applyMiddleware(thunk.withExtraArgument(axios))); // create a makeStore function\n\nconst makeStore = context => createStore(reducer, enhancer); // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/redux/store.js"],"names":["createStore","applyMiddleware","compose","_","thunk","axios","createWrapper","HYDRATE","composeWithDevTools","SET_DATA","FAILURE","initialState","data","error","UnitType","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reducer","state","action","type","nextState","payload","count","TOGGLE_TEMP","enhancer","withExtraArgument","makeStore","context","wrapper","debug"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,CAAP,MAAc,YAAd;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,UAAlC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB;AAMA,MAAMC,gBAAgB,GACpB,SAA8BC,MAAM,CAACC,oCAArC,GACID,MAAM,CAACC,oCAAP,CAA4C,CAC1C;AAD0C,CAA5C,CADJ,GAIIf,OALN,C,CAOA;;AACA,MAAMgB,OAAO,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,OAAL;AACE,YAAMe,SAAS,mCACVH,KADU,GAEVC,MAAM,CAACG,OAFG,CAAf;;AAIA,UAAIJ,KAAK,CAACK,KAAV,EAAiBF,SAAS,CAACE,KAAV,GAAkBL,KAAK,CAACK,KAAxB,CALnB,CAKkD;;AAChD,aAAOF,SAAP;;AACF,SAAKb,QAAL;AAAe;AACb,+CACKU,KADL;AAEEP,UAAAA,IAAI,EAAEQ,MAAM,CAACG,OAFf;AAGEV,UAAAA,KAAK,EAAE;AAHT;AAKD;;AACD,SAAKH,OAAL;AACE,aAAO;AAAEE,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,KAAK,EAAEO,MAAM,CAACG;AAA5B,OAAP;;AACF,SAAKE,WAAL;AAAkB;AAChB,YAAIN,KAAK,CAACL,QAAN,KAAmB,QAAvB,EAAiC;AAC/B,iDACKK,KADL;AAEEL,YAAAA,QAAQ,EAAE;AAFZ;AAID;;AACD,+CACKK,KADL;AAEEL,UAAAA,QAAQ,EAAES,OAAO,CAACT;AAFpB;AAID;;AACD;AACE,aAAOK,KAAP;AA9BJ;AAgCD,CAjCD;;AAmCA,MAAMO,QAAQ,GAAGX,gBAAgB,CAC/Bd,eAAe,CAACG,KAAK,CAACuB,iBAAN,CAAwBtB,KAAxB,CAAD,CADgB,CAAjC,C,CAIA;;AACA,MAAMuB,SAAS,GAAIC,OAAD,IAAa7B,WAAW,CAACkB,OAAD,EAAUQ,QAAV,CAA1C,C,CAEA;;;AACA,OAAO,MAAMI,OAAO,GAAGxB,aAAa,CAACsB,SAAD,EAAY;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\nimport _ from \"underscore\";\nimport thunk from \"redux-thunk\";\nimport axios from \"axios\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"remote-redux-devtools\";\nimport { SET_DATA, FAILURE } from \"./action\";\n\nconst initialState = {\n  data: null,\n  error: null,\n  UnitType: \"metric\",\n};\n\nconst composeEnhancers =\n  typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n      })\n    : compose;\n\n// create your reducer\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      const nextState = {\n        ...state, // use previous state\n        ...action.payload, // apply delta from hydration\n      };\n      if (state.count) nextState.count = state.count; // preserve count value on client side navigation\n      return nextState;\n    case SET_DATA: {\n      return {\n        ...state,\n        data: action.payload,\n        error: false,\n      };\n    }\n    case FAILURE:\n      return { data: null, error: action.payload };\n    case TOGGLE_TEMP: {\n      if (state.UnitType === \"metric\") {\n        return {\n          ...state,\n          UnitType: \"imperial\",\n        };\n      }\n      return {\n        ...state,\n        UnitType: payload.UnitType,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(thunk.withExtraArgument(axios))\n);\n\n// create a makeStore function\nconst makeStore = (context) => createStore(reducer, enhancer);\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(makeStore, { debug: true });\n"]},"metadata":{},"sourceType":"module"}