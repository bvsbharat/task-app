{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var SET_DATA = \"SET_DATA\";\nexport var FAILURE = \"FAILURE\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\nexport var getData = function getData(options) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var unit, lang, key, query, params, geoCode, forecast, geocode, _geocode$data, geoData, forecastResponse, payload;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              unit = options.unit, lang = options.lang, key = options.key, query = options.query;\n              params = {\n                appid: key,\n                lang: lang,\n                units: unit,\n                lat: 11,\n                lon: 11\n              };\n              geoCode = \"http://api.openweathermap.org/geo/1.0/direct?q=\".concat(query, \"&&limit=1&appid=\").concat(key);\n              forecast = \"//api.openweathermap.org/data/2.5/onecall\";\n              _context.next = 6;\n              return axios.get(geoCode);\n\n            case 6:\n              geocode = _context.sent;\n              _geocode$data = _slicedToArray(geocode.data, 1), geoData = _geocode$data[0];\n              params.lat = geoData.lat;\n              params.lon = geoData.lon;\n              _context.prev = 10;\n              _context.next = 13;\n              return axios.get(forecast, {\n                params: params\n              });\n\n            case 13:\n              forecastResponse = _context.sent;\n              _context.next = 16;\n              return mapData(forecastResponse.data.daily, forecastResponse.data.current, lang);\n\n            case 16:\n              payload = _context.sent;\n              dispatch({\n                type: SET_DATA,\n                payload: payload\n              });\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](10);\n              dispatch({\n                type: FAILURE,\n                payload: true\n              });\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[10, 20]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/redux/action.js"],"names":["SET_DATA","FAILURE","axios","mapData","getData","options","dispatch","unit","lang","key","query","params","appid","units","lat","lon","geoCode","forecast","get","geocode","data","geoData","forecastResponse","daily","current","payload","type"],"mappings":";;;AAAA,OAAO,IAAMA,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB;AACP,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD;AAAA;AAAA,wEAAa,iBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC1BC,cAAAA,IAD0B,GACCF,OADD,CAC1BE,IAD0B,EACpBC,IADoB,GACCH,OADD,CACpBG,IADoB,EACdC,GADc,GACCJ,OADD,CACdI,GADc,EACTC,KADS,GACCL,OADD,CACTK,KADS;AAE9BC,cAAAA,MAF8B,GAErB;AACXC,gBAAAA,KAAK,EAAEH,GADI;AAEXD,gBAAAA,IAAI,EAAJA,IAFW;AAGXK,gBAAAA,KAAK,EAAEN,IAHI;AAIXO,gBAAAA,GAAG,EAAE,EAJM;AAKXC,gBAAAA,GAAG,EAAE;AALM,eAFqB;AAU5BC,cAAAA,OAV4B,4DAUgCN,KAVhC,6BAUwDD,GAVxD;AAW5BQ,cAAAA,QAX4B,GAWjB,2CAXiB;AAAA;AAAA,qBAaZf,KAAK,CAACgB,GAAN,CAAUF,OAAV,CAbY;;AAAA;AAa5BG,cAAAA,OAb4B;AAAA,6CAehBA,OAAO,CAACC,IAfQ,MAe3BC,OAf2B;AAiBlCV,cAAAA,MAAM,CAACG,GAAP,GAAaO,OAAO,CAACP,GAArB;AACAH,cAAAA,MAAM,CAACI,GAAP,GAAaM,OAAO,CAACN,GAArB;AAlBkC;AAAA;AAAA,qBAqBDb,KAAK,CAACgB,GAAN,CAAUD,QAAV,EAAoB;AAAEN,gBAAAA,MAAM,EAANA;AAAF,eAApB,CArBC;;AAAA;AAqB1BW,cAAAA,gBArB0B;AAAA;AAAA,qBAuBVnB,OAAO,CAC3BmB,gBAAgB,CAACF,IAAjB,CAAsBG,KADK,EAE3BD,gBAAgB,CAACF,IAAjB,CAAsBI,OAFK,EAG3BhB,IAH2B,CAvBG;;AAAA;AAuB1BiB,cAAAA,OAvB0B;AA6BhCnB,cAAAA,QAAQ,CAAC;AACPoB,gBAAAA,IAAI,EAAE1B,QADC;AAEPyB,gBAAAA,OAAO,EAAEA;AAFF,eAAD,CAAR;AA7BgC;AAAA;;AAAA;AAAA;AAAA;AAkChCnB,cAAAA,QAAQ,CAAC;AAAEoB,gBAAAA,IAAI,EAAEzB,OAAR;AAAiBwB,gBAAAA,OAAO,EAAE;AAA1B,eAAD,CAAR;;AAlCgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB","sourcesContent":["export const SET_DATA = \"SET_DATA\";\nexport const FAILURE = \"FAILURE\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\n\nexport const getData = (options) => async (dispatch) => {\n  const { unit, lang, key, query } = options;\n  let params = {\n    appid: key,\n    lang,\n    units: unit,\n    lat: 11,\n    lon: 11,\n  };\n\n  const geoCode = `http://api.openweathermap.org/geo/1.0/direct?q=${query}&&limit=1&appid=${key}`;\n  const forecast = \"//api.openweathermap.org/data/2.5/onecall\";\n\n  const geocode = await axios.get(geoCode);\n\n  const [geoData] = geocode.data;\n\n  params.lat = geoData.lat;\n  params.lon = geoData.lon;\n\n  try {\n    const forecastResponse = await axios.get(forecast, { params });\n\n    const payload = await mapData(\n      forecastResponse.data.daily,\n      forecastResponse.data.current,\n      lang\n    );\n\n    dispatch({\n      type: SET_DATA,\n      payload: payload,\n    });\n  } catch (error) {\n    dispatch({ type: FAILURE, payload: true });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}