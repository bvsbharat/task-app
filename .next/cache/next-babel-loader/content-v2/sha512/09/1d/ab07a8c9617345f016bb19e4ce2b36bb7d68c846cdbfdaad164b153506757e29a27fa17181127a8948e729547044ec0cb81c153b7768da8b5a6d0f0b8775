{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useReducer, useState } from \"react\";\nimport { useSelector } from \"redux\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\n\nvar useOpenWeather = function useOpenWeather(options) {\n  _s();\n\n  var endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n\n  var _useSelector = useSelector(fetchReducer, initialState),\n      _useSelector2 = _slicedToArray(_useSelector, 2),\n      state = _useSelector2[0],\n      dispatch = _useSelector2[1];\n\n  var data = state.data,\n      errorMessage = state.errorMessage;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var unit = options.unit,\n      lang = options.lang,\n      key = options.key,\n      lon = options.lon,\n      lat = options.lat;\n  var params = {\n    appid: key,\n    lang: lang,\n    units: unit,\n    lat: lat,\n    lon: lon\n  };\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var forecastResponse, payload;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsLoading(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get(endpoint, {\n                params: params\n              });\n\n            case 4:\n              forecastResponse = _context.sent;\n              payload = mapData(forecastResponse.data.daily, forecastResponse.data.current, lang);\n              console.log(payload);\n              dispatch({\n                type: SUCCESS,\n                payload: payload\n              });\n              _context.next = 14;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.error(_context.t0.message);\n              dispatch({\n                type: FAILURE,\n                payload: _context.t0.message || _context.t0\n              });\n\n            case 14:\n              setIsLoading(false);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchData();\n  }, [lon, lat]);\n  return {\n    data: data,\n    isLoading: isLoading,\n    errorMessage: errorMessage,\n    fetchData: fetchData\n  };\n};\n\n_s(useOpenWeather, \"aym+X/FyPolxSE5pAMJL7N+xUhs=\", false, function () {\n  return [useSelector];\n});\n\nexport default useOpenWeather;","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/hooks/useOpenWeather.js"],"names":["useEffect","useReducer","useState","useSelector","axios","mapData","useOpenWeather","options","endpoint","fetchReducer","initialState","state","dispatch","data","errorMessage","isLoading","setIsLoading","unit","lang","key","lon","lat","params","appid","units","fetchData","get","forecastResponse","payload","daily","current","console","log","type","SUCCESS","error","message","FAILURE"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,UAAxB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAAA;;AAClC,MAAMC,QAAQ,GAAG,2CAAjB;;AADkC,qBAERL,WAAW,CAACM,YAAD,EAAeC,YAAf,CAFH;AAAA;AAAA,MAE3BC,KAF2B;AAAA,MAEpBC,QAFoB;;AAAA,MAG1BC,IAH0B,GAGHF,KAHG,CAG1BE,IAH0B;AAAA,MAGpBC,YAHoB,GAGHH,KAHG,CAGpBG,YAHoB;;AAAA,kBAIAZ,QAAQ,CAAC,KAAD,CAJR;AAAA,MAI3Ba,SAJ2B;AAAA,MAIhBC,YAJgB;;AAAA,MAK1BC,IAL0B,GAKIV,OALJ,CAK1BU,IAL0B;AAAA,MAKpBC,IALoB,GAKIX,OALJ,CAKpBW,IALoB;AAAA,MAKdC,GALc,GAKIZ,OALJ,CAKdY,GALc;AAAA,MAKTC,GALS,GAKIb,OALJ,CAKTa,GALS;AAAA,MAKJC,GALI,GAKId,OALJ,CAKJc,GALI;AAMlC,MAAMC,MAAM,GAAG;AACbC,IAAAA,KAAK,EAAEJ,GADM;AAEbD,IAAAA,IAAI,EAAJA,IAFa;AAGbM,IAAAA,KAAK,EAAEP,IAHM;AAIbI,IAAAA,GAAG,EAAHA,GAJa;AAKbD,IAAAA,GAAG,EAAHA;AALa,GAAf;;AAQA,MAAMK,SAAS;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBT,cAAAA,YAAY,CAAC,IAAD,CAAZ;AADgB;AAAA;AAAA,qBAGiBZ,KAAK,CAACsB,GAAN,CAAUlB,QAAV,EAAoB;AAAEc,gBAAAA,MAAM,EAANA;AAAF,eAApB,CAHjB;;AAAA;AAGRK,cAAAA,gBAHQ;AAIRC,cAAAA,OAJQ,GAIEvB,OAAO,CACrBsB,gBAAgB,CAACd,IAAjB,CAAsBgB,KADD,EAErBF,gBAAgB,CAACd,IAAjB,CAAsBiB,OAFD,EAGrBZ,IAHqB,CAJT;AAUda,cAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAhB,cAAAA,QAAQ,CAAC;AACPqB,gBAAAA,IAAI,EAAEC,OADC;AAEPN,gBAAAA,OAAO,EAAPA;AAFO,eAAD,CAAR;AAXc;AAAA;;AAAA;AAAA;AAAA;AAgBdG,cAAAA,OAAO,CAACI,KAAR,CAAc,YAAMC,OAApB;AACAxB,cAAAA,QAAQ,CAAC;AAAEqB,gBAAAA,IAAI,EAAEI,OAAR;AAAiBT,gBAAAA,OAAO,EAAE,YAAMQ,OAAN;AAA1B,eAAD,CAAR;;AAjBc;AAmBhBpB,cAAAA,YAAY,CAAC,KAAD,CAAZ;;AAnBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATS,SAAS;AAAA;AAAA;AAAA,KAAf;;AAqBAzB,EAAAA,SAAS,CAAC,YAAM;AACdyB,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACL,GAAD,EAAMC,GAAN,CAFM,CAAT;AAGA,SAAO;AAAER,IAAAA,IAAI,EAAJA,IAAF;AAAQE,IAAAA,SAAS,EAATA,SAAR;AAAmBD,IAAAA,YAAY,EAAZA,YAAnB;AAAiCW,IAAAA,SAAS,EAATA;AAAjC,GAAP;AACD,CAvCD;;GAAMnB,c;UAEsBH,W;;;AAuC5B,eAAeG,cAAf","sourcesContent":["import { useEffect, useReducer, useState } from \"react\";\nimport { useSelector } from \"redux\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\n\nconst useOpenWeather = (options) => {\n  const endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n  const [state, dispatch] = useSelector(fetchReducer, initialState);\n  const { data, errorMessage } = state;\n  const [isLoading, setIsLoading] = useState(false);\n  const { unit, lang, key, lon, lat } = options;\n  const params = {\n    appid: key,\n    lang,\n    units: unit,\n    lat,\n    lon,\n  };\n\n  const fetchData = async () => {\n    setIsLoading(true);\n    try {\n      const forecastResponse = await axios.get(endpoint, { params });\n      const payload = mapData(\n        forecastResponse.data.daily,\n        forecastResponse.data.current,\n        lang\n      );\n\n      console.log(payload);\n      dispatch({\n        type: SUCCESS,\n        payload,\n      });\n    } catch (error) {\n      console.error(error.message);\n      dispatch({ type: FAILURE, payload: error.message || error });\n    }\n    setIsLoading(false);\n  };\n  useEffect(() => {\n    fetchData();\n  }, [lon, lat]);\n  return { data, isLoading, errorMessage, fetchData };\n};\n\nexport default useOpenWeather;\n"]},"metadata":{},"sourceType":"module"}