{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/WeatherInt.js\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport SearchCity from \"./SearchCity\";\nimport device from \"../../responsive/Device\";\nimport Result from \"./Result\";\nimport NotFound from \"./NotFound\";\nconst AppTitle = styled.h1`\n  display: block;\n  height: 64px;\n  margin: 0;\n  padding: 20px 0;\n  font-size: 20px;\n  text-transform: uppercase;\n  font-weight: 400;\n  color: #ffffff;\n  transition: 0.3s 1.4s;\n  opacity: ${({\n  showLabel\n}) => showLabel ? 1 : 0};\n\n  ${({\n  secondary\n}) => secondary && `\n    opacity: 1;\n    height: auto;\n    position: relative;\n    padding: 20px 0;\n    font-size: 30px;\n    top: 20%;\n    text-align: center;\n    transition: .5s;\n    @media ${device.tablet} {\n      font-size: 40px;\n    }\n    @media ${device.laptop} {\n      font-size: 50px;\n    }\n    @media ${device.laptopL} {\n      font-size: 60px;\n    }\n    @media ${device.desktop} {\n      font-size: 70px;\n    }\n    \n  `}\n\n  ${({\n  showResult\n}) => showResult && `\n    opacity: 0;\n    visibility: hidden;\n    top: 10%;\n  `}\n`;\nconst WeatherWrapper = styled.div`\n  max-width: 1500px;\n  margin: 0 auto;\n  height: calc(100vh - 64px);\n  width: 100%;\n  position: relative;\n`; // class App extends React.Component {\n\nconst WeatherInt = ({\n  data,\n  isLoading,\n  errorMessage\n}) => {\n  useEffect(() => {\n    console.log({\n      data,\n      isLoading,\n      errorMessage\n    });\n  }, []); // handleInputChange = (e) => {\n  //   this.setState({\n  //     value: e.target.value,\n  //   });\n  // };\n  // handleSearchCity = (e) => {\n  //   e.preventDefault();\n  //   const { value } = this.state;\n  //   const APIkey = \"82bc0d2d2aa2db497547b0da40fb0dcf\"; //process.env.REACT_APP_API_KEY;\n  //   const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\n  //   const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\n  //   Promise.all([fetch(weather), fetch(forecast)])\n  //     .then(([res1, res2]) => {\n  //       if (res1.ok && res2.ok) {\n  //         return Promise.all([res1.json(), res2.json()]);\n  //       }\n  //       throw Error(res1.statusText, res2.statusText);\n  //     })\n  //     .then(([data1, data2]) => {\n  //       const months = [\n  //         \"January\",\n  //         \"February\",\n  //         \"March\",\n  //         \"April\",\n  //         \"May\",\n  //         \"June\",\n  //         \"July\",\n  //         \"August\",\n  //         \"September\",\n  //         \"October\",\n  //         \"Nocvember\",\n  //         \"December\",\n  //       ];\n  //       const days = [\n  //         \"Sunday\",\n  //         \"Monday\",\n  //         \"Tuesday\",\n  //         \"Wednesday\",\n  //         \"Thursday\",\n  //         \"Friday\",\n  //         \"Saturday\",\n  //       ];\n  //       const currentDate = new Date();\n  //       const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\n  //         months[currentDate.getMonth()]\n  //       }`;\n  //       const sunset = new Date(data1.sys.sunset * 1000)\n  //         .toLocaleTimeString()\n  //         .slice(0, 5);\n  //       const sunrise = new Date(data1.sys.sunrise * 1000)\n  //         .toLocaleTimeString()\n  //         .slice(0, 5);\n  //       const weatherInfo = {\n  //         city: data1.name,\n  //         country: data1.sys.country,\n  //         date,\n  //         description: data1.weather[0].description,\n  //         main: data1.weather[0].main,\n  //         temp: data1.main.temp,\n  //         highestTemp: data1.main.temp_max,\n  //         lowestTemp: data1.main.temp_min,\n  //         sunrise,\n  //         sunset,\n  //         clouds: data1.clouds.all,\n  //         humidity: data1.main.humidity,\n  //         wind: data1.wind.speed,\n  //         forecast: data2.list,\n  //       };\n  //       this.setState({\n  //         weatherInfo,\n  //         error: false,\n  //       });\n  //     })\n  //     .catch((error) => {\n  //       console.log(error);\n  //       this.setState({\n  //         error: true,\n  //         weatherInfo: null,\n  //       });\n  //     });\n  // };\n  // const { value, weatherInfo, error } = this.state;\n  // return (\n  //   <>\n  //     {/* <AppTitle showLabel={(weatherInfo || error) && true}>\n  //         Weather app\n  //       </AppTitle> */}\n  //     <WeatherWrapper>\n  //       <AppTitle secondary showResult={(weatherInfo || error) && true}>\n  //         Weather app\n  //       </AppTitle>\n  //       <SearchCity\n  //         value={value}\n  //         showResult={(weatherInfo || error) && true}\n  //         change={this.handleInputChange}\n  //         submit={this.handleSearchCity}\n  //       />\n  //       {weatherInfo && <Result weather={weatherInfo} />}\n  //       {error && <NotFound error={error} />}\n  //     </WeatherWrapper>\n  //   </>\n  // );\n\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 10\n  }, this);\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/WeatherInt.js"],"names":["React","styled","SearchCity","device","Result","NotFound","AppTitle","h1","showLabel","secondary","tablet","laptop","laptopL","desktop","showResult","WeatherWrapper","div","WeatherInt","data","isLoading","errorMessage","useEffect","console","log","App"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,QAAQ,GAAGL,MAAM,CAACM,EAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoBA,SAAS,GAAG,CAAH,GAAO,CAAG;AACpD;AACA,IAAI,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACAA,SAAS,IACR;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAaN,MAAM,CAACO,MAAO;AAC3B;AACA;AACA,aAAaP,MAAM,CAACQ,MAAO;AAC3B;AACA;AACA,aAAaR,MAAM,CAACS,OAAQ;AAC5B;AACA;AACA,aAAaT,MAAM,CAACU,OAAQ;AAC5B;AACA;AACA;AACA,GAAI;AACJ;AACA,IAAI,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACAA,UAAU,IACT;AACL;AACA;AACA;AACA,GAAI;AACJ,CA7CA;AA+CA,MAAMC,cAAc,GAAGd,MAAM,CAACe,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA,CANA,C,CAQA;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAR;AAAmBC,EAAAA;AAAnB,CAAD,KAAuC;AACxDC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEL,MAAAA,IAAF;AAAQC,MAAAA,SAAR;AAAmBC,MAAAA;AAAnB,KAAZ;AACD,GAFQ,EAEN,EAFM,CAAT,CADwD,CAKxsBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAnHD;;AAqHA,eAAeI,GAAf","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport SearchCity from \"./SearchCity\";\nimport device from \"../../responsive/Device\";\nimport Result from \"./Result\";\nimport NotFound from \"./NotFound\";\n\nconst AppTitle = styled.h1`\n  display: block;\n  height: 64px;\n  margin: 0;\n  padding: 20px 0;\n  font-size: 20px;\n  text-transform: uppercase;\n  font-weight: 400;\n  color: #ffffff;\n  transition: 0.3s 1.4s;\n  opacity: ${({ showLabel }) => (showLabel ? 1 : 0)};\n\n  ${({ secondary }) =>\n    secondary &&\n    `\n    opacity: 1;\n    height: auto;\n    position: relative;\n    padding: 20px 0;\n    font-size: 30px;\n    top: 20%;\n    text-align: center;\n    transition: .5s;\n    @media ${device.tablet} {\n      font-size: 40px;\n    }\n    @media ${device.laptop} {\n      font-size: 50px;\n    }\n    @media ${device.laptopL} {\n      font-size: 60px;\n    }\n    @media ${device.desktop} {\n      font-size: 70px;\n    }\n    \n  `}\n\n  ${({ showResult }) =>\n    showResult &&\n    `\n    opacity: 0;\n    visibility: hidden;\n    top: 10%;\n  `}\n`;\n\nconst WeatherWrapper = styled.div`\n  max-width: 1500px;\n  margin: 0 auto;\n  height: calc(100vh - 64px);\n  width: 100%;\n  position: relative;\n`;\n\n// class App extends React.Component {\n\nconst WeatherInt = ({ data, isLoading, errorMessage }) => {\n  useEffect(() => {\n    console.log({ data, isLoading, errorMessage });\n  }, []);\n\n  // handleInputChange = (e) => {\n  //   this.setState({\n  //     value: e.target.value,\n  //   });\n  // };\n\n  // handleSearchCity = (e) => {\n  //   e.preventDefault();\n  //   const { value } = this.state;\n  //   const APIkey = \"82bc0d2d2aa2db497547b0da40fb0dcf\"; //process.env.REACT_APP_API_KEY;\n\n  //   const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\n  //   const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\n\n  //   Promise.all([fetch(weather), fetch(forecast)])\n  //     .then(([res1, res2]) => {\n  //       if (res1.ok && res2.ok) {\n  //         return Promise.all([res1.json(), res2.json()]);\n  //       }\n  //       throw Error(res1.statusText, res2.statusText);\n  //     })\n  //     .then(([data1, data2]) => {\n  //       const months = [\n  //         \"January\",\n  //         \"February\",\n  //         \"March\",\n  //         \"April\",\n  //         \"May\",\n  //         \"June\",\n  //         \"July\",\n  //         \"August\",\n  //         \"September\",\n  //         \"October\",\n  //         \"Nocvember\",\n  //         \"December\",\n  //       ];\n  //       const days = [\n  //         \"Sunday\",\n  //         \"Monday\",\n  //         \"Tuesday\",\n  //         \"Wednesday\",\n  //         \"Thursday\",\n  //         \"Friday\",\n  //         \"Saturday\",\n  //       ];\n  //       const currentDate = new Date();\n  //       const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\n  //         months[currentDate.getMonth()]\n  //       }`;\n  //       const sunset = new Date(data1.sys.sunset * 1000)\n  //         .toLocaleTimeString()\n  //         .slice(0, 5);\n  //       const sunrise = new Date(data1.sys.sunrise * 1000)\n  //         .toLocaleTimeString()\n  //         .slice(0, 5);\n\n  //       const weatherInfo = {\n  //         city: data1.name,\n  //         country: data1.sys.country,\n  //         date,\n  //         description: data1.weather[0].description,\n  //         main: data1.weather[0].main,\n  //         temp: data1.main.temp,\n  //         highestTemp: data1.main.temp_max,\n  //         lowestTemp: data1.main.temp_min,\n  //         sunrise,\n  //         sunset,\n  //         clouds: data1.clouds.all,\n  //         humidity: data1.main.humidity,\n  //         wind: data1.wind.speed,\n  //         forecast: data2.list,\n  //       };\n  //       this.setState({\n  //         weatherInfo,\n  //         error: false,\n  //       });\n  //     })\n  //     .catch((error) => {\n  //       console.log(error);\n\n  //       this.setState({\n  //         error: true,\n  //         weatherInfo: null,\n  //       });\n  //     });\n  // };\n\n  // const { value, weatherInfo, error } = this.state;\n  // return (\n  //   <>\n  //     {/* <AppTitle showLabel={(weatherInfo || error) && true}>\n  //         Weather app\n  //       </AppTitle> */}\n  //     <WeatherWrapper>\n  //       <AppTitle secondary showResult={(weatherInfo || error) && true}>\n  //         Weather app\n  //       </AppTitle>\n  //       <SearchCity\n  //         value={value}\n  //         showResult={(weatherInfo || error) && true}\n  //         change={this.handleInputChange}\n  //         submit={this.handleSearchCity}\n  //       />\n  //       {weatherInfo && <Result weather={weatherInfo} />}\n  //       {error && <NotFound error={error} />}\n  //     </WeatherWrapper>\n  //   </>\n  // );\n\n  return <h1>Loading...</h1>;\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}