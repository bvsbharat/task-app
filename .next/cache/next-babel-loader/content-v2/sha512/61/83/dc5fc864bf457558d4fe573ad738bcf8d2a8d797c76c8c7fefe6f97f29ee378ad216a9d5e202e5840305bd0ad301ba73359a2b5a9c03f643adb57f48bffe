{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/Result.js\";\nimport React from \"react\";\nimport \"./Result.module.sass\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport device from \"../../responsive/Device\";\nimport ForecastHour from \"./ForecastHour\";\nimport ResultFadeIn from \"./ResultFadeIn\";\nimport MediumLabel from \"./MediumLabel\";\nimport CurrentWeather from \"./CurrentWeather\";\nconst Results = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 40px 0;\n  opacity: 0;\n  visibility: hidden;\n  position: relative;\n  top: 20px;\n  animation: ${ResultFadeIn} 0.5s 1.4s forwards;\n`;\nconst ForecastWrapper = styled.div`\n  flex-basis: 100%;\n  margin: 20px 0;\n  overflow: hidden;\n`;\nconst Forecast = styled.div`\n  position: relative;\n  display: flex;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  scrollbar-color: lightgray #ffffff;\n  scrollbar-width: thin;\n  margin-top: 20px;\n  padding-bottom: 20px;\n  @media ${device.laptop} {\n    order: 4;\n  }\n`;\n\nconst Result = ({\n  weather\n}) => {\n  const {\n    current,\n    forecast\n  } = weather;\n  const forecasts = forecast.map(({\n    date,\n    description,\n    icon,\n    temperature\n  }) => /*#__PURE__*/_jsxDEV(ForecastHour, {\n    date: date,\n    description: description,\n    icon: icon,\n    temperature: temperature,\n    unitsLabels: {\n      temperature: \"C\",\n      windSpeed: \"Km/h\"\n    }\n  }, date, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Results, {\n    children: [/*#__PURE__*/_jsxDEV(CurrentWeather, {\n      weather: current,\n      unitsLabels: {\n        temperature: \"C\",\n        windSpeed: \"Km/h\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ForecastWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(MediumLabel, {\n        weight: \"800\",\n        children: \"Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Forecast, {\n        children: forecasts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\nResult.propTypes = {\n  weather: PropTypes.shape({\n    current: PropTypes.object,\n    forecast: PropTypes.array\n  }).isRequired\n};\nexport default Result;","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/Result.js"],"names":["React","PropTypes","styled","device","ForecastHour","ResultFadeIn","MediumLabel","CurrentWeather","Results","div","ForecastWrapper","Forecast","laptop","Result","weather","current","forecast","forecasts","map","date","description","icon","temperature","windSpeed","propTypes","shape","object","array","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,OAAO,GAAGN,MAAM,CAACO,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeJ,YAAa;AAC5B,CAVA;AAYA,MAAMK,eAAe,GAAGR,MAAM,CAACO,GAAI;AACnC;AACA;AACA;AACA,CAJA;AAMA,MAAME,QAAQ,GAAGT,MAAM,CAACO,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAWN,MAAM,CAACS,MAAO;AACzB;AACA;AACA,CAZA;;AAcA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAC9B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBF,OAA9B;AAEA,QAAMG,SAAS,GAAGD,QAAQ,CAACE,GAAT,CAAa,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA,IAArB;AAA2BC,IAAAA;AAA3B,GAAD,kBAC7B,QAAC,YAAD;AAEE,IAAA,IAAI,EAAEH,IAFR;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,IAAI,EAAEC,IAJR;AAKE,IAAA,WAAW,EAAEC,WALf;AAME,IAAA,WAAW,EAAE;AAAEA,MAAAA,WAAW,EAAE,GAAf;AAAoBC,MAAAA,SAAS,EAAE;AAA/B;AANf,KACOJ,IADP;AAAA;AAAA;AAAA;AAAA,UADgB,CAAlB;AAWA,sBACE,QAAC,OAAD;AAAA,4BACE,QAAC,cAAD;AACE,MAAA,OAAO,EAAEJ,OADX;AAEE,MAAA,WAAW,EAAE;AAAEO,QAAAA,WAAW,EAAE,GAAf;AAAoBC,QAAAA,SAAS,EAAE;AAA/B;AAFf;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,eAAD;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,MAAM,EAAC,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAA,kBAAWN;AAAX;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA1BD;;AA4BAJ,MAAM,CAACW,SAAP,GAAmB;AACjBV,EAAAA,OAAO,EAAEb,SAAS,CAACwB,KAAV,CAAgB;AACvBV,IAAAA,OAAO,EAAEd,SAAS,CAACyB,MADI;AAEvBV,IAAAA,QAAQ,EAAEf,SAAS,CAAC0B;AAFG,GAAhB,EAGNC;AAJc,CAAnB;AAOA,eAAef,MAAf","sourcesContent":["import React from \"react\";\nimport \"./Result.module.sass\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport device from \"../../responsive/Device\";\nimport ForecastHour from \"./ForecastHour\";\nimport ResultFadeIn from \"./ResultFadeIn\";\nimport MediumLabel from \"./MediumLabel\";\nimport CurrentWeather from \"./CurrentWeather\";\n\nconst Results = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 40px 0;\n  opacity: 0;\n  visibility: hidden;\n  position: relative;\n  top: 20px;\n  animation: ${ResultFadeIn} 0.5s 1.4s forwards;\n`;\n\nconst ForecastWrapper = styled.div`\n  flex-basis: 100%;\n  margin: 20px 0;\n  overflow: hidden;\n`;\n\nconst Forecast = styled.div`\n  position: relative;\n  display: flex;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  scrollbar-color: lightgray #ffffff;\n  scrollbar-width: thin;\n  margin-top: 20px;\n  padding-bottom: 20px;\n  @media ${device.laptop} {\n    order: 4;\n  }\n`;\n\nconst Result = ({ weather }) => {\n  const { current, forecast } = weather;\n\n  const forecasts = forecast.map(({ date, description, icon, temperature }) => (\n    <ForecastHour\n      key={date}\n      date={date}\n      description={description}\n      icon={icon}\n      temperature={temperature}\n      unitsLabels={{ temperature: \"C\", windSpeed: \"Km/h\" }}\n    />\n  ));\n\n  return (\n    <Results>\n      <CurrentWeather\n        weather={current}\n        unitsLabels={{ temperature: \"C\", windSpeed: \"Km/h\" }}\n      />\n      <ForecastWrapper>\n        <MediumLabel weight=\"800\">Forecast</MediumLabel>\n        <Forecast>{forecasts}</Forecast>\n      </ForecastWrapper>\n    </Results>\n  );\n};\n\nResult.propTypes = {\n  weather: PropTypes.shape({\n    current: PropTypes.object,\n    forecast: PropTypes.array,\n  }).isRequired,\n};\n\nexport default Result;\n"]},"metadata":{},"sourceType":"module"}