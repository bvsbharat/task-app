{"ast":null,"code":"import dayjs from \"dayjs\";\nimport { getIcon } from \"./iconsMap\";\n\nconst formatDate = (dte, lang) => {\n  if (lang && lang !== \"en\") {\n    dayjs.locale(lang.replace(\"_\", \"-\"));\n  }\n\n  if (dte && dayjs().isValid(dte)) {\n    return dayjs.unix(dte).format(\"ddd D MMMM\");\n  }\n\n  return \"\";\n};\n\nconst mapCurrent = (day, geoData, lang) => {\n  return {\n    city: geoData.name,\n    state: geoData.state,\n    date: formatDate(day.dt, lang),\n    description: day.weather[0] ? day.weather[0].description : null,\n    icon: day.weather[0] && getIcon(day.weather[0].icon),\n    temperature: {\n      current: day.temp.toFixed(0),\n      min: undefined,\n      // openweather doesnt provide min/max on current weather\n      max: undefined\n    },\n    wind: day.wind_speed,\n    humidity: day.humidity,\n    pressure: day.pressure\n  };\n};\n\nconst mapForecast = (forecast, lang) => {\n  const mappedForecast = [];\n\n  for (let i = 0; i < 8; i += 1) {\n    mappedForecast.push({\n      date: formatDate(forecast[i].dt, lang),\n      description: forecast[i].weather[0] ? forecast[i].weather[0].description : null,\n      icon: forecast[i].weather[0] && getIcon(forecast[i].weather[0].icon),\n      temperature: {\n        min: forecast[i].temp.min.toFixed(0),\n        max: forecast[i].temp.max.toFixed(0)\n      },\n      wind: forecast[i].wind_speed.toFixed(0),\n      humidity: forecast[i].humidity,\n      pressure: forecast[i].pressure\n    });\n  }\n\n  return mappedForecast;\n};\n\nconst mapData = (forecastData, todayData, geoData, lang) => {\n  const mapped = {};\n\n  if (forecastData && todayData) {\n    const daysData = forecastData;\n    mapped.current = mapCurrent(todayData, geoData, lang);\n    mapped.forecast = mapForecast(daysData);\n  }\n\n  return mapped;\n};\n\nexport { mapData };","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/utils/mapData.js"],"names":["dayjs","getIcon","formatDate","dte","lang","locale","replace","isValid","unix","format","mapCurrent","day","geoData","city","name","state","date","dt","description","weather","icon","temperature","current","temp","toFixed","min","undefined","max","wind","wind_speed","humidity","pressure","mapForecast","forecast","mappedForecast","i","push","mapData","forecastData","todayData","mapped","daysData"],"mappings":"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","sourcesContent":["import dayjs from \"dayjs\";\nimport { getIcon } from \"./iconsMap\";\n\nconst formatDate = (dte, lang) => {\n  if (lang && lang !== \"en\") {\n    dayjs.locale(lang.replace(\"_\", \"-\"));\n  }\n  if (dte && dayjs().isValid(dte)) {\n    return dayjs.unix(dte).format(\"ddd D MMMM\");\n  }\n  return \"\";\n};\n\nconst mapCurrent = (day, geoData, lang) => {\n  return {\n    city: geoData.name,\n    state: geoData.state,\n    date: formatDate(day.dt, lang),\n    description: day.weather[0] ? day.weather[0].description : null,\n    icon: day.weather[0] && getIcon(day.weather[0].icon),\n    temperature: {\n      current: day.temp.toFixed(0),\n      min: undefined, // openweather doesnt provide min/max on current weather\n      max: undefined,\n    },\n    wind: day.wind_speed,\n    humidity: day.humidity,\n    pressure: day.pressure,\n  };\n};\n\nconst mapForecast = (forecast, lang) => {\n  const mappedForecast = [];\n  for (let i = 0; i < 8; i += 1) {\n    mappedForecast.push({\n      date: formatDate(forecast[i].dt, lang),\n      description: forecast[i].weather[0]\n        ? forecast[i].weather[0].description\n        : null,\n      icon: forecast[i].weather[0] && getIcon(forecast[i].weather[0].icon),\n      temperature: {\n        min: forecast[i].temp.min.toFixed(0),\n        max: forecast[i].temp.max.toFixed(0),\n      },\n      wind: forecast[i].wind_speed.toFixed(0),\n      humidity: forecast[i].humidity,\n      pressure: forecast[i].pressure,\n    });\n  }\n  return mappedForecast;\n};\n\nconst mapData = (forecastData, todayData, geoData, lang) => {\n  const mapped = {};\n  if (forecastData && todayData) {\n    const daysData = forecastData;\n    mapped.current = mapCurrent(todayData, geoData, lang);\n    mapped.forecast = mapForecast(daysData);\n  }\n  return mapped;\n};\n\nexport { mapData };\n"]},"metadata":{},"sourceType":"module"}