{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { SUCCESS, FAILURE } from \"../redux/action\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\n\nconst useOpenWeather = options => {\n  const dispatch = useDispatch();\n  const endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n  const {\n    data,\n    errorMessage\n  } = useSelector(state => state);\n  console.log(data, errorMessage);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    unit,\n    lang,\n    key,\n    lon,\n    lat\n  } = options;\n  const params = {\n    appid: key,\n    lang,\n    units: unit,\n    lat,\n    lon\n  };\n\n  const fetchData = async () => {\n    setIsLoading(true);\n\n    try {\n      const forecastResponse = await axios.get(endpoint, {\n        params\n      });\n      const payload = mapData(forecastResponse.data.daily, forecastResponse.data.current, lang);\n      dispatch({\n        type: SUCCESS,\n        payload\n      });\n    } catch (error) {\n      console.error(error.message);\n      dispatch({\n        type: FAILURE,\n        payload: {\n          error: error.message || error\n        }\n      });\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [lon, lat]);\n  return {\n    data,\n    isLoading,\n    errorMessage,\n    fetchData\n  };\n};\n\nexport default useOpenWeather;","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/hooks/useOpenWeather.js"],"names":["useEffect","useState","useSelector","useDispatch","SUCCESS","FAILURE","axios","mapData","useOpenWeather","options","dispatch","endpoint","data","errorMessage","state","console","log","isLoading","setIsLoading","unit","lang","key","lon","lat","params","appid","units","fetchData","forecastResponse","get","payload","daily","current","type","error","message"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,iBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,UAAxB;;AAEA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AAClC,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,QAAQ,GAAG,2CAAjB;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAyBX,WAAW,CAAEY,KAAD,IAAWA,KAAZ,CAA1C;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkBC,YAAlB;AACA,QAAM;AAAA,OAACI,SAAD;AAAA,OAAYC;AAAZ,MAA4BjB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEkB,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,GAAd;AAAmBC,IAAAA,GAAnB;AAAwBC,IAAAA;AAAxB,MAAgCd,OAAtC;AACA,QAAMe,MAAM,GAAG;AACbC,IAAAA,KAAK,EAAEJ,GADM;AAEbD,IAAAA,IAFa;AAGbM,IAAAA,KAAK,EAAEP,IAHM;AAIbI,IAAAA,GAJa;AAKbD,IAAAA;AALa,GAAf;;AAQA,QAAMK,SAAS,GAAG,YAAY;AAC5BT,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI;AACF,YAAMU,gBAAgB,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAUlB,QAAV,EAAoB;AAAEa,QAAAA;AAAF,OAApB,CAA/B;AACA,YAAMM,OAAO,GAAGvB,OAAO,CACrBqB,gBAAgB,CAAChB,IAAjB,CAAsBmB,KADD,EAErBH,gBAAgB,CAAChB,IAAjB,CAAsBoB,OAFD,EAGrBZ,IAHqB,CAAvB;AAMAV,MAAAA,QAAQ,CAAC;AACPuB,QAAAA,IAAI,EAAE7B,OADC;AAEP0B,QAAAA;AAFO,OAAD,CAAR;AAID,KAZD,CAYE,OAAOI,KAAP,EAAc;AACdnB,MAAAA,OAAO,CAACmB,KAAR,CAAcA,KAAK,CAACC,OAApB;AACAzB,MAAAA,QAAQ,CAAC;AAAEuB,QAAAA,IAAI,EAAE5B,OAAR;AAAiByB,QAAAA,OAAO,EAAE;AAAEI,UAAAA,KAAK,EAAEA,KAAK,CAACC,OAAN,IAAiBD;AAA1B;AAA1B,OAAD,CAAR;AACD;;AACDhB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAnBD;;AAoBAlB,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACL,GAAD,EAAMC,GAAN,CAFM,CAAT;AAGA,SAAO;AAAEX,IAAAA,IAAF;AAAQK,IAAAA,SAAR;AAAmBJ,IAAAA,YAAnB;AAAiCc,IAAAA;AAAjC,GAAP;AACD,CAxCD;;AA0CA,eAAenB,cAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { SUCCESS, FAILURE } from \"../redux/action\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\n\nconst useOpenWeather = (options) => {\n  const dispatch = useDispatch();\n  const endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n  const { data, errorMessage } = useSelector((state) => state);\n\n  console.log(data, errorMessage);\n  const [isLoading, setIsLoading] = useState(false);\n  const { unit, lang, key, lon, lat } = options;\n  const params = {\n    appid: key,\n    lang,\n    units: unit,\n    lat,\n    lon,\n  };\n\n  const fetchData = async () => {\n    setIsLoading(true);\n    try {\n      const forecastResponse = await axios.get(endpoint, { params });\n      const payload = mapData(\n        forecastResponse.data.daily,\n        forecastResponse.data.current,\n        lang\n      );\n\n      dispatch({\n        type: SUCCESS,\n        payload,\n      });\n    } catch (error) {\n      console.error(error.message);\n      dispatch({ type: FAILURE, payload: { error: error.message || error } });\n    }\n    setIsLoading(false);\n  };\n  useEffect(() => {\n    fetchData();\n  }, [lon, lat]);\n  return { data, isLoading, errorMessage, fetchData };\n};\n\nexport default useOpenWeather;\n"]},"metadata":{},"sourceType":"module"}