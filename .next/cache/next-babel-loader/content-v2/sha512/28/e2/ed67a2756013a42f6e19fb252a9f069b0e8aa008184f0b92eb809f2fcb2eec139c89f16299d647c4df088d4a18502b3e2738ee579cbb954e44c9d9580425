{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/WeatherInt.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  max-width: 1500px;\\n  margin: 0 auto;\\n  height: calc(100vh - 64px);\\n  width: 100%;\\n  position: relative;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from \"react\";\nimport { getData } from \"../../redux/action\";\nimport { Provider, useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport SearchCity from \"./SearchCity\";\nimport Title from \"./Title\";\nimport Result from \"./Result\";\nimport NotFound from \"./NotFound\";\nvar WeatherWrapper = styled.div(_templateObject());\n_c = WeatherWrapper;\n\nvar WeatherInt = function WeatherInt() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(\"\"),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(false),\n      error = _useState2[0],\n      SetError = _useState2[1];\n\n  var _useState3 = useState(null),\n      weatherInfo = _useState3[0],\n      setWeatherInfo = _useState3[1];\n\n  var handleInputChange = function handleInputChange(e) {\n    setValue(e.target.value);\n  };\n\n  var handleSearchCity = function handleSearchCity(e) {\n    e.preventDefault(); //value\n\n    var key = \"82bc0d2d2aa2db497547b0da40fb0dcf\"; //process.env.REACT_APP_API_KEY;\n\n    dispatch(getData({\n      key: key,\n      query: value,\n      lang: \"en\",\n      unit: \"metric\" // values are (metric, standard, imperial)\n\n    })); // const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\n    // const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\n    // Promise.all([fetch(weather), fetch(forecast)])\n    //   .then(([res1, res2]) => {\n    //     if (res1.ok && res2.ok) {\n    //       return Promise.all([res1.json(), res2.json()]);\n    //     }\n    //     throw Error(res1.statusText, res2.statusText);\n    //   })\n    //   .then(([data1, data2]) => {\n    //     const months = [\n    //       \"January\",\n    //       \"February\",\n    //       \"March\",\n    //       \"April\",\n    //       \"May\",\n    //       \"June\",\n    //       \"July\",\n    //       \"August\",\n    //       \"September\",\n    //       \"October\",\n    //       \"Nocvember\",\n    //       \"December\",\n    //     ];\n    //     const days = [\n    //       \"Sunday\",\n    //       \"Monday\",\n    //       \"Tuesday\",\n    //       \"Wednesday\",\n    //       \"Thursday\",\n    //       \"Friday\",\n    //       \"Saturday\",\n    //     ];\n    //     const currentDate = new Date();\n    //     const date = `${days[currentDate.getDay()]}, ${currentDate.getDate()} ${\n    //       months[currentDate.getMonth()]\n    //     }`;\n    //     const weatherInfo = {\n    //       city: data1.name,\n    //       country: data1.sys.country,\n    //       date,\n    //       description: data1.weather[0].description,\n    //       main: data1.weather[0].main,\n    //       temp: data1.main.temp,\n    //       pressure: data1.main.pressure,\n    //       humidity: data1.main.humidity,\n    //       wind: data1.wind.speed,\n    //       forecast: data2.list,\n    //     };\n    //     setWeatherInfo(weatherInfo);\n    //   })\n    //   .catch((error) => {\n    //     SetError(true);\n    //   });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(WeatherWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        weatherInfo: weatherInfo,\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(SearchCity, {\n        value: value,\n        showResult: (weatherInfo || error) && true,\n        change: handleInputChange,\n        submit: handleSearchCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, _this), weatherInfo && /*#__PURE__*/_jsxDEV(Result, {\n        weather: weatherInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }, _this), error && /*#__PURE__*/_jsxDEV(NotFound, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 19\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(WeatherInt, \"AGypME7LM3fDwyxMq9MPZ8B5C8U=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = WeatherInt;\nexport default WeatherInt;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WeatherWrapper\");\n$RefreshReg$(_c2, \"WeatherInt\");","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/WeatherInt.js"],"names":["React","useEffect","useState","getData","Provider","useSelector","useDispatch","styled","SearchCity","Title","Result","NotFound","WeatherWrapper","div","WeatherInt","dispatch","value","setValue","error","SetError","weatherInfo","setWeatherInfo","handleInputChange","e","target","handleSearchCity","preventDefault","key","query","lang","unit"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAmD,aAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAMC,cAAc,GAAGL,MAAM,CAACM,GAAV,mBAApB;KAAMD,c;;AAQN,IAAME,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AACvB,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;;AADuB,kBAEGJ,QAAQ,CAAC,EAAD,CAFX;AAAA,MAEhBc,KAFgB;AAAA,MAETC,QAFS;;AAAA,mBAGGf,QAAQ,CAAC,KAAD,CAHX;AAAA,MAGhBgB,KAHgB;AAAA,MAGTC,QAHS;;AAAA,mBAIejB,QAAQ,CAAC,IAAD,CAJvB;AAAA,MAIhBkB,WAJgB;AAAA,MAIHC,cAJG;;AAMvB,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,CAAD,EAAO;AAC/BN,IAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASR,KAAV,CAAR;AACD,GAFD;;AAIA,MAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,CAAD,EAAO;AAC9BA,IAAAA,CAAC,CAACG,cAAF,GAD8B,CAE9B;;AACA,QAAMC,GAAG,GAAG,kCAAZ,CAH8B,CAGkB;;AAEhDZ,IAAAA,QAAQ,CACNZ,OAAO,CAAC;AACNwB,MAAAA,GAAG,EAAHA,GADM;AAENC,MAAAA,KAAK,EAAEZ,KAFD;AAGNa,MAAAA,IAAI,EAAE,IAHA;AAINC,MAAAA,IAAI,EAAE,QAJA,CAIU;;AAJV,KAAD,CADD,CAAR,CAL8B,CAa9B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACD,GAtED;;AAwEA,sBACE;AAAA,2BACE,QAAC,cAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,WAAW,EAAEV,WAApB;AAAiC,QAAA,KAAK,EAAEF;AAAxC;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,QAAC,UAAD;AACE,QAAA,KAAK,EAAEF,KADT;AAEE,QAAA,UAAU,EAAE,CAACI,WAAW,IAAIF,KAAhB,KAA0B,IAFxC;AAGE,QAAA,MAAM,EAAEI,iBAHV;AAIE,QAAA,MAAM,EAAEG;AAJV;AAAA;AAAA;AAAA;AAAA,eAFF,EAQGL,WAAW,iBAAI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,eARlB,EASGF,KAAK,iBAAI,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,eATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAeD,CAjGD;;GAAMJ,U;UACaR,W;;;MADbQ,U;AAmGN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { getData } from \"../../redux/action\";\nimport { Provider, useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport SearchCity from \"./SearchCity\";\nimport Title from \"./Title\";\nimport Result from \"./Result\";\nimport NotFound from \"./NotFound\";\n\nconst WeatherWrapper = styled.div`\n  max-width: 1500px;\n  margin: 0 auto;\n  height: calc(100vh - 64px);\n  width: 100%;\n  position: relative;\n`;\n\nconst WeatherInt = () => {\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(\"\");\n  const [error, SetError] = useState(false);\n  const [weatherInfo, setWeatherInfo] = useState(null);\n\n  const handleInputChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSearchCity = (e) => {\n    e.preventDefault();\n    //value\n    const key = \"82bc0d2d2aa2db497547b0da40fb0dcf\"; //process.env.REACT_APP_API_KEY;\n\n    dispatch(\n      getData({\n        key,\n        query: value,\n        lang: \"en\",\n        unit: \"metric\", // values are (metric, standard, imperial)\n      })\n    );\n    // const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\n    // const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\n\n    // Promise.all([fetch(weather), fetch(forecast)])\n    //   .then(([res1, res2]) => {\n    //     if (res1.ok && res2.ok) {\n    //       return Promise.all([res1.json(), res2.json()]);\n    //     }\n    //     throw Error(res1.statusText, res2.statusText);\n    //   })\n    //   .then(([data1, data2]) => {\n    //     const months = [\n    //       \"January\",\n    //       \"February\",\n    //       \"March\",\n    //       \"April\",\n    //       \"May\",\n    //       \"June\",\n    //       \"July\",\n    //       \"August\",\n    //       \"September\",\n    //       \"October\",\n    //       \"Nocvember\",\n    //       \"December\",\n    //     ];\n    //     const days = [\n    //       \"Sunday\",\n    //       \"Monday\",\n    //       \"Tuesday\",\n    //       \"Wednesday\",\n    //       \"Thursday\",\n    //       \"Friday\",\n    //       \"Saturday\",\n    //     ];\n    //     const currentDate = new Date();\n    //     const date = `${days[currentDate.getDay()]}, ${currentDate.getDate()} ${\n    //       months[currentDate.getMonth()]\n    //     }`;\n\n    //     const weatherInfo = {\n    //       city: data1.name,\n    //       country: data1.sys.country,\n    //       date,\n    //       description: data1.weather[0].description,\n    //       main: data1.weather[0].main,\n    //       temp: data1.main.temp,\n    //       pressure: data1.main.pressure,\n    //       humidity: data1.main.humidity,\n    //       wind: data1.wind.speed,\n    //       forecast: data2.list,\n    //     };\n\n    //     setWeatherInfo(weatherInfo);\n    //   })\n    //   .catch((error) => {\n    //     SetError(true);\n    //   });\n  };\n\n  return (\n    <>\n      <WeatherWrapper>\n        <Title weatherInfo={weatherInfo} error={error} />\n        <SearchCity\n          value={value}\n          showResult={(weatherInfo || error) && true}\n          change={handleInputChange}\n          submit={handleSearchCity}\n        />\n        {weatherInfo && <Result weather={weatherInfo} />}\n        {error && <NotFound error={error} />}\n      </WeatherWrapper>\n    </>\n  );\n};\n\nexport default WeatherInt;\n"]},"metadata":{},"sourceType":"module"}