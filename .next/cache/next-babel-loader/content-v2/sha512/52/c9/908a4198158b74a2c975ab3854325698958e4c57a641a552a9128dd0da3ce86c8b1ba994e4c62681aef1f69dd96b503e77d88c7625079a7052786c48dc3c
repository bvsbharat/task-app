{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var SET_DATA = \"SET_DATA\";\nexport var FAILURE = \"FAILURE\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\nexport var getData = function getData(options) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var endpoint, weather, forecast, unit, lang, key, query, params, axiosRequest1, axiosRequest2, forecastResponse, payload;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"trest\");\n              endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n              weather = \"https://api.openweathermap.org/data/2.5/weather?q=\".concat(value, \"&APPID=\").concat(APIkey, \"&units=metric\");\n              forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\".concat(value, \"&APPID=\").concat(APIkey, \"&units=metric\");\n              unit = options.unit, lang = options.lang, key = options.key, query = options.query;\n              params = {\n                appid: key,\n                lang: lang,\n                units: unit,\n                q: query\n              };\n              axiosRequest1 = axios.get(weather, {\n                params: params\n              });\n              axiosRequest2 = axios.get(forecast, {\n                params: params\n              });\n              _context.prev = 8;\n              _context.next = 11;\n              return axios.all([axiosRequest1, axiosRequest2]);\n\n            case 11:\n              forecastResponse = _context.sent;\n              payload = mapData(forecastResponse.data.daily, forecastResponse.data.current, lang);\n              dispatch({\n                type: SET_DATA,\n                payload: payload\n              });\n              _context.next = 20;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](8);\n              console.error(_context.t0.message);\n              dispatch({\n                type: FAILURE,\n                payload: {\n                  error: _context.t0.message || _context.t0\n                }\n              });\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 16]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/redux/action.js"],"names":["SET_DATA","FAILURE","axios","mapData","getData","options","dispatch","console","log","endpoint","weather","value","APIkey","forecast","unit","lang","key","query","params","appid","units","q","axiosRequest1","get","axiosRequest2","all","forecastResponse","payload","data","daily","current","type","error","message"],"mappings":";;AAAA,OAAO,IAAMA,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB;AACP,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD;AAAA;AAAA,wEAAa,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAClCC,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACMC,cAAAA,QAF4B,GAEjB,2CAFiB;AAI5BC,cAAAA,OAJ4B,+DAImCC,KAJnC,oBAIkDC,MAJlD;AAK5BC,cAAAA,QAL4B,gEAKqCF,KALrC,oBAKoDC,MALpD;AAO1BE,cAAAA,IAP0B,GAOCT,OAPD,CAO1BS,IAP0B,EAOpBC,IAPoB,GAOCV,OAPD,CAOpBU,IAPoB,EAOdC,GAPc,GAOCX,OAPD,CAOdW,GAPc,EAOTC,KAPS,GAOCZ,OAPD,CAOTY,KAPS;AAQ5BC,cAAAA,MAR4B,GAQnB;AACbC,gBAAAA,KAAK,EAAEH,GADM;AAEbD,gBAAAA,IAAI,EAAJA,IAFa;AAGbK,gBAAAA,KAAK,EAAEN,IAHM;AAIbO,gBAAAA,CAAC,EAAEJ;AAJU,eARmB;AAe5BK,cAAAA,aAf4B,GAeZpB,KAAK,CAACqB,GAAN,CAAUb,OAAV,EAAmB;AAAEQ,gBAAAA,MAAM,EAANA;AAAF,eAAnB,CAfY;AAgB5BM,cAAAA,aAhB4B,GAgBZtB,KAAK,CAACqB,GAAN,CAAUV,QAAV,EAAoB;AAAEK,gBAAAA,MAAM,EAANA;AAAF,eAApB,CAhBY;AAAA;AAAA;AAAA,qBAmBDhB,KAAK,CAACuB,GAAN,CAAU,CAACH,aAAD,EAAgBE,aAAhB,CAAV,CAnBC;;AAAA;AAmB1BE,cAAAA,gBAnB0B;AAoB1BC,cAAAA,OApB0B,GAoBhBxB,OAAO,CACrBuB,gBAAgB,CAACE,IAAjB,CAAsBC,KADD,EAErBH,gBAAgB,CAACE,IAAjB,CAAsBE,OAFD,EAGrBf,IAHqB,CApBS;AA0BhCT,cAAAA,QAAQ,CAAC;AACPyB,gBAAAA,IAAI,EAAE/B,QADC;AAEP2B,gBAAAA,OAAO,EAAPA;AAFO,eAAD,CAAR;AA1BgC;AAAA;;AAAA;AAAA;AAAA;AA+BhCpB,cAAAA,OAAO,CAACyB,KAAR,CAAc,YAAMC,OAApB;AACA3B,cAAAA,QAAQ,CAAC;AAAEyB,gBAAAA,IAAI,EAAE9B,OAAR;AAAiB0B,gBAAAA,OAAO,EAAE;AAAEK,kBAAAA,KAAK,EAAE,YAAMC,OAAN;AAAT;AAA1B,eAAD,CAAR;;AAhCgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB","sourcesContent":["export const SET_DATA = \"SET_DATA\";\nexport const FAILURE = \"FAILURE\";\nimport axios from \"axios\";\nimport { mapData } from \"../utils\";\n\nexport const getData = (options) => async (dispatch) => {\n  console.log(\"trest\");\n  const endpoint = \"//api.openweathermap.org/data/2.5/onecall\";\n\n  const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\n  const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\n\n  const { unit, lang, key, query } = options;\n  const params = {\n    appid: key,\n    lang,\n    units: unit,\n    q: query,\n  };\n\n  const axiosRequest1 = axios.get(weather, { params });\n  const axiosRequest2 = axios.get(forecast, { params });\n\n  try {\n    const forecastResponse = await axios.all([axiosRequest1, axiosRequest2]);\n    const payload = mapData(\n      forecastResponse.data.daily,\n      forecastResponse.data.current,\n      lang\n    );\n\n    dispatch({\n      type: SET_DATA,\n      payload,\n    });\n  } catch (error) {\n    console.error(error.message);\n    dispatch({ type: FAILURE, payload: { error: error.message || error } });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}