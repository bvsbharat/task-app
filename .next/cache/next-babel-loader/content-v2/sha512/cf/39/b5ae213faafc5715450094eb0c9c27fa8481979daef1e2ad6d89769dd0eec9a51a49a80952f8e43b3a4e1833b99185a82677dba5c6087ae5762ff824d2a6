{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/WeatherInt.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  max-width: 1500px;\\n  margin: 0 auto;\\n  height: calc(100vh - 64px);\\n  width: 100%;\\n  position: relative;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport SearchCity from \"./SearchCity\";\nimport Title from \"./Title\";\nimport Result from \"./Result\";\nimport NotFound from \"./NotFound\";\nvar WeatherWrapper = styled.div(_templateObject());\n_c = WeatherWrapper;\n\nvar WeatherInt = function WeatherInt() {\n  _s();\n\n  var _useState = useState(\"\"),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(false),\n      error = _useState2[0],\n      SetError = _useState2[1];\n\n  var _useState3 = useState(null),\n      weatherInfo = _useState3[0],\n      setWeatherInfo = _useState3[1];\n\n  var handleInputChange = function handleInputChange(e) {\n    setValue(e.target.value);\n  };\n\n  var handleSearchCity = function handleSearchCity(e) {\n    e.preventDefault();\n    var APIkey = \"82bc0d2d2aa2db497547b0da40fb0dcf\"; //process.env.REACT_APP_API_KEY;\n\n    var weather = \"https://api.openweathermap.org/data/2.5/weather?q=\".concat(value, \"&APPID=\").concat(APIkey, \"&units=metric\");\n    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\".concat(value, \"&APPID=\").concat(APIkey, \"&units=metric\");\n    Promise.all([fetch(weather), fetch(forecast)]).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          res1 = _ref2[0],\n          res2 = _ref2[1];\n\n      if (res1.ok && res2.ok) {\n        return Promise.all([res1.json(), res2.json()]);\n      }\n\n      throw Error(res1.statusText, res2.statusText);\n    }).then(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          data1 = _ref4[0],\n          data2 = _ref4[1];\n\n      var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"Nocvember\", \"December\"];\n      var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      var currentDate = new Date();\n      var date = \"\".concat(days[currentDate.getDay()], \" \").concat(currentDate.getDate(), \" \").concat(months[currentDate.getMonth()]);\n      var sunset = new Date(data1.sys.sunset * 1000).toLocaleTimeString().slice(0, 5);\n      var sunrise = new Date(data1.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5);\n      var weatherInfo = {\n        city: data1.name,\n        country: data1.sys.country,\n        date: date,\n        description: data1.weather[0].description,\n        main: data1.weather[0].main,\n        temp: data1.main.temp,\n        highestTemp: data1.main.temp_max,\n        lowestTemp: data1.main.temp_min,\n        sunrise: sunrise,\n        sunset: sunset,\n        clouds: data1.clouds.all,\n        humidity: data1.main.humidity,\n        wind: data1.wind.speed,\n        forecast: data2.list\n      };\n      setWeatherInfo(weatherInfo);\n    })[\"catch\"](function (error) {\n      SetError(true);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(WeatherWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        weatherInfo: weatherInfo,\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(SearchCity, {\n        value: value,\n        showResult: (weatherInfo || error) && true,\n        change: handleInputChange,\n        submit: handleSearchCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, _this), weatherInfo && /*#__PURE__*/_jsxDEV(Result, {\n        weather: weatherInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, _this), error && /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(WeatherInt, \"Smauc1tkW6dTGIFRLmwxa6tAQvs=\");\n\n_c2 = WeatherInt;\nexport default WeatherInt;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WeatherWrapper\");\n$RefreshReg$(_c2, \"WeatherInt\");","map":{"version":3,"sources":["/Users/bbhavnasi/Desktop/ReactJS-Apps/App1/nextjs-blog/src/components/WeatherInt/WeatherInt.js"],"names":["React","useEffect","useState","styled","SearchCity","Title","Result","NotFound","WeatherWrapper","div","WeatherInt","value","setValue","error","SetError","weatherInfo","setWeatherInfo","handleInputChange","e","target","handleSearchCity","preventDefault","APIkey","weather","forecast","Promise","all","fetch","then","res1","res2","ok","json","Error","statusText","data1","data2","months","days","currentDate","Date","date","getDay","getDate","getMonth","sunset","sys","toLocaleTimeString","slice","sunrise","city","name","country","description","main","temp","highestTemp","temp_max","lowestTemp","temp_min","clouds","humidity","wind","speed","list"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport styled from \"styled-components\";\nimport SearchCity from \"./SearchCity\";\nimport Title from \"./Title\";\nimport Result from \"./Result\";\nimport NotFound from \"./NotFound\";\n\nconst WeatherWrapper = styled.div`\n  max-width: 1500px;\n  margin: 0 auto;\n  height: calc(100vh - 64px);\n  width: 100%;\n  position: relative;\n`;\n\nconst WeatherInt = () => {\n  const [value, setValue] = useState(\"\");\n  const [error, SetError] = useState(false);\n  const [weatherInfo, setWeatherInfo] = useState(null);\n\n  const handleInputChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSearchCity = (e) => {\n    e.preventDefault();\n    const APIkey = \"82bc0d2d2aa2db497547b0da40fb0dcf\"; //process.env.REACT_APP_API_KEY;\n\n    const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\n    const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\n\n    Promise.all([fetch(weather), fetch(forecast)])\n      .then(([res1, res2]) => {\n        if (res1.ok && res2.ok) {\n          return Promise.all([res1.json(), res2.json()]);\n        }\n        throw Error(res1.statusText, res2.statusText);\n      })\n      .then(([data1, data2]) => {\n        const months = [\n          \"January\",\n          \"February\",\n          \"March\",\n          \"April\",\n          \"May\",\n          \"June\",\n          \"July\",\n          \"August\",\n          \"September\",\n          \"October\",\n          \"Nocvember\",\n          \"December\",\n        ];\n        const days = [\n          \"Sunday\",\n          \"Monday\",\n          \"Tuesday\",\n          \"Wednesday\",\n          \"Thursday\",\n          \"Friday\",\n          \"Saturday\",\n        ];\n        const currentDate = new Date();\n        const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\n          months[currentDate.getMonth()]\n        }`;\n        const sunset = new Date(data1.sys.sunset * 1000)\n          .toLocaleTimeString()\n          .slice(0, 5);\n        const sunrise = new Date(data1.sys.sunrise * 1000)\n          .toLocaleTimeString()\n          .slice(0, 5);\n\n        const weatherInfo = {\n          city: data1.name,\n          country: data1.sys.country,\n          date,\n          description: data1.weather[0].description,\n          main: data1.weather[0].main,\n          temp: data1.main.temp,\n          highestTemp: data1.main.temp_max,\n          lowestTemp: data1.main.temp_min,\n          sunrise,\n          sunset,\n          clouds: data1.clouds.all,\n          humidity: data1.main.humidity,\n          wind: data1.wind.speed,\n          forecast: data2.list,\n        };\n\n        setWeatherInfo(weatherInfo);\n      })\n      .catch((error) => {\n        SetError(true);\n      });\n  };\n\n  return (\n    <>\n      <WeatherWrapper>\n        <Title weatherInfo={weatherInfo} error={error} />\n        <SearchCity\n          value={value}\n          showResult={(weatherInfo || error) && true}\n          change={handleInputChange}\n          submit={handleSearchCity}\n        />\n        {weatherInfo && <Result weather={weatherInfo} />}\n        {error && <NotFound />}\n      </WeatherWrapper>\n    </>\n  );\n};\n\nexport default WeatherInt;\n"]},"metadata":{},"sourceType":"module"}